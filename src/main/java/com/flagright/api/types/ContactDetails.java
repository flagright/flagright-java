/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flagright.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.flagright.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ContactDetails.Builder.class)
public final class ContactDetails {
    private final Optional<List<String>> emailIds;

    private final Optional<List<String>> contactNumbers;

    private final Optional<List<String>> faxNumbers;

    private final Optional<List<String>> websites;

    private final Optional<List<Address>> addresses;

    private final Optional<ConsumerName> name;

    private final Optional<List<Tag>> tags;

    private final Map<String, Object> additionalProperties;

    private ContactDetails(
            Optional<List<String>> emailIds,
            Optional<List<String>> contactNumbers,
            Optional<List<String>> faxNumbers,
            Optional<List<String>> websites,
            Optional<List<Address>> addresses,
            Optional<ConsumerName> name,
            Optional<List<Tag>> tags,
            Map<String, Object> additionalProperties) {
        this.emailIds = emailIds;
        this.contactNumbers = contactNumbers;
        this.faxNumbers = faxNumbers;
        this.websites = websites;
        this.addresses = addresses;
        this.name = name;
        this.tags = tags;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Email addresses of the contacts for a given business customer
     */
    @JsonProperty("emailIds")
    public Optional<List<String>> getEmailIds() {
        return emailIds;
    }

    /**
     * @return Phone numbers to contact a given business customer
     */
    @JsonProperty("contactNumbers")
    public Optional<List<String>> getContactNumbers() {
        return contactNumbers;
    }

    /**
     * @return Fax numbers to contact a business customer
     */
    @JsonProperty("faxNumbers")
    public Optional<List<String>> getFaxNumbers() {
        return faxNumbers;
    }

    /**
     * @return Website of the company
     */
    @JsonProperty("websites")
    public Optional<List<String>> getWebsites() {
        return websites;
    }

    /**
     * @return Address(es) of the company
     */
    @JsonProperty("addresses")
    public Optional<List<Address>> getAddresses() {
        return addresses;
    }

    @JsonProperty("name")
    public Optional<ConsumerName> getName() {
        return name;
    }

    /**
     * @return Additional information that can be added via tags
     */
    @JsonProperty("tags")
    public Optional<List<Tag>> getTags() {
        return tags;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ContactDetails && equalTo((ContactDetails) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ContactDetails other) {
        return emailIds.equals(other.emailIds)
                && contactNumbers.equals(other.contactNumbers)
                && faxNumbers.equals(other.faxNumbers)
                && websites.equals(other.websites)
                && addresses.equals(other.addresses)
                && name.equals(other.name)
                && tags.equals(other.tags);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.emailIds,
                this.contactNumbers,
                this.faxNumbers,
                this.websites,
                this.addresses,
                this.name,
                this.tags);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<List<String>> emailIds = Optional.empty();

        private Optional<List<String>> contactNumbers = Optional.empty();

        private Optional<List<String>> faxNumbers = Optional.empty();

        private Optional<List<String>> websites = Optional.empty();

        private Optional<List<Address>> addresses = Optional.empty();

        private Optional<ConsumerName> name = Optional.empty();

        private Optional<List<Tag>> tags = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ContactDetails other) {
            emailIds(other.getEmailIds());
            contactNumbers(other.getContactNumbers());
            faxNumbers(other.getFaxNumbers());
            websites(other.getWebsites());
            addresses(other.getAddresses());
            name(other.getName());
            tags(other.getTags());
            return this;
        }

        @JsonSetter(value = "emailIds", nulls = Nulls.SKIP)
        public Builder emailIds(Optional<List<String>> emailIds) {
            this.emailIds = emailIds;
            return this;
        }

        public Builder emailIds(List<String> emailIds) {
            this.emailIds = Optional.ofNullable(emailIds);
            return this;
        }

        @JsonSetter(value = "contactNumbers", nulls = Nulls.SKIP)
        public Builder contactNumbers(Optional<List<String>> contactNumbers) {
            this.contactNumbers = contactNumbers;
            return this;
        }

        public Builder contactNumbers(List<String> contactNumbers) {
            this.contactNumbers = Optional.ofNullable(contactNumbers);
            return this;
        }

        @JsonSetter(value = "faxNumbers", nulls = Nulls.SKIP)
        public Builder faxNumbers(Optional<List<String>> faxNumbers) {
            this.faxNumbers = faxNumbers;
            return this;
        }

        public Builder faxNumbers(List<String> faxNumbers) {
            this.faxNumbers = Optional.ofNullable(faxNumbers);
            return this;
        }

        @JsonSetter(value = "websites", nulls = Nulls.SKIP)
        public Builder websites(Optional<List<String>> websites) {
            this.websites = websites;
            return this;
        }

        public Builder websites(List<String> websites) {
            this.websites = Optional.ofNullable(websites);
            return this;
        }

        @JsonSetter(value = "addresses", nulls = Nulls.SKIP)
        public Builder addresses(Optional<List<Address>> addresses) {
            this.addresses = addresses;
            return this;
        }

        public Builder addresses(List<Address> addresses) {
            this.addresses = Optional.ofNullable(addresses);
            return this;
        }

        @JsonSetter(value = "name", nulls = Nulls.SKIP)
        public Builder name(Optional<ConsumerName> name) {
            this.name = name;
            return this;
        }

        public Builder name(ConsumerName name) {
            this.name = Optional.ofNullable(name);
            return this;
        }

        @JsonSetter(value = "tags", nulls = Nulls.SKIP)
        public Builder tags(Optional<List<Tag>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder tags(List<Tag> tags) {
            this.tags = Optional.ofNullable(tags);
            return this;
        }

        public ContactDetails build() {
            return new ContactDetails(
                    emailIds, contactNumbers, faxNumbers, websites, addresses, name, tags, additionalProperties);
        }
    }
}
