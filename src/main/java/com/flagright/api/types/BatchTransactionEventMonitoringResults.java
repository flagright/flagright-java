/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flagright.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.flagright.api.core.ObjectMappers;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = BatchTransactionEventMonitoringResults.Builder.class)
public final class BatchTransactionEventMonitoringResults {
    private final List<BatchTransactionEventMonitoringResult> transactionEvents;

    private final double totalCount;

    private final Map<String, Object> additionalProperties;

    private BatchTransactionEventMonitoringResults(
            List<BatchTransactionEventMonitoringResult> transactionEvents,
            double totalCount,
            Map<String, Object> additionalProperties) {
        this.transactionEvents = transactionEvents;
        this.totalCount = totalCount;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("transactionEvents")
    public List<BatchTransactionEventMonitoringResult> getTransactionEvents() {
        return transactionEvents;
    }

    @JsonProperty("totalCount")
    public double getTotalCount() {
        return totalCount;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof BatchTransactionEventMonitoringResults
                && equalTo((BatchTransactionEventMonitoringResults) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(BatchTransactionEventMonitoringResults other) {
        return transactionEvents.equals(other.transactionEvents) && totalCount == other.totalCount;
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.transactionEvents, this.totalCount);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static TotalCountStage builder() {
        return new Builder();
    }

    public interface TotalCountStage {
        _FinalStage totalCount(double totalCount);

        Builder from(BatchTransactionEventMonitoringResults other);
    }

    public interface _FinalStage {
        BatchTransactionEventMonitoringResults build();

        _FinalStage transactionEvents(List<BatchTransactionEventMonitoringResult> transactionEvents);

        _FinalStage addTransactionEvents(BatchTransactionEventMonitoringResult transactionEvents);

        _FinalStage addAllTransactionEvents(List<BatchTransactionEventMonitoringResult> transactionEvents);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements TotalCountStage, _FinalStage {
        private double totalCount;

        private List<BatchTransactionEventMonitoringResult> transactionEvents = new ArrayList<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(BatchTransactionEventMonitoringResults other) {
            transactionEvents(other.getTransactionEvents());
            totalCount(other.getTotalCount());
            return this;
        }

        @java.lang.Override
        @JsonSetter("totalCount")
        public _FinalStage totalCount(double totalCount) {
            this.totalCount = totalCount;
            return this;
        }

        @java.lang.Override
        public _FinalStage addAllTransactionEvents(List<BatchTransactionEventMonitoringResult> transactionEvents) {
            this.transactionEvents.addAll(transactionEvents);
            return this;
        }

        @java.lang.Override
        public _FinalStage addTransactionEvents(BatchTransactionEventMonitoringResult transactionEvents) {
            this.transactionEvents.add(transactionEvents);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "transactionEvents", nulls = Nulls.SKIP)
        public _FinalStage transactionEvents(List<BatchTransactionEventMonitoringResult> transactionEvents) {
            this.transactionEvents.clear();
            this.transactionEvents.addAll(transactionEvents);
            return this;
        }

        @java.lang.Override
        public BatchTransactionEventMonitoringResults build() {
            return new BatchTransactionEventMonitoringResults(transactionEvents, totalCount, additionalProperties);
        }
    }
}
