/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flagright.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.flagright.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = WalletDetails.Builder.class)
public final class WalletDetails {
    private final Optional<String> walletType;

    private final Optional<String> walletId;

    private final Optional<String> paymentChannel;

    private final Optional<String> name;

    private final Optional<String> emailId;

    private final Optional<List<Tag>> tags;

    private final Optional<String> walletPhoneNumber;

    private final Optional<Amount> walletBalance;

    private final Optional<WalletNetwork> network;

    private final Optional<Address> address;

    private final Optional<CountryCode> countryOfNationality;

    private final Optional<List<UserDetails>> authorizedRepresentative;

    private final Optional<String> dateOfBirth;

    private final Optional<String> transactionHash;

    private final Map<String, Object> additionalProperties;

    private WalletDetails(
            Optional<String> walletType,
            Optional<String> walletId,
            Optional<String> paymentChannel,
            Optional<String> name,
            Optional<String> emailId,
            Optional<List<Tag>> tags,
            Optional<String> walletPhoneNumber,
            Optional<Amount> walletBalance,
            Optional<WalletNetwork> network,
            Optional<Address> address,
            Optional<CountryCode> countryOfNationality,
            Optional<List<UserDetails>> authorizedRepresentative,
            Optional<String> dateOfBirth,
            Optional<String> transactionHash,
            Map<String, Object> additionalProperties) {
        this.walletType = walletType;
        this.walletId = walletId;
        this.paymentChannel = paymentChannel;
        this.name = name;
        this.emailId = emailId;
        this.tags = tags;
        this.walletPhoneNumber = walletPhoneNumber;
        this.walletBalance = walletBalance;
        this.network = network;
        this.address = address;
        this.countryOfNationality = countryOfNationality;
        this.authorizedRepresentative = authorizedRepresentative;
        this.dateOfBirth = dateOfBirth;
        this.transactionHash = transactionHash;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Wallet type if there are various types of wallets belonging to the same user. E.g. Checking, savings, vault, different currency wallets etc.
     */
    @JsonProperty("walletType")
    public Optional<String> getWalletType() {
        return walletType;
    }

    /**
     * @return Unique ID of the wallet
     */
    @JsonProperty("walletId")
    public Optional<String> getWalletId() {
        return walletId;
    }

    /**
     * @return Payment Channel used through wallet
     */
    @JsonProperty("paymentChannel")
    public Optional<String> getPaymentChannel() {
        return paymentChannel;
    }

    /**
     * @return Name of the account holder for a specific wallet
     */
    @JsonProperty("name")
    public Optional<String> getName() {
        return name;
    }

    @JsonProperty("emailId")
    public Optional<String> getEmailId() {
        return emailId;
    }

    /**
     * @return Additional information that can be added via tags
     */
    @JsonProperty("tags")
    public Optional<List<Tag>> getTags() {
        return tags;
    }

    /**
     * @return Phone number associated with the wallet, if any
     */
    @JsonProperty("walletPhoneNumber")
    public Optional<String> getWalletPhoneNumber() {
        return walletPhoneNumber;
    }

    @JsonProperty("walletBalance")
    public Optional<Amount> getWalletBalance() {
        return walletBalance;
    }

    @JsonProperty("network")
    public Optional<WalletNetwork> getNetwork() {
        return network;
    }

    @JsonProperty("address")
    public Optional<Address> getAddress() {
        return address;
    }

    @JsonProperty("countryOfNationality")
    public Optional<CountryCode> getCountryOfNationality() {
        return countryOfNationality;
    }

    @JsonProperty("authorizedRepresentative")
    public Optional<List<UserDetails>> getAuthorizedRepresentative() {
        return authorizedRepresentative;
    }

    /**
     * @return Date of birth of the account holder (YYYY-MM-DD)
     */
    @JsonProperty("dateOfBirth")
    public Optional<String> getDateOfBirth() {
        return dateOfBirth;
    }

    /**
     * @return A hash is a cryptographic fingerprint that uniquely identifies a blockchain transaction on the network, whereas a transactionId is just an internal reference used by a wallet or platform to track the transaction in its own system.
     */
    @JsonProperty("transactionHash")
    public Optional<String> getTransactionHash() {
        return transactionHash;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof WalletDetails && equalTo((WalletDetails) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(WalletDetails other) {
        return walletType.equals(other.walletType)
                && walletId.equals(other.walletId)
                && paymentChannel.equals(other.paymentChannel)
                && name.equals(other.name)
                && emailId.equals(other.emailId)
                && tags.equals(other.tags)
                && walletPhoneNumber.equals(other.walletPhoneNumber)
                && walletBalance.equals(other.walletBalance)
                && network.equals(other.network)
                && address.equals(other.address)
                && countryOfNationality.equals(other.countryOfNationality)
                && authorizedRepresentative.equals(other.authorizedRepresentative)
                && dateOfBirth.equals(other.dateOfBirth)
                && transactionHash.equals(other.transactionHash);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.walletType,
                this.walletId,
                this.paymentChannel,
                this.name,
                this.emailId,
                this.tags,
                this.walletPhoneNumber,
                this.walletBalance,
                this.network,
                this.address,
                this.countryOfNationality,
                this.authorizedRepresentative,
                this.dateOfBirth,
                this.transactionHash);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> walletType = Optional.empty();

        private Optional<String> walletId = Optional.empty();

        private Optional<String> paymentChannel = Optional.empty();

        private Optional<String> name = Optional.empty();

        private Optional<String> emailId = Optional.empty();

        private Optional<List<Tag>> tags = Optional.empty();

        private Optional<String> walletPhoneNumber = Optional.empty();

        private Optional<Amount> walletBalance = Optional.empty();

        private Optional<WalletNetwork> network = Optional.empty();

        private Optional<Address> address = Optional.empty();

        private Optional<CountryCode> countryOfNationality = Optional.empty();

        private Optional<List<UserDetails>> authorizedRepresentative = Optional.empty();

        private Optional<String> dateOfBirth = Optional.empty();

        private Optional<String> transactionHash = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(WalletDetails other) {
            walletType(other.getWalletType());
            walletId(other.getWalletId());
            paymentChannel(other.getPaymentChannel());
            name(other.getName());
            emailId(other.getEmailId());
            tags(other.getTags());
            walletPhoneNumber(other.getWalletPhoneNumber());
            walletBalance(other.getWalletBalance());
            network(other.getNetwork());
            address(other.getAddress());
            countryOfNationality(other.getCountryOfNationality());
            authorizedRepresentative(other.getAuthorizedRepresentative());
            dateOfBirth(other.getDateOfBirth());
            transactionHash(other.getTransactionHash());
            return this;
        }

        @JsonSetter(value = "walletType", nulls = Nulls.SKIP)
        public Builder walletType(Optional<String> walletType) {
            this.walletType = walletType;
            return this;
        }

        public Builder walletType(String walletType) {
            this.walletType = Optional.ofNullable(walletType);
            return this;
        }

        @JsonSetter(value = "walletId", nulls = Nulls.SKIP)
        public Builder walletId(Optional<String> walletId) {
            this.walletId = walletId;
            return this;
        }

        public Builder walletId(String walletId) {
            this.walletId = Optional.ofNullable(walletId);
            return this;
        }

        @JsonSetter(value = "paymentChannel", nulls = Nulls.SKIP)
        public Builder paymentChannel(Optional<String> paymentChannel) {
            this.paymentChannel = paymentChannel;
            return this;
        }

        public Builder paymentChannel(String paymentChannel) {
            this.paymentChannel = Optional.ofNullable(paymentChannel);
            return this;
        }

        @JsonSetter(value = "name", nulls = Nulls.SKIP)
        public Builder name(Optional<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(String name) {
            this.name = Optional.ofNullable(name);
            return this;
        }

        @JsonSetter(value = "emailId", nulls = Nulls.SKIP)
        public Builder emailId(Optional<String> emailId) {
            this.emailId = emailId;
            return this;
        }

        public Builder emailId(String emailId) {
            this.emailId = Optional.ofNullable(emailId);
            return this;
        }

        @JsonSetter(value = "tags", nulls = Nulls.SKIP)
        public Builder tags(Optional<List<Tag>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder tags(List<Tag> tags) {
            this.tags = Optional.ofNullable(tags);
            return this;
        }

        @JsonSetter(value = "walletPhoneNumber", nulls = Nulls.SKIP)
        public Builder walletPhoneNumber(Optional<String> walletPhoneNumber) {
            this.walletPhoneNumber = walletPhoneNumber;
            return this;
        }

        public Builder walletPhoneNumber(String walletPhoneNumber) {
            this.walletPhoneNumber = Optional.ofNullable(walletPhoneNumber);
            return this;
        }

        @JsonSetter(value = "walletBalance", nulls = Nulls.SKIP)
        public Builder walletBalance(Optional<Amount> walletBalance) {
            this.walletBalance = walletBalance;
            return this;
        }

        public Builder walletBalance(Amount walletBalance) {
            this.walletBalance = Optional.ofNullable(walletBalance);
            return this;
        }

        @JsonSetter(value = "network", nulls = Nulls.SKIP)
        public Builder network(Optional<WalletNetwork> network) {
            this.network = network;
            return this;
        }

        public Builder network(WalletNetwork network) {
            this.network = Optional.ofNullable(network);
            return this;
        }

        @JsonSetter(value = "address", nulls = Nulls.SKIP)
        public Builder address(Optional<Address> address) {
            this.address = address;
            return this;
        }

        public Builder address(Address address) {
            this.address = Optional.ofNullable(address);
            return this;
        }

        @JsonSetter(value = "countryOfNationality", nulls = Nulls.SKIP)
        public Builder countryOfNationality(Optional<CountryCode> countryOfNationality) {
            this.countryOfNationality = countryOfNationality;
            return this;
        }

        public Builder countryOfNationality(CountryCode countryOfNationality) {
            this.countryOfNationality = Optional.ofNullable(countryOfNationality);
            return this;
        }

        @JsonSetter(value = "authorizedRepresentative", nulls = Nulls.SKIP)
        public Builder authorizedRepresentative(Optional<List<UserDetails>> authorizedRepresentative) {
            this.authorizedRepresentative = authorizedRepresentative;
            return this;
        }

        public Builder authorizedRepresentative(List<UserDetails> authorizedRepresentative) {
            this.authorizedRepresentative = Optional.ofNullable(authorizedRepresentative);
            return this;
        }

        @JsonSetter(value = "dateOfBirth", nulls = Nulls.SKIP)
        public Builder dateOfBirth(Optional<String> dateOfBirth) {
            this.dateOfBirth = dateOfBirth;
            return this;
        }

        public Builder dateOfBirth(String dateOfBirth) {
            this.dateOfBirth = Optional.ofNullable(dateOfBirth);
            return this;
        }

        @JsonSetter(value = "transactionHash", nulls = Nulls.SKIP)
        public Builder transactionHash(Optional<String> transactionHash) {
            this.transactionHash = transactionHash;
            return this;
        }

        public Builder transactionHash(String transactionHash) {
            this.transactionHash = Optional.ofNullable(transactionHash);
            return this;
        }

        public WalletDetails build() {
            return new WalletDetails(
                    walletType,
                    walletId,
                    paymentChannel,
                    name,
                    emailId,
                    tags,
                    walletPhoneNumber,
                    walletBalance,
                    network,
                    address,
                    countryOfNationality,
                    authorizedRepresentative,
                    dateOfBirth,
                    transactionHash,
                    additionalProperties);
        }
    }
}
