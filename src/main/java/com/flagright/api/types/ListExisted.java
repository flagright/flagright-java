/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flagright.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.flagright.api.core.ObjectMappers;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ListExisted.Builder.class)
public final class ListExisted {
    private final String listId;

    private final ListHeader header;

    private final List<ListItem> items;

    private final Map<String, Object> additionalProperties;

    private ListExisted(
            String listId, ListHeader header, List<ListItem> items, Map<String, Object> additionalProperties) {
        this.listId = listId;
        this.header = header;
        this.items = items;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("listId")
    public String getListId() {
        return listId;
    }

    @JsonProperty("header")
    public ListHeader getHeader() {
        return header;
    }

    /**
     * @return List items
     */
    @JsonProperty("items")
    public List<ListItem> getItems() {
        return items;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ListExisted && equalTo((ListExisted) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ListExisted other) {
        return listId.equals(other.listId) && header.equals(other.header) && items.equals(other.items);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.listId, this.header, this.items);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static ListIdStage builder() {
        return new Builder();
    }

    public interface ListIdStage {
        HeaderStage listId(@NotNull String listId);

        Builder from(ListExisted other);
    }

    public interface HeaderStage {
        _FinalStage header(@NotNull ListHeader header);
    }

    public interface _FinalStage {
        ListExisted build();

        _FinalStage items(List<ListItem> items);

        _FinalStage addItems(ListItem items);

        _FinalStage addAllItems(List<ListItem> items);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements ListIdStage, HeaderStage, _FinalStage {
        private String listId;

        private ListHeader header;

        private List<ListItem> items = new ArrayList<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(ListExisted other) {
            listId(other.getListId());
            header(other.getHeader());
            items(other.getItems());
            return this;
        }

        @java.lang.Override
        @JsonSetter("listId")
        public HeaderStage listId(@NotNull String listId) {
            this.listId = Objects.requireNonNull(listId, "listId must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("header")
        public _FinalStage header(@NotNull ListHeader header) {
            this.header = Objects.requireNonNull(header, "header must not be null");
            return this;
        }

        /**
         * <p>List items</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage addAllItems(List<ListItem> items) {
            this.items.addAll(items);
            return this;
        }

        /**
         * <p>List items</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage addItems(ListItem items) {
            this.items.add(items);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "items", nulls = Nulls.SKIP)
        public _FinalStage items(List<ListItem> items) {
            this.items.clear();
            this.items.addAll(items);
            return this;
        }

        @java.lang.Override
        public ListExisted build() {
            return new ListExisted(listId, header, items, additionalProperties);
        }
    }
}
