/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flagright.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.flagright.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = Business.Builder.class)
public final class Business {
    private final String userId;

    private final double createdTimestamp;

    private final LegalEntity legalEntity;

    private final Optional<Double> activatedTimestamp;

    private final Optional<UserStateDetails> userStateDetails;

    private final Optional<KycStatusDetails> kycStatusDetails;

    private final Optional<List<Person>> shareHolders;

    private final Optional<List<Person>> directors;

    private final Optional<TransactionLimits> transactionLimits;

    private final Optional<RiskLevel> riskLevel;

    private final Optional<RiskLevel> kycRiskLevel;

    private final Optional<List<PaymentMethod>> allowedPaymentMethods;

    private final Optional<Double> lastTransactionTimestamp;

    private final Optional<UserEntityLink> linkedEntities;

    private final Optional<AcquisitionChannel> acquisitionChannel;

    private final Optional<List<BusinessSavedPaymentDetailsItem>> savedPaymentDetails;

    private final Optional<MccDetails> mccDetails;

    private final Optional<List<UserTag>> tags;

    private final Optional<List<PersonAttachment>> attachments;

    private final Optional<Double> updateCount;

    private final Map<String, Object> additionalProperties;

    private Business(
            String userId,
            double createdTimestamp,
            LegalEntity legalEntity,
            Optional<Double> activatedTimestamp,
            Optional<UserStateDetails> userStateDetails,
            Optional<KycStatusDetails> kycStatusDetails,
            Optional<List<Person>> shareHolders,
            Optional<List<Person>> directors,
            Optional<TransactionLimits> transactionLimits,
            Optional<RiskLevel> riskLevel,
            Optional<RiskLevel> kycRiskLevel,
            Optional<List<PaymentMethod>> allowedPaymentMethods,
            Optional<Double> lastTransactionTimestamp,
            Optional<UserEntityLink> linkedEntities,
            Optional<AcquisitionChannel> acquisitionChannel,
            Optional<List<BusinessSavedPaymentDetailsItem>> savedPaymentDetails,
            Optional<MccDetails> mccDetails,
            Optional<List<UserTag>> tags,
            Optional<List<PersonAttachment>> attachments,
            Optional<Double> updateCount,
            Map<String, Object> additionalProperties) {
        this.userId = userId;
        this.createdTimestamp = createdTimestamp;
        this.legalEntity = legalEntity;
        this.activatedTimestamp = activatedTimestamp;
        this.userStateDetails = userStateDetails;
        this.kycStatusDetails = kycStatusDetails;
        this.shareHolders = shareHolders;
        this.directors = directors;
        this.transactionLimits = transactionLimits;
        this.riskLevel = riskLevel;
        this.kycRiskLevel = kycRiskLevel;
        this.allowedPaymentMethods = allowedPaymentMethods;
        this.lastTransactionTimestamp = lastTransactionTimestamp;
        this.linkedEntities = linkedEntities;
        this.acquisitionChannel = acquisitionChannel;
        this.savedPaymentDetails = savedPaymentDetails;
        this.mccDetails = mccDetails;
        this.tags = tags;
        this.attachments = attachments;
        this.updateCount = updateCount;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Unique user ID for the user
     */
    @JsonProperty("userId")
    public String getUserId() {
        return userId;
    }

    /**
     * @return Timestamp when the user was created
     */
    @JsonProperty("createdTimestamp")
    public double getCreatedTimestamp() {
        return createdTimestamp;
    }

    @JsonProperty("legalEntity")
    public LegalEntity getLegalEntity() {
        return legalEntity;
    }

    /**
     * @return Timestamp when the user was activated
     */
    @JsonProperty("activatedTimestamp")
    public Optional<Double> getActivatedTimestamp() {
        return activatedTimestamp;
    }

    @JsonProperty("userStateDetails")
    public Optional<UserStateDetails> getUserStateDetails() {
        return userStateDetails;
    }

    @JsonProperty("kycStatusDetails")
    public Optional<KycStatusDetails> getKycStatusDetails() {
        return kycStatusDetails;
    }

    /**
     * @return Shareholders (beneficiaries) of the company that hold at least 25% ownership. Can be another company or an individual
     */
    @JsonProperty("shareHolders")
    public Optional<List<Person>> getShareHolders() {
        return shareHolders;
    }

    /**
     * @return Director(s) of the company. Must be at least one
     */
    @JsonProperty("directors")
    public Optional<List<Person>> getDirectors() {
        return directors;
    }

    @JsonProperty("transactionLimits")
    public Optional<TransactionLimits> getTransactionLimits() {
        return transactionLimits;
    }

    @JsonProperty("riskLevel")
    public Optional<RiskLevel> getRiskLevel() {
        return riskLevel;
    }

    @JsonProperty("kycRiskLevel")
    public Optional<RiskLevel> getKycRiskLevel() {
        return kycRiskLevel;
    }

    @JsonProperty("allowedPaymentMethods")
    public Optional<List<PaymentMethod>> getAllowedPaymentMethods() {
        return allowedPaymentMethods;
    }

    /**
     * @return Timestamp of the last successful transaction of the user
     */
    @JsonProperty("lastTransactionTimestamp")
    public Optional<Double> getLastTransactionTimestamp() {
        return lastTransactionTimestamp;
    }

    @JsonProperty("linkedEntities")
    public Optional<UserEntityLink> getLinkedEntities() {
        return linkedEntities;
    }

    @JsonProperty("acquisitionChannel")
    public Optional<AcquisitionChannel> getAcquisitionChannel() {
        return acquisitionChannel;
    }

    @JsonProperty("savedPaymentDetails")
    public Optional<List<BusinessSavedPaymentDetailsItem>> getSavedPaymentDetails() {
        return savedPaymentDetails;
    }

    @JsonProperty("mccDetails")
    public Optional<MccDetails> getMccDetails() {
        return mccDetails;
    }

    /**
     * @return Additional information that can be added via tags
     */
    @JsonProperty("tags")
    public Optional<List<UserTag>> getTags() {
        return tags;
    }

    /**
     * @return User's attachments uploaded by business user
     */
    @JsonProperty("attachments")
    public Optional<List<PersonAttachment>> getAttachments() {
        return attachments;
    }

    @JsonProperty("updateCount")
    public Optional<Double> getUpdateCount() {
        return updateCount;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Business && equalTo((Business) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Business other) {
        return userId.equals(other.userId)
                && createdTimestamp == other.createdTimestamp
                && legalEntity.equals(other.legalEntity)
                && activatedTimestamp.equals(other.activatedTimestamp)
                && userStateDetails.equals(other.userStateDetails)
                && kycStatusDetails.equals(other.kycStatusDetails)
                && shareHolders.equals(other.shareHolders)
                && directors.equals(other.directors)
                && transactionLimits.equals(other.transactionLimits)
                && riskLevel.equals(other.riskLevel)
                && kycRiskLevel.equals(other.kycRiskLevel)
                && allowedPaymentMethods.equals(other.allowedPaymentMethods)
                && lastTransactionTimestamp.equals(other.lastTransactionTimestamp)
                && linkedEntities.equals(other.linkedEntities)
                && acquisitionChannel.equals(other.acquisitionChannel)
                && savedPaymentDetails.equals(other.savedPaymentDetails)
                && mccDetails.equals(other.mccDetails)
                && tags.equals(other.tags)
                && attachments.equals(other.attachments)
                && updateCount.equals(other.updateCount);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.userId,
                this.createdTimestamp,
                this.legalEntity,
                this.activatedTimestamp,
                this.userStateDetails,
                this.kycStatusDetails,
                this.shareHolders,
                this.directors,
                this.transactionLimits,
                this.riskLevel,
                this.kycRiskLevel,
                this.allowedPaymentMethods,
                this.lastTransactionTimestamp,
                this.linkedEntities,
                this.acquisitionChannel,
                this.savedPaymentDetails,
                this.mccDetails,
                this.tags,
                this.attachments,
                this.updateCount);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static UserIdStage builder() {
        return new Builder();
    }

    public interface UserIdStage {
        CreatedTimestampStage userId(@NotNull String userId);

        Builder from(Business other);
    }

    public interface CreatedTimestampStage {
        LegalEntityStage createdTimestamp(double createdTimestamp);
    }

    public interface LegalEntityStage {
        _FinalStage legalEntity(@NotNull LegalEntity legalEntity);
    }

    public interface _FinalStage {
        Business build();

        _FinalStage activatedTimestamp(Optional<Double> activatedTimestamp);

        _FinalStage activatedTimestamp(Double activatedTimestamp);

        _FinalStage userStateDetails(Optional<UserStateDetails> userStateDetails);

        _FinalStage userStateDetails(UserStateDetails userStateDetails);

        _FinalStage kycStatusDetails(Optional<KycStatusDetails> kycStatusDetails);

        _FinalStage kycStatusDetails(KycStatusDetails kycStatusDetails);

        _FinalStage shareHolders(Optional<List<Person>> shareHolders);

        _FinalStage shareHolders(List<Person> shareHolders);

        _FinalStage directors(Optional<List<Person>> directors);

        _FinalStage directors(List<Person> directors);

        _FinalStage transactionLimits(Optional<TransactionLimits> transactionLimits);

        _FinalStage transactionLimits(TransactionLimits transactionLimits);

        _FinalStage riskLevel(Optional<RiskLevel> riskLevel);

        _FinalStage riskLevel(RiskLevel riskLevel);

        _FinalStage kycRiskLevel(Optional<RiskLevel> kycRiskLevel);

        _FinalStage kycRiskLevel(RiskLevel kycRiskLevel);

        _FinalStage allowedPaymentMethods(Optional<List<PaymentMethod>> allowedPaymentMethods);

        _FinalStage allowedPaymentMethods(List<PaymentMethod> allowedPaymentMethods);

        _FinalStage lastTransactionTimestamp(Optional<Double> lastTransactionTimestamp);

        _FinalStage lastTransactionTimestamp(Double lastTransactionTimestamp);

        _FinalStage linkedEntities(Optional<UserEntityLink> linkedEntities);

        _FinalStage linkedEntities(UserEntityLink linkedEntities);

        _FinalStage acquisitionChannel(Optional<AcquisitionChannel> acquisitionChannel);

        _FinalStage acquisitionChannel(AcquisitionChannel acquisitionChannel);

        _FinalStage savedPaymentDetails(Optional<List<BusinessSavedPaymentDetailsItem>> savedPaymentDetails);

        _FinalStage savedPaymentDetails(List<BusinessSavedPaymentDetailsItem> savedPaymentDetails);

        _FinalStage mccDetails(Optional<MccDetails> mccDetails);

        _FinalStage mccDetails(MccDetails mccDetails);

        _FinalStage tags(Optional<List<UserTag>> tags);

        _FinalStage tags(List<UserTag> tags);

        _FinalStage attachments(Optional<List<PersonAttachment>> attachments);

        _FinalStage attachments(List<PersonAttachment> attachments);

        _FinalStage updateCount(Optional<Double> updateCount);

        _FinalStage updateCount(Double updateCount);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements UserIdStage, CreatedTimestampStage, LegalEntityStage, _FinalStage {
        private String userId;

        private double createdTimestamp;

        private LegalEntity legalEntity;

        private Optional<Double> updateCount = Optional.empty();

        private Optional<List<PersonAttachment>> attachments = Optional.empty();

        private Optional<List<UserTag>> tags = Optional.empty();

        private Optional<MccDetails> mccDetails = Optional.empty();

        private Optional<List<BusinessSavedPaymentDetailsItem>> savedPaymentDetails = Optional.empty();

        private Optional<AcquisitionChannel> acquisitionChannel = Optional.empty();

        private Optional<UserEntityLink> linkedEntities = Optional.empty();

        private Optional<Double> lastTransactionTimestamp = Optional.empty();

        private Optional<List<PaymentMethod>> allowedPaymentMethods = Optional.empty();

        private Optional<RiskLevel> kycRiskLevel = Optional.empty();

        private Optional<RiskLevel> riskLevel = Optional.empty();

        private Optional<TransactionLimits> transactionLimits = Optional.empty();

        private Optional<List<Person>> directors = Optional.empty();

        private Optional<List<Person>> shareHolders = Optional.empty();

        private Optional<KycStatusDetails> kycStatusDetails = Optional.empty();

        private Optional<UserStateDetails> userStateDetails = Optional.empty();

        private Optional<Double> activatedTimestamp = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(Business other) {
            userId(other.getUserId());
            createdTimestamp(other.getCreatedTimestamp());
            legalEntity(other.getLegalEntity());
            activatedTimestamp(other.getActivatedTimestamp());
            userStateDetails(other.getUserStateDetails());
            kycStatusDetails(other.getKycStatusDetails());
            shareHolders(other.getShareHolders());
            directors(other.getDirectors());
            transactionLimits(other.getTransactionLimits());
            riskLevel(other.getRiskLevel());
            kycRiskLevel(other.getKycRiskLevel());
            allowedPaymentMethods(other.getAllowedPaymentMethods());
            lastTransactionTimestamp(other.getLastTransactionTimestamp());
            linkedEntities(other.getLinkedEntities());
            acquisitionChannel(other.getAcquisitionChannel());
            savedPaymentDetails(other.getSavedPaymentDetails());
            mccDetails(other.getMccDetails());
            tags(other.getTags());
            attachments(other.getAttachments());
            updateCount(other.getUpdateCount());
            return this;
        }

        /**
         * <p>Unique user ID for the user</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("userId")
        public CreatedTimestampStage userId(@NotNull String userId) {
            this.userId = Objects.requireNonNull(userId, "userId must not be null");
            return this;
        }

        /**
         * <p>Timestamp when the user was created</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("createdTimestamp")
        public LegalEntityStage createdTimestamp(double createdTimestamp) {
            this.createdTimestamp = createdTimestamp;
            return this;
        }

        @java.lang.Override
        @JsonSetter("legalEntity")
        public _FinalStage legalEntity(@NotNull LegalEntity legalEntity) {
            this.legalEntity = Objects.requireNonNull(legalEntity, "legalEntity must not be null");
            return this;
        }

        @java.lang.Override
        public _FinalStage updateCount(Double updateCount) {
            this.updateCount = Optional.ofNullable(updateCount);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "updateCount", nulls = Nulls.SKIP)
        public _FinalStage updateCount(Optional<Double> updateCount) {
            this.updateCount = updateCount;
            return this;
        }

        /**
         * <p>User's attachments uploaded by business user</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage attachments(List<PersonAttachment> attachments) {
            this.attachments = Optional.ofNullable(attachments);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "attachments", nulls = Nulls.SKIP)
        public _FinalStage attachments(Optional<List<PersonAttachment>> attachments) {
            this.attachments = attachments;
            return this;
        }

        /**
         * <p>Additional information that can be added via tags</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage tags(List<UserTag> tags) {
            this.tags = Optional.ofNullable(tags);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "tags", nulls = Nulls.SKIP)
        public _FinalStage tags(Optional<List<UserTag>> tags) {
            this.tags = tags;
            return this;
        }

        @java.lang.Override
        public _FinalStage mccDetails(MccDetails mccDetails) {
            this.mccDetails = Optional.ofNullable(mccDetails);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "mccDetails", nulls = Nulls.SKIP)
        public _FinalStage mccDetails(Optional<MccDetails> mccDetails) {
            this.mccDetails = mccDetails;
            return this;
        }

        @java.lang.Override
        public _FinalStage savedPaymentDetails(List<BusinessSavedPaymentDetailsItem> savedPaymentDetails) {
            this.savedPaymentDetails = Optional.ofNullable(savedPaymentDetails);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "savedPaymentDetails", nulls = Nulls.SKIP)
        public _FinalStage savedPaymentDetails(Optional<List<BusinessSavedPaymentDetailsItem>> savedPaymentDetails) {
            this.savedPaymentDetails = savedPaymentDetails;
            return this;
        }

        @java.lang.Override
        public _FinalStage acquisitionChannel(AcquisitionChannel acquisitionChannel) {
            this.acquisitionChannel = Optional.ofNullable(acquisitionChannel);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "acquisitionChannel", nulls = Nulls.SKIP)
        public _FinalStage acquisitionChannel(Optional<AcquisitionChannel> acquisitionChannel) {
            this.acquisitionChannel = acquisitionChannel;
            return this;
        }

        @java.lang.Override
        public _FinalStage linkedEntities(UserEntityLink linkedEntities) {
            this.linkedEntities = Optional.ofNullable(linkedEntities);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "linkedEntities", nulls = Nulls.SKIP)
        public _FinalStage linkedEntities(Optional<UserEntityLink> linkedEntities) {
            this.linkedEntities = linkedEntities;
            return this;
        }

        /**
         * <p>Timestamp of the last successful transaction of the user</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage lastTransactionTimestamp(Double lastTransactionTimestamp) {
            this.lastTransactionTimestamp = Optional.ofNullable(lastTransactionTimestamp);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "lastTransactionTimestamp", nulls = Nulls.SKIP)
        public _FinalStage lastTransactionTimestamp(Optional<Double> lastTransactionTimestamp) {
            this.lastTransactionTimestamp = lastTransactionTimestamp;
            return this;
        }

        @java.lang.Override
        public _FinalStage allowedPaymentMethods(List<PaymentMethod> allowedPaymentMethods) {
            this.allowedPaymentMethods = Optional.ofNullable(allowedPaymentMethods);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "allowedPaymentMethods", nulls = Nulls.SKIP)
        public _FinalStage allowedPaymentMethods(Optional<List<PaymentMethod>> allowedPaymentMethods) {
            this.allowedPaymentMethods = allowedPaymentMethods;
            return this;
        }

        @java.lang.Override
        public _FinalStage kycRiskLevel(RiskLevel kycRiskLevel) {
            this.kycRiskLevel = Optional.ofNullable(kycRiskLevel);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "kycRiskLevel", nulls = Nulls.SKIP)
        public _FinalStage kycRiskLevel(Optional<RiskLevel> kycRiskLevel) {
            this.kycRiskLevel = kycRiskLevel;
            return this;
        }

        @java.lang.Override
        public _FinalStage riskLevel(RiskLevel riskLevel) {
            this.riskLevel = Optional.ofNullable(riskLevel);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "riskLevel", nulls = Nulls.SKIP)
        public _FinalStage riskLevel(Optional<RiskLevel> riskLevel) {
            this.riskLevel = riskLevel;
            return this;
        }

        @java.lang.Override
        public _FinalStage transactionLimits(TransactionLimits transactionLimits) {
            this.transactionLimits = Optional.ofNullable(transactionLimits);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "transactionLimits", nulls = Nulls.SKIP)
        public _FinalStage transactionLimits(Optional<TransactionLimits> transactionLimits) {
            this.transactionLimits = transactionLimits;
            return this;
        }

        /**
         * <p>Director(s) of the company. Must be at least one</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage directors(List<Person> directors) {
            this.directors = Optional.ofNullable(directors);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "directors", nulls = Nulls.SKIP)
        public _FinalStage directors(Optional<List<Person>> directors) {
            this.directors = directors;
            return this;
        }

        /**
         * <p>Shareholders (beneficiaries) of the company that hold at least 25% ownership. Can be another company or an individual</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage shareHolders(List<Person> shareHolders) {
            this.shareHolders = Optional.ofNullable(shareHolders);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "shareHolders", nulls = Nulls.SKIP)
        public _FinalStage shareHolders(Optional<List<Person>> shareHolders) {
            this.shareHolders = shareHolders;
            return this;
        }

        @java.lang.Override
        public _FinalStage kycStatusDetails(KycStatusDetails kycStatusDetails) {
            this.kycStatusDetails = Optional.ofNullable(kycStatusDetails);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "kycStatusDetails", nulls = Nulls.SKIP)
        public _FinalStage kycStatusDetails(Optional<KycStatusDetails> kycStatusDetails) {
            this.kycStatusDetails = kycStatusDetails;
            return this;
        }

        @java.lang.Override
        public _FinalStage userStateDetails(UserStateDetails userStateDetails) {
            this.userStateDetails = Optional.ofNullable(userStateDetails);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "userStateDetails", nulls = Nulls.SKIP)
        public _FinalStage userStateDetails(Optional<UserStateDetails> userStateDetails) {
            this.userStateDetails = userStateDetails;
            return this;
        }

        /**
         * <p>Timestamp when the user was activated</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage activatedTimestamp(Double activatedTimestamp) {
            this.activatedTimestamp = Optional.ofNullable(activatedTimestamp);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "activatedTimestamp", nulls = Nulls.SKIP)
        public _FinalStage activatedTimestamp(Optional<Double> activatedTimestamp) {
            this.activatedTimestamp = activatedTimestamp;
            return this;
        }

        @java.lang.Override
        public Business build() {
            return new Business(
                    userId,
                    createdTimestamp,
                    legalEntity,
                    activatedTimestamp,
                    userStateDetails,
                    kycStatusDetails,
                    shareHolders,
                    directors,
                    transactionLimits,
                    riskLevel,
                    kycRiskLevel,
                    allowedPaymentMethods,
                    lastTransactionTimestamp,
                    linkedEntities,
                    acquisitionChannel,
                    savedPaymentDetails,
                    mccDetails,
                    tags,
                    attachments,
                    updateCount,
                    additionalProperties);
        }
    }
}
