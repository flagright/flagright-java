/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flagright.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.flagright.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = RuleFailureException.Builder.class)
public final class RuleFailureException {
    private final String exceptionName;

    private final String exceptionDescription;

    private final Map<String, Object> additionalProperties;

    private RuleFailureException(
            String exceptionName, String exceptionDescription, Map<String, Object> additionalProperties) {
        this.exceptionName = exceptionName;
        this.exceptionDescription = exceptionDescription;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Unique rule identifier
     */
    @JsonProperty("exceptionName")
    public String getExceptionName() {
        return exceptionName;
    }

    /**
     * @return Name of the rule
     */
    @JsonProperty("exceptionDescription")
    public String getExceptionDescription() {
        return exceptionDescription;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof RuleFailureException && equalTo((RuleFailureException) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(RuleFailureException other) {
        return exceptionName.equals(other.exceptionName) && exceptionDescription.equals(other.exceptionDescription);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.exceptionName, this.exceptionDescription);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static ExceptionNameStage builder() {
        return new Builder();
    }

    public interface ExceptionNameStage {
        ExceptionDescriptionStage exceptionName(@NotNull String exceptionName);

        Builder from(RuleFailureException other);
    }

    public interface ExceptionDescriptionStage {
        _FinalStage exceptionDescription(@NotNull String exceptionDescription);
    }

    public interface _FinalStage {
        RuleFailureException build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements ExceptionNameStage, ExceptionDescriptionStage, _FinalStage {
        private String exceptionName;

        private String exceptionDescription;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(RuleFailureException other) {
            exceptionName(other.getExceptionName());
            exceptionDescription(other.getExceptionDescription());
            return this;
        }

        /**
         * <p>Unique rule identifier</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("exceptionName")
        public ExceptionDescriptionStage exceptionName(@NotNull String exceptionName) {
            this.exceptionName = Objects.requireNonNull(exceptionName, "exceptionName must not be null");
            return this;
        }

        /**
         * <p>Name of the rule</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("exceptionDescription")
        public _FinalStage exceptionDescription(@NotNull String exceptionDescription) {
            this.exceptionDescription =
                    Objects.requireNonNull(exceptionDescription, "exceptionDescription must not be null");
            return this;
        }

        @java.lang.Override
        public RuleFailureException build() {
            return new RuleFailureException(exceptionName, exceptionDescription, additionalProperties);
        }
    }
}
