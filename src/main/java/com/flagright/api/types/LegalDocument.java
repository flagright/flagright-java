/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flagright.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.flagright.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = LegalDocument.Builder.class)
public final class LegalDocument {
    private final String documentType;

    private final String documentNumber;

    private final Optional<Double> documentIssuedDate;

    private final Optional<Double> documentExpirationDate;

    private final CountryCode documentIssuedCountry;

    private final Optional<List<Tag>> tags;

    private final Optional<ConsumerName> nameOnDocument;

    private final Map<String, Object> additionalProperties;

    private LegalDocument(
            String documentType,
            String documentNumber,
            Optional<Double> documentIssuedDate,
            Optional<Double> documentExpirationDate,
            CountryCode documentIssuedCountry,
            Optional<List<Tag>> tags,
            Optional<ConsumerName> nameOnDocument,
            Map<String, Object> additionalProperties) {
        this.documentType = documentType;
        this.documentNumber = documentNumber;
        this.documentIssuedDate = documentIssuedDate;
        this.documentExpirationDate = documentExpirationDate;
        this.documentIssuedCountry = documentIssuedCountry;
        this.tags = tags;
        this.nameOnDocument = nameOnDocument;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return User's identity document type such as passport, national ID etc.
     */
    @JsonProperty("documentType")
    public String getDocumentType() {
        return documentType;
    }

    /**
     * @return User's unique identity document number such as passport number
     */
    @JsonProperty("documentNumber")
    public String getDocumentNumber() {
        return documentNumber;
    }

    /**
     * @return User's identity document issuance date (UNIX timestamp in milliseconds)
     */
    @JsonProperty("documentIssuedDate")
    public Optional<Double> getDocumentIssuedDate() {
        return documentIssuedDate;
    }

    /**
     * @return User's identity document expiration date (UNIX timestamp in milliseconds)
     */
    @JsonProperty("documentExpirationDate")
    public Optional<Double> getDocumentExpirationDate() {
        return documentExpirationDate;
    }

    @JsonProperty("documentIssuedCountry")
    public CountryCode getDocumentIssuedCountry() {
        return documentIssuedCountry;
    }

    /**
     * @return Additional information that can be added via tags
     */
    @JsonProperty("tags")
    public Optional<List<Tag>> getTags() {
        return tags;
    }

    @JsonProperty("nameOnDocument")
    public Optional<ConsumerName> getNameOnDocument() {
        return nameOnDocument;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof LegalDocument && equalTo((LegalDocument) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(LegalDocument other) {
        return documentType.equals(other.documentType)
                && documentNumber.equals(other.documentNumber)
                && documentIssuedDate.equals(other.documentIssuedDate)
                && documentExpirationDate.equals(other.documentExpirationDate)
                && documentIssuedCountry.equals(other.documentIssuedCountry)
                && tags.equals(other.tags)
                && nameOnDocument.equals(other.nameOnDocument);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.documentType,
                this.documentNumber,
                this.documentIssuedDate,
                this.documentExpirationDate,
                this.documentIssuedCountry,
                this.tags,
                this.nameOnDocument);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static DocumentTypeStage builder() {
        return new Builder();
    }

    public interface DocumentTypeStage {
        DocumentNumberStage documentType(@NotNull String documentType);

        Builder from(LegalDocument other);
    }

    public interface DocumentNumberStage {
        DocumentIssuedCountryStage documentNumber(@NotNull String documentNumber);
    }

    public interface DocumentIssuedCountryStage {
        _FinalStage documentIssuedCountry(@NotNull CountryCode documentIssuedCountry);
    }

    public interface _FinalStage {
        LegalDocument build();

        _FinalStage documentIssuedDate(Optional<Double> documentIssuedDate);

        _FinalStage documentIssuedDate(Double documentIssuedDate);

        _FinalStage documentExpirationDate(Optional<Double> documentExpirationDate);

        _FinalStage documentExpirationDate(Double documentExpirationDate);

        _FinalStage tags(Optional<List<Tag>> tags);

        _FinalStage tags(List<Tag> tags);

        _FinalStage nameOnDocument(Optional<ConsumerName> nameOnDocument);

        _FinalStage nameOnDocument(ConsumerName nameOnDocument);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements DocumentTypeStage, DocumentNumberStage, DocumentIssuedCountryStage, _FinalStage {
        private String documentType;

        private String documentNumber;

        private CountryCode documentIssuedCountry;

        private Optional<ConsumerName> nameOnDocument = Optional.empty();

        private Optional<List<Tag>> tags = Optional.empty();

        private Optional<Double> documentExpirationDate = Optional.empty();

        private Optional<Double> documentIssuedDate = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(LegalDocument other) {
            documentType(other.getDocumentType());
            documentNumber(other.getDocumentNumber());
            documentIssuedDate(other.getDocumentIssuedDate());
            documentExpirationDate(other.getDocumentExpirationDate());
            documentIssuedCountry(other.getDocumentIssuedCountry());
            tags(other.getTags());
            nameOnDocument(other.getNameOnDocument());
            return this;
        }

        /**
         * <p>User's identity document type such as passport, national ID etc.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("documentType")
        public DocumentNumberStage documentType(@NotNull String documentType) {
            this.documentType = Objects.requireNonNull(documentType, "documentType must not be null");
            return this;
        }

        /**
         * <p>User's unique identity document number such as passport number</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("documentNumber")
        public DocumentIssuedCountryStage documentNumber(@NotNull String documentNumber) {
            this.documentNumber = Objects.requireNonNull(documentNumber, "documentNumber must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("documentIssuedCountry")
        public _FinalStage documentIssuedCountry(@NotNull CountryCode documentIssuedCountry) {
            this.documentIssuedCountry =
                    Objects.requireNonNull(documentIssuedCountry, "documentIssuedCountry must not be null");
            return this;
        }

        @java.lang.Override
        public _FinalStage nameOnDocument(ConsumerName nameOnDocument) {
            this.nameOnDocument = Optional.ofNullable(nameOnDocument);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "nameOnDocument", nulls = Nulls.SKIP)
        public _FinalStage nameOnDocument(Optional<ConsumerName> nameOnDocument) {
            this.nameOnDocument = nameOnDocument;
            return this;
        }

        /**
         * <p>Additional information that can be added via tags</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage tags(List<Tag> tags) {
            this.tags = Optional.ofNullable(tags);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "tags", nulls = Nulls.SKIP)
        public _FinalStage tags(Optional<List<Tag>> tags) {
            this.tags = tags;
            return this;
        }

        /**
         * <p>User's identity document expiration date (UNIX timestamp in milliseconds)</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage documentExpirationDate(Double documentExpirationDate) {
            this.documentExpirationDate = Optional.ofNullable(documentExpirationDate);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "documentExpirationDate", nulls = Nulls.SKIP)
        public _FinalStage documentExpirationDate(Optional<Double> documentExpirationDate) {
            this.documentExpirationDate = documentExpirationDate;
            return this;
        }

        /**
         * <p>User's identity document issuance date (UNIX timestamp in milliseconds)</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage documentIssuedDate(Double documentIssuedDate) {
            this.documentIssuedDate = Optional.ofNullable(documentIssuedDate);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "documentIssuedDate", nulls = Nulls.SKIP)
        public _FinalStage documentIssuedDate(Optional<Double> documentIssuedDate) {
            this.documentIssuedDate = documentIssuedDate;
            return this;
        }

        @java.lang.Override
        public LegalDocument build() {
            return new LegalDocument(
                    documentType,
                    documentNumber,
                    documentIssuedDate,
                    documentExpirationDate,
                    documentIssuedCountry,
                    tags,
                    nameOnDocument,
                    additionalProperties);
        }
    }
}
