/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flagright.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.flagright.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ExpectedIncome.Builder.class)
public final class ExpectedIncome {
    private final Optional<Amount> dailyExpectedIncome;

    private final Optional<Amount> weeklyExpectedIncome;

    private final Optional<Amount> monthlyExpectedIncome;

    private final Optional<Amount> quarterlyExpectedIncome;

    private final Optional<Amount> yearlyExpectedIncome;

    private final Map<String, Object> additionalProperties;

    private ExpectedIncome(
            Optional<Amount> dailyExpectedIncome,
            Optional<Amount> weeklyExpectedIncome,
            Optional<Amount> monthlyExpectedIncome,
            Optional<Amount> quarterlyExpectedIncome,
            Optional<Amount> yearlyExpectedIncome,
            Map<String, Object> additionalProperties) {
        this.dailyExpectedIncome = dailyExpectedIncome;
        this.weeklyExpectedIncome = weeklyExpectedIncome;
        this.monthlyExpectedIncome = monthlyExpectedIncome;
        this.quarterlyExpectedIncome = quarterlyExpectedIncome;
        this.yearlyExpectedIncome = yearlyExpectedIncome;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("dailyExpectedIncome")
    public Optional<Amount> getDailyExpectedIncome() {
        return dailyExpectedIncome;
    }

    @JsonProperty("weeklyExpectedIncome")
    public Optional<Amount> getWeeklyExpectedIncome() {
        return weeklyExpectedIncome;
    }

    @JsonProperty("monthlyExpectedIncome")
    public Optional<Amount> getMonthlyExpectedIncome() {
        return monthlyExpectedIncome;
    }

    @JsonProperty("quarterlyExpectedIncome")
    public Optional<Amount> getQuarterlyExpectedIncome() {
        return quarterlyExpectedIncome;
    }

    @JsonProperty("yearlyExpectedIncome")
    public Optional<Amount> getYearlyExpectedIncome() {
        return yearlyExpectedIncome;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ExpectedIncome && equalTo((ExpectedIncome) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ExpectedIncome other) {
        return dailyExpectedIncome.equals(other.dailyExpectedIncome)
                && weeklyExpectedIncome.equals(other.weeklyExpectedIncome)
                && monthlyExpectedIncome.equals(other.monthlyExpectedIncome)
                && quarterlyExpectedIncome.equals(other.quarterlyExpectedIncome)
                && yearlyExpectedIncome.equals(other.yearlyExpectedIncome);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.dailyExpectedIncome,
                this.weeklyExpectedIncome,
                this.monthlyExpectedIncome,
                this.quarterlyExpectedIncome,
                this.yearlyExpectedIncome);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Amount> dailyExpectedIncome = Optional.empty();

        private Optional<Amount> weeklyExpectedIncome = Optional.empty();

        private Optional<Amount> monthlyExpectedIncome = Optional.empty();

        private Optional<Amount> quarterlyExpectedIncome = Optional.empty();

        private Optional<Amount> yearlyExpectedIncome = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ExpectedIncome other) {
            dailyExpectedIncome(other.getDailyExpectedIncome());
            weeklyExpectedIncome(other.getWeeklyExpectedIncome());
            monthlyExpectedIncome(other.getMonthlyExpectedIncome());
            quarterlyExpectedIncome(other.getQuarterlyExpectedIncome());
            yearlyExpectedIncome(other.getYearlyExpectedIncome());
            return this;
        }

        @JsonSetter(value = "dailyExpectedIncome", nulls = Nulls.SKIP)
        public Builder dailyExpectedIncome(Optional<Amount> dailyExpectedIncome) {
            this.dailyExpectedIncome = dailyExpectedIncome;
            return this;
        }

        public Builder dailyExpectedIncome(Amount dailyExpectedIncome) {
            this.dailyExpectedIncome = Optional.ofNullable(dailyExpectedIncome);
            return this;
        }

        @JsonSetter(value = "weeklyExpectedIncome", nulls = Nulls.SKIP)
        public Builder weeklyExpectedIncome(Optional<Amount> weeklyExpectedIncome) {
            this.weeklyExpectedIncome = weeklyExpectedIncome;
            return this;
        }

        public Builder weeklyExpectedIncome(Amount weeklyExpectedIncome) {
            this.weeklyExpectedIncome = Optional.ofNullable(weeklyExpectedIncome);
            return this;
        }

        @JsonSetter(value = "monthlyExpectedIncome", nulls = Nulls.SKIP)
        public Builder monthlyExpectedIncome(Optional<Amount> monthlyExpectedIncome) {
            this.monthlyExpectedIncome = monthlyExpectedIncome;
            return this;
        }

        public Builder monthlyExpectedIncome(Amount monthlyExpectedIncome) {
            this.monthlyExpectedIncome = Optional.ofNullable(monthlyExpectedIncome);
            return this;
        }

        @JsonSetter(value = "quarterlyExpectedIncome", nulls = Nulls.SKIP)
        public Builder quarterlyExpectedIncome(Optional<Amount> quarterlyExpectedIncome) {
            this.quarterlyExpectedIncome = quarterlyExpectedIncome;
            return this;
        }

        public Builder quarterlyExpectedIncome(Amount quarterlyExpectedIncome) {
            this.quarterlyExpectedIncome = Optional.ofNullable(quarterlyExpectedIncome);
            return this;
        }

        @JsonSetter(value = "yearlyExpectedIncome", nulls = Nulls.SKIP)
        public Builder yearlyExpectedIncome(Optional<Amount> yearlyExpectedIncome) {
            this.yearlyExpectedIncome = yearlyExpectedIncome;
            return this;
        }

        public Builder yearlyExpectedIncome(Amount yearlyExpectedIncome) {
            this.yearlyExpectedIncome = Optional.ofNullable(yearlyExpectedIncome);
            return this;
        }

        public ExpectedIncome build() {
            return new ExpectedIncome(
                    dailyExpectedIncome,
                    weeklyExpectedIncome,
                    monthlyExpectedIncome,
                    quarterlyExpectedIncome,
                    yearlyExpectedIncome,
                    additionalProperties);
        }
    }
}
