/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flagright.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.flagright.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = TransactionLimits.Builder.class)
public final class TransactionLimits {
    private final Optional<Amount> maximumDailyTransactionLimit;

    private final Optional<Amount> maximumWeeklyTransactionLimit;

    private final Optional<Amount> maximumMonthlyTransactionLimit;

    private final Optional<Amount> maximumQuarterlyTransactionLimit;

    private final Optional<Amount> maximumTransactionLimit;

    private final Optional<Amount> maximumYearlyTransactionLimit;

    private final Optional<TransactionLimitsPaymentMethodLimits> paymentMethodLimits;

    private final Map<String, Object> additionalProperties;

    private TransactionLimits(
            Optional<Amount> maximumDailyTransactionLimit,
            Optional<Amount> maximumWeeklyTransactionLimit,
            Optional<Amount> maximumMonthlyTransactionLimit,
            Optional<Amount> maximumQuarterlyTransactionLimit,
            Optional<Amount> maximumTransactionLimit,
            Optional<Amount> maximumYearlyTransactionLimit,
            Optional<TransactionLimitsPaymentMethodLimits> paymentMethodLimits,
            Map<String, Object> additionalProperties) {
        this.maximumDailyTransactionLimit = maximumDailyTransactionLimit;
        this.maximumWeeklyTransactionLimit = maximumWeeklyTransactionLimit;
        this.maximumMonthlyTransactionLimit = maximumMonthlyTransactionLimit;
        this.maximumQuarterlyTransactionLimit = maximumQuarterlyTransactionLimit;
        this.maximumTransactionLimit = maximumTransactionLimit;
        this.maximumYearlyTransactionLimit = maximumYearlyTransactionLimit;
        this.paymentMethodLimits = paymentMethodLimits;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("maximumDailyTransactionLimit")
    public Optional<Amount> getMaximumDailyTransactionLimit() {
        return maximumDailyTransactionLimit;
    }

    @JsonProperty("maximumWeeklyTransactionLimit")
    public Optional<Amount> getMaximumWeeklyTransactionLimit() {
        return maximumWeeklyTransactionLimit;
    }

    @JsonProperty("maximumMonthlyTransactionLimit")
    public Optional<Amount> getMaximumMonthlyTransactionLimit() {
        return maximumMonthlyTransactionLimit;
    }

    @JsonProperty("maximumQuarterlyTransactionLimit")
    public Optional<Amount> getMaximumQuarterlyTransactionLimit() {
        return maximumQuarterlyTransactionLimit;
    }

    @JsonProperty("maximumTransactionLimit")
    public Optional<Amount> getMaximumTransactionLimit() {
        return maximumTransactionLimit;
    }

    @JsonProperty("maximumYearlyTransactionLimit")
    public Optional<Amount> getMaximumYearlyTransactionLimit() {
        return maximumYearlyTransactionLimit;
    }

    @JsonProperty("paymentMethodLimits")
    public Optional<TransactionLimitsPaymentMethodLimits> getPaymentMethodLimits() {
        return paymentMethodLimits;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof TransactionLimits && equalTo((TransactionLimits) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(TransactionLimits other) {
        return maximumDailyTransactionLimit.equals(other.maximumDailyTransactionLimit)
                && maximumWeeklyTransactionLimit.equals(other.maximumWeeklyTransactionLimit)
                && maximumMonthlyTransactionLimit.equals(other.maximumMonthlyTransactionLimit)
                && maximumQuarterlyTransactionLimit.equals(other.maximumQuarterlyTransactionLimit)
                && maximumTransactionLimit.equals(other.maximumTransactionLimit)
                && maximumYearlyTransactionLimit.equals(other.maximumYearlyTransactionLimit)
                && paymentMethodLimits.equals(other.paymentMethodLimits);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.maximumDailyTransactionLimit,
                this.maximumWeeklyTransactionLimit,
                this.maximumMonthlyTransactionLimit,
                this.maximumQuarterlyTransactionLimit,
                this.maximumTransactionLimit,
                this.maximumYearlyTransactionLimit,
                this.paymentMethodLimits);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Amount> maximumDailyTransactionLimit = Optional.empty();

        private Optional<Amount> maximumWeeklyTransactionLimit = Optional.empty();

        private Optional<Amount> maximumMonthlyTransactionLimit = Optional.empty();

        private Optional<Amount> maximumQuarterlyTransactionLimit = Optional.empty();

        private Optional<Amount> maximumTransactionLimit = Optional.empty();

        private Optional<Amount> maximumYearlyTransactionLimit = Optional.empty();

        private Optional<TransactionLimitsPaymentMethodLimits> paymentMethodLimits = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(TransactionLimits other) {
            maximumDailyTransactionLimit(other.getMaximumDailyTransactionLimit());
            maximumWeeklyTransactionLimit(other.getMaximumWeeklyTransactionLimit());
            maximumMonthlyTransactionLimit(other.getMaximumMonthlyTransactionLimit());
            maximumQuarterlyTransactionLimit(other.getMaximumQuarterlyTransactionLimit());
            maximumTransactionLimit(other.getMaximumTransactionLimit());
            maximumYearlyTransactionLimit(other.getMaximumYearlyTransactionLimit());
            paymentMethodLimits(other.getPaymentMethodLimits());
            return this;
        }

        @JsonSetter(value = "maximumDailyTransactionLimit", nulls = Nulls.SKIP)
        public Builder maximumDailyTransactionLimit(Optional<Amount> maximumDailyTransactionLimit) {
            this.maximumDailyTransactionLimit = maximumDailyTransactionLimit;
            return this;
        }

        public Builder maximumDailyTransactionLimit(Amount maximumDailyTransactionLimit) {
            this.maximumDailyTransactionLimit = Optional.ofNullable(maximumDailyTransactionLimit);
            return this;
        }

        @JsonSetter(value = "maximumWeeklyTransactionLimit", nulls = Nulls.SKIP)
        public Builder maximumWeeklyTransactionLimit(Optional<Amount> maximumWeeklyTransactionLimit) {
            this.maximumWeeklyTransactionLimit = maximumWeeklyTransactionLimit;
            return this;
        }

        public Builder maximumWeeklyTransactionLimit(Amount maximumWeeklyTransactionLimit) {
            this.maximumWeeklyTransactionLimit = Optional.ofNullable(maximumWeeklyTransactionLimit);
            return this;
        }

        @JsonSetter(value = "maximumMonthlyTransactionLimit", nulls = Nulls.SKIP)
        public Builder maximumMonthlyTransactionLimit(Optional<Amount> maximumMonthlyTransactionLimit) {
            this.maximumMonthlyTransactionLimit = maximumMonthlyTransactionLimit;
            return this;
        }

        public Builder maximumMonthlyTransactionLimit(Amount maximumMonthlyTransactionLimit) {
            this.maximumMonthlyTransactionLimit = Optional.ofNullable(maximumMonthlyTransactionLimit);
            return this;
        }

        @JsonSetter(value = "maximumQuarterlyTransactionLimit", nulls = Nulls.SKIP)
        public Builder maximumQuarterlyTransactionLimit(Optional<Amount> maximumQuarterlyTransactionLimit) {
            this.maximumQuarterlyTransactionLimit = maximumQuarterlyTransactionLimit;
            return this;
        }

        public Builder maximumQuarterlyTransactionLimit(Amount maximumQuarterlyTransactionLimit) {
            this.maximumQuarterlyTransactionLimit = Optional.ofNullable(maximumQuarterlyTransactionLimit);
            return this;
        }

        @JsonSetter(value = "maximumTransactionLimit", nulls = Nulls.SKIP)
        public Builder maximumTransactionLimit(Optional<Amount> maximumTransactionLimit) {
            this.maximumTransactionLimit = maximumTransactionLimit;
            return this;
        }

        public Builder maximumTransactionLimit(Amount maximumTransactionLimit) {
            this.maximumTransactionLimit = Optional.ofNullable(maximumTransactionLimit);
            return this;
        }

        @JsonSetter(value = "maximumYearlyTransactionLimit", nulls = Nulls.SKIP)
        public Builder maximumYearlyTransactionLimit(Optional<Amount> maximumYearlyTransactionLimit) {
            this.maximumYearlyTransactionLimit = maximumYearlyTransactionLimit;
            return this;
        }

        public Builder maximumYearlyTransactionLimit(Amount maximumYearlyTransactionLimit) {
            this.maximumYearlyTransactionLimit = Optional.ofNullable(maximumYearlyTransactionLimit);
            return this;
        }

        @JsonSetter(value = "paymentMethodLimits", nulls = Nulls.SKIP)
        public Builder paymentMethodLimits(Optional<TransactionLimitsPaymentMethodLimits> paymentMethodLimits) {
            this.paymentMethodLimits = paymentMethodLimits;
            return this;
        }

        public Builder paymentMethodLimits(TransactionLimitsPaymentMethodLimits paymentMethodLimits) {
            this.paymentMethodLimits = Optional.ofNullable(paymentMethodLimits);
            return this;
        }

        public TransactionLimits build() {
            return new TransactionLimits(
                    maximumDailyTransactionLimit,
                    maximumWeeklyTransactionLimit,
                    maximumMonthlyTransactionLimit,
                    maximumQuarterlyTransactionLimit,
                    maximumTransactionLimit,
                    maximumYearlyTransactionLimit,
                    paymentMethodLimits,
                    additionalProperties);
        }
    }
}
