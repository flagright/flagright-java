/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flagright.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.flagright.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ListData.Builder.class)
public final class ListData {
    private final Optional<ListMetadata> metadata;

    private final Optional<List<ListItem>> items;

    private final Map<String, Object> additionalProperties;

    private ListData(
            Optional<ListMetadata> metadata, Optional<List<ListItem>> items, Map<String, Object> additionalProperties) {
        this.metadata = metadata;
        this.items = items;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("metadata")
    public Optional<ListMetadata> getMetadata() {
        return metadata;
    }

    /**
     * @return List items
     */
    @JsonProperty("items")
    public Optional<List<ListItem>> getItems() {
        return items;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ListData && equalTo((ListData) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ListData other) {
        return metadata.equals(other.metadata) && items.equals(other.items);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.metadata, this.items);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<ListMetadata> metadata = Optional.empty();

        private Optional<List<ListItem>> items = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ListData other) {
            metadata(other.getMetadata());
            items(other.getItems());
            return this;
        }

        @JsonSetter(value = "metadata", nulls = Nulls.SKIP)
        public Builder metadata(Optional<ListMetadata> metadata) {
            this.metadata = metadata;
            return this;
        }

        public Builder metadata(ListMetadata metadata) {
            this.metadata = Optional.ofNullable(metadata);
            return this;
        }

        @JsonSetter(value = "items", nulls = Nulls.SKIP)
        public Builder items(Optional<List<ListItem>> items) {
            this.items = items;
            return this;
        }

        public Builder items(List<ListItem> items) {
            this.items = Optional.ofNullable(items);
            return this;
        }

        public ListData build() {
            return new ListData(metadata, items, additionalProperties);
        }
    }
}
