/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flagright.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.flagright.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = Amount.Builder.class)
public final class Amount {
    private final double amountValue;

    private final CurrencyCode amountCurrency;

    private final Map<String, Object> additionalProperties;

    private Amount(double amountValue, CurrencyCode amountCurrency, Map<String, Object> additionalProperties) {
        this.amountValue = amountValue;
        this.amountCurrency = amountCurrency;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Numerical value of the transaction
     */
    @JsonProperty("amountValue")
    public double getAmountValue() {
        return amountValue;
    }

    @JsonProperty("amountCurrency")
    public CurrencyCode getAmountCurrency() {
        return amountCurrency;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Amount && equalTo((Amount) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Amount other) {
        return amountValue == other.amountValue && amountCurrency.equals(other.amountCurrency);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.amountValue, this.amountCurrency);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static AmountValueStage builder() {
        return new Builder();
    }

    public interface AmountValueStage {
        AmountCurrencyStage amountValue(double amountValue);

        Builder from(Amount other);
    }

    public interface AmountCurrencyStage {
        _FinalStage amountCurrency(@NotNull CurrencyCode amountCurrency);
    }

    public interface _FinalStage {
        Amount build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements AmountValueStage, AmountCurrencyStage, _FinalStage {
        private double amountValue;

        private CurrencyCode amountCurrency;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(Amount other) {
            amountValue(other.getAmountValue());
            amountCurrency(other.getAmountCurrency());
            return this;
        }

        /**
         * <p>Numerical value of the transaction</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("amountValue")
        public AmountCurrencyStage amountValue(double amountValue) {
            this.amountValue = amountValue;
            return this;
        }

        @java.lang.Override
        @JsonSetter("amountCurrency")
        public _FinalStage amountCurrency(@NotNull CurrencyCode amountCurrency) {
            this.amountCurrency = Objects.requireNonNull(amountCurrency, "amountCurrency must not be null");
            return this;
        }

        @java.lang.Override
        public Amount build() {
            return new Amount(amountValue, amountCurrency, additionalProperties);
        }
    }
}
