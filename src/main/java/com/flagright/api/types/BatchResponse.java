/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flagright.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.flagright.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = BatchResponse.Builder.class)
public final class BatchResponse {
    private final BatchResponseStatus status;

    private final String batchId;

    private final double successful;

    private final double failed;

    private final Optional<List<BatchResponseFailedRecord>> failedRecords;

    private final Optional<String> message;

    private final Map<String, Object> additionalProperties;

    private BatchResponse(
            BatchResponseStatus status,
            String batchId,
            double successful,
            double failed,
            Optional<List<BatchResponseFailedRecord>> failedRecords,
            Optional<String> message,
            Map<String, Object> additionalProperties) {
        this.status = status;
        this.batchId = batchId;
        this.successful = successful;
        this.failed = failed;
        this.failedRecords = failedRecords;
        this.message = message;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("status")
    public BatchResponseStatus getStatus() {
        return status;
    }

    @JsonProperty("batchId")
    public String getBatchId() {
        return batchId;
    }

    @JsonProperty("successful")
    public double getSuccessful() {
        return successful;
    }

    @JsonProperty("failed")
    public double getFailed() {
        return failed;
    }

    @JsonProperty("failedRecords")
    public Optional<List<BatchResponseFailedRecord>> getFailedRecords() {
        return failedRecords;
    }

    @JsonProperty("message")
    public Optional<String> getMessage() {
        return message;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof BatchResponse && equalTo((BatchResponse) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(BatchResponse other) {
        return status.equals(other.status)
                && batchId.equals(other.batchId)
                && successful == other.successful
                && failed == other.failed
                && failedRecords.equals(other.failedRecords)
                && message.equals(other.message);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.status, this.batchId, this.successful, this.failed, this.failedRecords, this.message);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static StatusStage builder() {
        return new Builder();
    }

    public interface StatusStage {
        BatchIdStage status(@NotNull BatchResponseStatus status);

        Builder from(BatchResponse other);
    }

    public interface BatchIdStage {
        SuccessfulStage batchId(@NotNull String batchId);
    }

    public interface SuccessfulStage {
        FailedStage successful(double successful);
    }

    public interface FailedStage {
        _FinalStage failed(double failed);
    }

    public interface _FinalStage {
        BatchResponse build();

        _FinalStage failedRecords(Optional<List<BatchResponseFailedRecord>> failedRecords);

        _FinalStage failedRecords(List<BatchResponseFailedRecord> failedRecords);

        _FinalStage message(Optional<String> message);

        _FinalStage message(String message);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements StatusStage, BatchIdStage, SuccessfulStage, FailedStage, _FinalStage {
        private BatchResponseStatus status;

        private String batchId;

        private double successful;

        private double failed;

        private Optional<String> message = Optional.empty();

        private Optional<List<BatchResponseFailedRecord>> failedRecords = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(BatchResponse other) {
            status(other.getStatus());
            batchId(other.getBatchId());
            successful(other.getSuccessful());
            failed(other.getFailed());
            failedRecords(other.getFailedRecords());
            message(other.getMessage());
            return this;
        }

        @java.lang.Override
        @JsonSetter("status")
        public BatchIdStage status(@NotNull BatchResponseStatus status) {
            this.status = Objects.requireNonNull(status, "status must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("batchId")
        public SuccessfulStage batchId(@NotNull String batchId) {
            this.batchId = Objects.requireNonNull(batchId, "batchId must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("successful")
        public FailedStage successful(double successful) {
            this.successful = successful;
            return this;
        }

        @java.lang.Override
        @JsonSetter("failed")
        public _FinalStage failed(double failed) {
            this.failed = failed;
            return this;
        }

        @java.lang.Override
        public _FinalStage message(String message) {
            this.message = Optional.ofNullable(message);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "message", nulls = Nulls.SKIP)
        public _FinalStage message(Optional<String> message) {
            this.message = message;
            return this;
        }

        @java.lang.Override
        public _FinalStage failedRecords(List<BatchResponseFailedRecord> failedRecords) {
            this.failedRecords = Optional.ofNullable(failedRecords);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "failedRecords", nulls = Nulls.SKIP)
        public _FinalStage failedRecords(Optional<List<BatchResponseFailedRecord>> failedRecords) {
            this.failedRecords = failedRecords;
            return this;
        }

        @java.lang.Override
        public BatchResponse build() {
            return new BatchResponse(status, batchId, successful, failed, failedRecords, message, additionalProperties);
        }
    }
}
