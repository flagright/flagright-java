/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flagright.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.flagright.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = NppDetails.Builder.class)
public final class NppDetails {
    private final Optional<String> accountNumber;

    private final Optional<ConsumerName> name;

    private final Optional<String> emailId;

    private final Optional<String> contactNumber;

    private final Optional<String> bsb;

    private final Optional<String> payId;

    private final Optional<String> endToEndId;

    private final Optional<String> oskoReference;

    private final Optional<String> payIdReference;

    private final Optional<Boolean> isInstant;

    private final Optional<String> remittanceInformation;

    private final Optional<String> remittanceAdvice;

    private final Optional<List<Tag>> tags;

    private final Optional<Double> processingDate;

    private final Optional<Double> settlementDate;

    private final Optional<String> referenceNumber;

    private final Optional<String> traceNumber;

    private final Optional<String> messageFormat;

    private final Optional<String> bankName;

    private final Optional<Address> address;

    private final Map<String, Object> additionalProperties;

    private NppDetails(
            Optional<String> accountNumber,
            Optional<ConsumerName> name,
            Optional<String> emailId,
            Optional<String> contactNumber,
            Optional<String> bsb,
            Optional<String> payId,
            Optional<String> endToEndId,
            Optional<String> oskoReference,
            Optional<String> payIdReference,
            Optional<Boolean> isInstant,
            Optional<String> remittanceInformation,
            Optional<String> remittanceAdvice,
            Optional<List<Tag>> tags,
            Optional<Double> processingDate,
            Optional<Double> settlementDate,
            Optional<String> referenceNumber,
            Optional<String> traceNumber,
            Optional<String> messageFormat,
            Optional<String> bankName,
            Optional<Address> address,
            Map<String, Object> additionalProperties) {
        this.accountNumber = accountNumber;
        this.name = name;
        this.emailId = emailId;
        this.contactNumber = contactNumber;
        this.bsb = bsb;
        this.payId = payId;
        this.endToEndId = endToEndId;
        this.oskoReference = oskoReference;
        this.payIdReference = payIdReference;
        this.isInstant = isInstant;
        this.remittanceInformation = remittanceInformation;
        this.remittanceAdvice = remittanceAdvice;
        this.tags = tags;
        this.processingDate = processingDate;
        this.settlementDate = settlementDate;
        this.referenceNumber = referenceNumber;
        this.traceNumber = traceNumber;
        this.messageFormat = messageFormat;
        this.bankName = bankName;
        this.address = address;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Account number
     */
    @JsonProperty("accountNumber")
    public Optional<String> getAccountNumber() {
        return accountNumber;
    }

    @JsonProperty("name")
    public Optional<ConsumerName> getName() {
        return name;
    }

    @JsonProperty("emailId")
    public Optional<String> getEmailId() {
        return emailId;
    }

    /**
     * @return Contact number
     */
    @JsonProperty("contactNumber")
    public Optional<String> getContactNumber() {
        return contactNumber;
    }

    /**
     * @return BSB number
     */
    @JsonProperty("bsb")
    public Optional<String> getBsb() {
        return bsb;
    }

    /**
     * @return PayID
     */
    @JsonProperty("payId")
    public Optional<String> getPayId() {
        return payId;
    }

    /**
     * @return End to End ID
     */
    @JsonProperty("endToEndId")
    public Optional<String> getEndToEndId() {
        return endToEndId;
    }

    /**
     * @return OSKO reference
     */
    @JsonProperty("oskoReference")
    public Optional<String> getOskoReference() {
        return oskoReference;
    }

    /**
     * @return PayID reference
     */
    @JsonProperty("payIdReference")
    public Optional<String> getPayIdReference() {
        return payIdReference;
    }

    /**
     * @return Whether the payment is instant
     */
    @JsonProperty("isInstant")
    public Optional<Boolean> getIsInstant() {
        return isInstant;
    }

    /**
     * @return Remittance information
     */
    @JsonProperty("remittanceInformation")
    public Optional<String> getRemittanceInformation() {
        return remittanceInformation;
    }

    /**
     * @return Remittance advice
     */
    @JsonProperty("remittanceAdvice")
    public Optional<String> getRemittanceAdvice() {
        return remittanceAdvice;
    }

    /**
     * @return Additional information that can be added via tags
     */
    @JsonProperty("tags")
    public Optional<List<Tag>> getTags() {
        return tags;
    }

    /**
     * @return Timestamp of the event
     */
    @JsonProperty("processingDate")
    public Optional<Double> getProcessingDate() {
        return processingDate;
    }

    /**
     * @return Timestamp of the event
     */
    @JsonProperty("settlementDate")
    public Optional<Double> getSettlementDate() {
        return settlementDate;
    }

    /**
     * @return Unique reference number for transaction reconciliation
     */
    @JsonProperty("referenceNumber")
    public Optional<String> getReferenceNumber() {
        return referenceNumber;
    }

    /**
     * @return Trace number for tracking the payment through the NPP system
     */
    @JsonProperty("traceNumber")
    public Optional<String> getTraceNumber() {
        return traceNumber;
    }

    /**
     * @return Format of the NPP message (e.g., JSON, XML)
     */
    @JsonProperty("messageFormat")
    public Optional<String> getMessageFormat() {
        return messageFormat;
    }

    /**
     * @return Name of the bank associated with the account
     */
    @JsonProperty("bankName")
    public Optional<String> getBankName() {
        return bankName;
    }

    @JsonProperty("address")
    public Optional<Address> getAddress() {
        return address;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof NppDetails && equalTo((NppDetails) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(NppDetails other) {
        return accountNumber.equals(other.accountNumber)
                && name.equals(other.name)
                && emailId.equals(other.emailId)
                && contactNumber.equals(other.contactNumber)
                && bsb.equals(other.bsb)
                && payId.equals(other.payId)
                && endToEndId.equals(other.endToEndId)
                && oskoReference.equals(other.oskoReference)
                && payIdReference.equals(other.payIdReference)
                && isInstant.equals(other.isInstant)
                && remittanceInformation.equals(other.remittanceInformation)
                && remittanceAdvice.equals(other.remittanceAdvice)
                && tags.equals(other.tags)
                && processingDate.equals(other.processingDate)
                && settlementDate.equals(other.settlementDate)
                && referenceNumber.equals(other.referenceNumber)
                && traceNumber.equals(other.traceNumber)
                && messageFormat.equals(other.messageFormat)
                && bankName.equals(other.bankName)
                && address.equals(other.address);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.accountNumber,
                this.name,
                this.emailId,
                this.contactNumber,
                this.bsb,
                this.payId,
                this.endToEndId,
                this.oskoReference,
                this.payIdReference,
                this.isInstant,
                this.remittanceInformation,
                this.remittanceAdvice,
                this.tags,
                this.processingDate,
                this.settlementDate,
                this.referenceNumber,
                this.traceNumber,
                this.messageFormat,
                this.bankName,
                this.address);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> accountNumber = Optional.empty();

        private Optional<ConsumerName> name = Optional.empty();

        private Optional<String> emailId = Optional.empty();

        private Optional<String> contactNumber = Optional.empty();

        private Optional<String> bsb = Optional.empty();

        private Optional<String> payId = Optional.empty();

        private Optional<String> endToEndId = Optional.empty();

        private Optional<String> oskoReference = Optional.empty();

        private Optional<String> payIdReference = Optional.empty();

        private Optional<Boolean> isInstant = Optional.empty();

        private Optional<String> remittanceInformation = Optional.empty();

        private Optional<String> remittanceAdvice = Optional.empty();

        private Optional<List<Tag>> tags = Optional.empty();

        private Optional<Double> processingDate = Optional.empty();

        private Optional<Double> settlementDate = Optional.empty();

        private Optional<String> referenceNumber = Optional.empty();

        private Optional<String> traceNumber = Optional.empty();

        private Optional<String> messageFormat = Optional.empty();

        private Optional<String> bankName = Optional.empty();

        private Optional<Address> address = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(NppDetails other) {
            accountNumber(other.getAccountNumber());
            name(other.getName());
            emailId(other.getEmailId());
            contactNumber(other.getContactNumber());
            bsb(other.getBsb());
            payId(other.getPayId());
            endToEndId(other.getEndToEndId());
            oskoReference(other.getOskoReference());
            payIdReference(other.getPayIdReference());
            isInstant(other.getIsInstant());
            remittanceInformation(other.getRemittanceInformation());
            remittanceAdvice(other.getRemittanceAdvice());
            tags(other.getTags());
            processingDate(other.getProcessingDate());
            settlementDate(other.getSettlementDate());
            referenceNumber(other.getReferenceNumber());
            traceNumber(other.getTraceNumber());
            messageFormat(other.getMessageFormat());
            bankName(other.getBankName());
            address(other.getAddress());
            return this;
        }

        @JsonSetter(value = "accountNumber", nulls = Nulls.SKIP)
        public Builder accountNumber(Optional<String> accountNumber) {
            this.accountNumber = accountNumber;
            return this;
        }

        public Builder accountNumber(String accountNumber) {
            this.accountNumber = Optional.ofNullable(accountNumber);
            return this;
        }

        @JsonSetter(value = "name", nulls = Nulls.SKIP)
        public Builder name(Optional<ConsumerName> name) {
            this.name = name;
            return this;
        }

        public Builder name(ConsumerName name) {
            this.name = Optional.ofNullable(name);
            return this;
        }

        @JsonSetter(value = "emailId", nulls = Nulls.SKIP)
        public Builder emailId(Optional<String> emailId) {
            this.emailId = emailId;
            return this;
        }

        public Builder emailId(String emailId) {
            this.emailId = Optional.ofNullable(emailId);
            return this;
        }

        @JsonSetter(value = "contactNumber", nulls = Nulls.SKIP)
        public Builder contactNumber(Optional<String> contactNumber) {
            this.contactNumber = contactNumber;
            return this;
        }

        public Builder contactNumber(String contactNumber) {
            this.contactNumber = Optional.ofNullable(contactNumber);
            return this;
        }

        @JsonSetter(value = "bsb", nulls = Nulls.SKIP)
        public Builder bsb(Optional<String> bsb) {
            this.bsb = bsb;
            return this;
        }

        public Builder bsb(String bsb) {
            this.bsb = Optional.ofNullable(bsb);
            return this;
        }

        @JsonSetter(value = "payId", nulls = Nulls.SKIP)
        public Builder payId(Optional<String> payId) {
            this.payId = payId;
            return this;
        }

        public Builder payId(String payId) {
            this.payId = Optional.ofNullable(payId);
            return this;
        }

        @JsonSetter(value = "endToEndId", nulls = Nulls.SKIP)
        public Builder endToEndId(Optional<String> endToEndId) {
            this.endToEndId = endToEndId;
            return this;
        }

        public Builder endToEndId(String endToEndId) {
            this.endToEndId = Optional.ofNullable(endToEndId);
            return this;
        }

        @JsonSetter(value = "oskoReference", nulls = Nulls.SKIP)
        public Builder oskoReference(Optional<String> oskoReference) {
            this.oskoReference = oskoReference;
            return this;
        }

        public Builder oskoReference(String oskoReference) {
            this.oskoReference = Optional.ofNullable(oskoReference);
            return this;
        }

        @JsonSetter(value = "payIdReference", nulls = Nulls.SKIP)
        public Builder payIdReference(Optional<String> payIdReference) {
            this.payIdReference = payIdReference;
            return this;
        }

        public Builder payIdReference(String payIdReference) {
            this.payIdReference = Optional.ofNullable(payIdReference);
            return this;
        }

        @JsonSetter(value = "isInstant", nulls = Nulls.SKIP)
        public Builder isInstant(Optional<Boolean> isInstant) {
            this.isInstant = isInstant;
            return this;
        }

        public Builder isInstant(Boolean isInstant) {
            this.isInstant = Optional.ofNullable(isInstant);
            return this;
        }

        @JsonSetter(value = "remittanceInformation", nulls = Nulls.SKIP)
        public Builder remittanceInformation(Optional<String> remittanceInformation) {
            this.remittanceInformation = remittanceInformation;
            return this;
        }

        public Builder remittanceInformation(String remittanceInformation) {
            this.remittanceInformation = Optional.ofNullable(remittanceInformation);
            return this;
        }

        @JsonSetter(value = "remittanceAdvice", nulls = Nulls.SKIP)
        public Builder remittanceAdvice(Optional<String> remittanceAdvice) {
            this.remittanceAdvice = remittanceAdvice;
            return this;
        }

        public Builder remittanceAdvice(String remittanceAdvice) {
            this.remittanceAdvice = Optional.ofNullable(remittanceAdvice);
            return this;
        }

        @JsonSetter(value = "tags", nulls = Nulls.SKIP)
        public Builder tags(Optional<List<Tag>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder tags(List<Tag> tags) {
            this.tags = Optional.ofNullable(tags);
            return this;
        }

        @JsonSetter(value = "processingDate", nulls = Nulls.SKIP)
        public Builder processingDate(Optional<Double> processingDate) {
            this.processingDate = processingDate;
            return this;
        }

        public Builder processingDate(Double processingDate) {
            this.processingDate = Optional.ofNullable(processingDate);
            return this;
        }

        @JsonSetter(value = "settlementDate", nulls = Nulls.SKIP)
        public Builder settlementDate(Optional<Double> settlementDate) {
            this.settlementDate = settlementDate;
            return this;
        }

        public Builder settlementDate(Double settlementDate) {
            this.settlementDate = Optional.ofNullable(settlementDate);
            return this;
        }

        @JsonSetter(value = "referenceNumber", nulls = Nulls.SKIP)
        public Builder referenceNumber(Optional<String> referenceNumber) {
            this.referenceNumber = referenceNumber;
            return this;
        }

        public Builder referenceNumber(String referenceNumber) {
            this.referenceNumber = Optional.ofNullable(referenceNumber);
            return this;
        }

        @JsonSetter(value = "traceNumber", nulls = Nulls.SKIP)
        public Builder traceNumber(Optional<String> traceNumber) {
            this.traceNumber = traceNumber;
            return this;
        }

        public Builder traceNumber(String traceNumber) {
            this.traceNumber = Optional.ofNullable(traceNumber);
            return this;
        }

        @JsonSetter(value = "messageFormat", nulls = Nulls.SKIP)
        public Builder messageFormat(Optional<String> messageFormat) {
            this.messageFormat = messageFormat;
            return this;
        }

        public Builder messageFormat(String messageFormat) {
            this.messageFormat = Optional.ofNullable(messageFormat);
            return this;
        }

        @JsonSetter(value = "bankName", nulls = Nulls.SKIP)
        public Builder bankName(Optional<String> bankName) {
            this.bankName = bankName;
            return this;
        }

        public Builder bankName(String bankName) {
            this.bankName = Optional.ofNullable(bankName);
            return this;
        }

        @JsonSetter(value = "address", nulls = Nulls.SKIP)
        public Builder address(Optional<Address> address) {
            this.address = address;
            return this;
        }

        public Builder address(Address address) {
            this.address = Optional.ofNullable(address);
            return this;
        }

        public NppDetails build() {
            return new NppDetails(
                    accountNumber,
                    name,
                    emailId,
                    contactNumber,
                    bsb,
                    payId,
                    endToEndId,
                    oskoReference,
                    payIdReference,
                    isInstant,
                    remittanceInformation,
                    remittanceAdvice,
                    tags,
                    processingDate,
                    settlementDate,
                    referenceNumber,
                    traceNumber,
                    messageFormat,
                    bankName,
                    address,
                    additionalProperties);
        }
    }
}
