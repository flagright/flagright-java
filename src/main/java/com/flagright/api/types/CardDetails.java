/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flagright.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.flagright.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CardDetails.Builder.class)
public final class CardDetails {
    private final Optional<String> cardFingerprint;

    private final Optional<String> emailId;

    private final Optional<CardStatus> cardStatus;

    private final Optional<CountryCode> cardIssuedCountry;

    private final Optional<String> transactionReferenceField;

    private final Optional<Boolean> _3DsDone;

    private final Optional<ConsumerName> nameOnCard;

    private final Optional<CardExpiry> cardExpiry;

    private final Optional<PosDetails> posDetails;

    private final Optional<String> cardLast4Digits;

    private final Optional<CardBrand> cardBrand;

    private final Optional<CardFunding> cardFunding;

    private final Optional<Boolean> cardAuthenticated;

    private final Optional<Boolean> cardTokenized;

    private final Optional<Boolean> cardPresent;

    private final Optional<String> paymentChannel;

    private final Optional<CardType> cardType;

    private final Optional<Amount> cardBalance;

    private final Optional<CardMerchantDetails> merchantDetails;

    private final Optional<Double> networkProviderRiskScore;

    private final Optional<List<Tag>> tags;

    private final Map<String, Object> additionalProperties;

    private CardDetails(
            Optional<String> cardFingerprint,
            Optional<String> emailId,
            Optional<CardStatus> cardStatus,
            Optional<CountryCode> cardIssuedCountry,
            Optional<String> transactionReferenceField,
            Optional<Boolean> _3DsDone,
            Optional<ConsumerName> nameOnCard,
            Optional<CardExpiry> cardExpiry,
            Optional<PosDetails> posDetails,
            Optional<String> cardLast4Digits,
            Optional<CardBrand> cardBrand,
            Optional<CardFunding> cardFunding,
            Optional<Boolean> cardAuthenticated,
            Optional<Boolean> cardTokenized,
            Optional<Boolean> cardPresent,
            Optional<String> paymentChannel,
            Optional<CardType> cardType,
            Optional<Amount> cardBalance,
            Optional<CardMerchantDetails> merchantDetails,
            Optional<Double> networkProviderRiskScore,
            Optional<List<Tag>> tags,
            Map<String, Object> additionalProperties) {
        this.cardFingerprint = cardFingerprint;
        this.emailId = emailId;
        this.cardStatus = cardStatus;
        this.cardIssuedCountry = cardIssuedCountry;
        this.transactionReferenceField = transactionReferenceField;
        this._3DsDone = _3DsDone;
        this.nameOnCard = nameOnCard;
        this.cardExpiry = cardExpiry;
        this.posDetails = posDetails;
        this.cardLast4Digits = cardLast4Digits;
        this.cardBrand = cardBrand;
        this.cardFunding = cardFunding;
        this.cardAuthenticated = cardAuthenticated;
        this.cardTokenized = cardTokenized;
        this.cardPresent = cardPresent;
        this.paymentChannel = paymentChannel;
        this.cardType = cardType;
        this.cardBalance = cardBalance;
        this.merchantDetails = merchantDetails;
        this.networkProviderRiskScore = networkProviderRiskScore;
        this.tags = tags;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Unique card fingerprint that helps identify a specific card without having to use explicit card number. This is likely available at your card payment scheme provider
     */
    @JsonProperty("cardFingerprint")
    public Optional<String> getCardFingerprint() {
        return cardFingerprint;
    }

    @JsonProperty("emailId")
    public Optional<String> getEmailId() {
        return emailId;
    }

    @JsonProperty("cardStatus")
    public Optional<CardStatus> getCardStatus() {
        return cardStatus;
    }

    @JsonProperty("cardIssuedCountry")
    public Optional<CountryCode> getCardIssuedCountry() {
        return cardIssuedCountry;
    }

    /**
     * @return Reference for the transaction
     */
    @JsonProperty("transactionReferenceField")
    public Optional<String> getTransactionReferenceField() {
        return transactionReferenceField;
    }

    /**
     * @return Whether 3ds was successfully enforced for the transaction
     */
    @JsonProperty("3dsDone")
    public Optional<Boolean> get_3DsDone() {
        return _3DsDone;
    }

    @JsonProperty("nameOnCard")
    public Optional<ConsumerName> getNameOnCard() {
        return nameOnCard;
    }

    @JsonProperty("cardExpiry")
    public Optional<CardExpiry> getCardExpiry() {
        return cardExpiry;
    }

    @JsonProperty("posDetails")
    public Optional<PosDetails> getPosDetails() {
        return posDetails;
    }

    /**
     * @return Last 4 digits of Card
     */
    @JsonProperty("cardLast4Digits")
    public Optional<String> getCardLast4Digits() {
        return cardLast4Digits;
    }

    @JsonProperty("cardBrand")
    public Optional<CardBrand> getCardBrand() {
        return cardBrand;
    }

    @JsonProperty("cardFunding")
    public Optional<CardFunding> getCardFunding() {
        return cardFunding;
    }

    /**
     * @return Authentication of Card
     */
    @JsonProperty("cardAuthenticated")
    public Optional<Boolean> getCardAuthenticated() {
        return cardAuthenticated;
    }

    /**
     * @return Was the card tokenized
     */
    @JsonProperty("cardTokenized")
    public Optional<Boolean> getCardTokenized() {
        return cardTokenized;
    }

    /**
     * @return Card Present
     */
    @JsonProperty("cardPresent")
    public Optional<Boolean> getCardPresent() {
        return cardPresent;
    }

    @JsonProperty("paymentChannel")
    public Optional<String> getPaymentChannel() {
        return paymentChannel;
    }

    @JsonProperty("cardType")
    public Optional<CardType> getCardType() {
        return cardType;
    }

    @JsonProperty("cardBalance")
    public Optional<Amount> getCardBalance() {
        return cardBalance;
    }

    @JsonProperty("merchantDetails")
    public Optional<CardMerchantDetails> getMerchantDetails() {
        return merchantDetails;
    }

    /**
     * @return Risk score of the card from your network provider
     */
    @JsonProperty("networkProviderRiskScore")
    public Optional<Double> getNetworkProviderRiskScore() {
        return networkProviderRiskScore;
    }

    /**
     * @return Additional information that can be added via tags
     */
    @JsonProperty("tags")
    public Optional<List<Tag>> getTags() {
        return tags;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CardDetails && equalTo((CardDetails) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CardDetails other) {
        return cardFingerprint.equals(other.cardFingerprint)
                && emailId.equals(other.emailId)
                && cardStatus.equals(other.cardStatus)
                && cardIssuedCountry.equals(other.cardIssuedCountry)
                && transactionReferenceField.equals(other.transactionReferenceField)
                && _3DsDone.equals(other._3DsDone)
                && nameOnCard.equals(other.nameOnCard)
                && cardExpiry.equals(other.cardExpiry)
                && posDetails.equals(other.posDetails)
                && cardLast4Digits.equals(other.cardLast4Digits)
                && cardBrand.equals(other.cardBrand)
                && cardFunding.equals(other.cardFunding)
                && cardAuthenticated.equals(other.cardAuthenticated)
                && cardTokenized.equals(other.cardTokenized)
                && cardPresent.equals(other.cardPresent)
                && paymentChannel.equals(other.paymentChannel)
                && cardType.equals(other.cardType)
                && cardBalance.equals(other.cardBalance)
                && merchantDetails.equals(other.merchantDetails)
                && networkProviderRiskScore.equals(other.networkProviderRiskScore)
                && tags.equals(other.tags);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.cardFingerprint,
                this.emailId,
                this.cardStatus,
                this.cardIssuedCountry,
                this.transactionReferenceField,
                this._3DsDone,
                this.nameOnCard,
                this.cardExpiry,
                this.posDetails,
                this.cardLast4Digits,
                this.cardBrand,
                this.cardFunding,
                this.cardAuthenticated,
                this.cardTokenized,
                this.cardPresent,
                this.paymentChannel,
                this.cardType,
                this.cardBalance,
                this.merchantDetails,
                this.networkProviderRiskScore,
                this.tags);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> cardFingerprint = Optional.empty();

        private Optional<String> emailId = Optional.empty();

        private Optional<CardStatus> cardStatus = Optional.empty();

        private Optional<CountryCode> cardIssuedCountry = Optional.empty();

        private Optional<String> transactionReferenceField = Optional.empty();

        private Optional<Boolean> _3DsDone = Optional.empty();

        private Optional<ConsumerName> nameOnCard = Optional.empty();

        private Optional<CardExpiry> cardExpiry = Optional.empty();

        private Optional<PosDetails> posDetails = Optional.empty();

        private Optional<String> cardLast4Digits = Optional.empty();

        private Optional<CardBrand> cardBrand = Optional.empty();

        private Optional<CardFunding> cardFunding = Optional.empty();

        private Optional<Boolean> cardAuthenticated = Optional.empty();

        private Optional<Boolean> cardTokenized = Optional.empty();

        private Optional<Boolean> cardPresent = Optional.empty();

        private Optional<String> paymentChannel = Optional.empty();

        private Optional<CardType> cardType = Optional.empty();

        private Optional<Amount> cardBalance = Optional.empty();

        private Optional<CardMerchantDetails> merchantDetails = Optional.empty();

        private Optional<Double> networkProviderRiskScore = Optional.empty();

        private Optional<List<Tag>> tags = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(CardDetails other) {
            cardFingerprint(other.getCardFingerprint());
            emailId(other.getEmailId());
            cardStatus(other.getCardStatus());
            cardIssuedCountry(other.getCardIssuedCountry());
            transactionReferenceField(other.getTransactionReferenceField());
            _3DsDone(other.get_3DsDone());
            nameOnCard(other.getNameOnCard());
            cardExpiry(other.getCardExpiry());
            posDetails(other.getPosDetails());
            cardLast4Digits(other.getCardLast4Digits());
            cardBrand(other.getCardBrand());
            cardFunding(other.getCardFunding());
            cardAuthenticated(other.getCardAuthenticated());
            cardTokenized(other.getCardTokenized());
            cardPresent(other.getCardPresent());
            paymentChannel(other.getPaymentChannel());
            cardType(other.getCardType());
            cardBalance(other.getCardBalance());
            merchantDetails(other.getMerchantDetails());
            networkProviderRiskScore(other.getNetworkProviderRiskScore());
            tags(other.getTags());
            return this;
        }

        @JsonSetter(value = "cardFingerprint", nulls = Nulls.SKIP)
        public Builder cardFingerprint(Optional<String> cardFingerprint) {
            this.cardFingerprint = cardFingerprint;
            return this;
        }

        public Builder cardFingerprint(String cardFingerprint) {
            this.cardFingerprint = Optional.ofNullable(cardFingerprint);
            return this;
        }

        @JsonSetter(value = "emailId", nulls = Nulls.SKIP)
        public Builder emailId(Optional<String> emailId) {
            this.emailId = emailId;
            return this;
        }

        public Builder emailId(String emailId) {
            this.emailId = Optional.ofNullable(emailId);
            return this;
        }

        @JsonSetter(value = "cardStatus", nulls = Nulls.SKIP)
        public Builder cardStatus(Optional<CardStatus> cardStatus) {
            this.cardStatus = cardStatus;
            return this;
        }

        public Builder cardStatus(CardStatus cardStatus) {
            this.cardStatus = Optional.ofNullable(cardStatus);
            return this;
        }

        @JsonSetter(value = "cardIssuedCountry", nulls = Nulls.SKIP)
        public Builder cardIssuedCountry(Optional<CountryCode> cardIssuedCountry) {
            this.cardIssuedCountry = cardIssuedCountry;
            return this;
        }

        public Builder cardIssuedCountry(CountryCode cardIssuedCountry) {
            this.cardIssuedCountry = Optional.ofNullable(cardIssuedCountry);
            return this;
        }

        @JsonSetter(value = "transactionReferenceField", nulls = Nulls.SKIP)
        public Builder transactionReferenceField(Optional<String> transactionReferenceField) {
            this.transactionReferenceField = transactionReferenceField;
            return this;
        }

        public Builder transactionReferenceField(String transactionReferenceField) {
            this.transactionReferenceField = Optional.ofNullable(transactionReferenceField);
            return this;
        }

        @JsonSetter(value = "3dsDone", nulls = Nulls.SKIP)
        public Builder _3DsDone(Optional<Boolean> _3DsDone) {
            this._3DsDone = _3DsDone;
            return this;
        }

        public Builder _3DsDone(Boolean _3DsDone) {
            this._3DsDone = Optional.ofNullable(_3DsDone);
            return this;
        }

        @JsonSetter(value = "nameOnCard", nulls = Nulls.SKIP)
        public Builder nameOnCard(Optional<ConsumerName> nameOnCard) {
            this.nameOnCard = nameOnCard;
            return this;
        }

        public Builder nameOnCard(ConsumerName nameOnCard) {
            this.nameOnCard = Optional.ofNullable(nameOnCard);
            return this;
        }

        @JsonSetter(value = "cardExpiry", nulls = Nulls.SKIP)
        public Builder cardExpiry(Optional<CardExpiry> cardExpiry) {
            this.cardExpiry = cardExpiry;
            return this;
        }

        public Builder cardExpiry(CardExpiry cardExpiry) {
            this.cardExpiry = Optional.ofNullable(cardExpiry);
            return this;
        }

        @JsonSetter(value = "posDetails", nulls = Nulls.SKIP)
        public Builder posDetails(Optional<PosDetails> posDetails) {
            this.posDetails = posDetails;
            return this;
        }

        public Builder posDetails(PosDetails posDetails) {
            this.posDetails = Optional.ofNullable(posDetails);
            return this;
        }

        @JsonSetter(value = "cardLast4Digits", nulls = Nulls.SKIP)
        public Builder cardLast4Digits(Optional<String> cardLast4Digits) {
            this.cardLast4Digits = cardLast4Digits;
            return this;
        }

        public Builder cardLast4Digits(String cardLast4Digits) {
            this.cardLast4Digits = Optional.ofNullable(cardLast4Digits);
            return this;
        }

        @JsonSetter(value = "cardBrand", nulls = Nulls.SKIP)
        public Builder cardBrand(Optional<CardBrand> cardBrand) {
            this.cardBrand = cardBrand;
            return this;
        }

        public Builder cardBrand(CardBrand cardBrand) {
            this.cardBrand = Optional.ofNullable(cardBrand);
            return this;
        }

        @JsonSetter(value = "cardFunding", nulls = Nulls.SKIP)
        public Builder cardFunding(Optional<CardFunding> cardFunding) {
            this.cardFunding = cardFunding;
            return this;
        }

        public Builder cardFunding(CardFunding cardFunding) {
            this.cardFunding = Optional.ofNullable(cardFunding);
            return this;
        }

        @JsonSetter(value = "cardAuthenticated", nulls = Nulls.SKIP)
        public Builder cardAuthenticated(Optional<Boolean> cardAuthenticated) {
            this.cardAuthenticated = cardAuthenticated;
            return this;
        }

        public Builder cardAuthenticated(Boolean cardAuthenticated) {
            this.cardAuthenticated = Optional.ofNullable(cardAuthenticated);
            return this;
        }

        @JsonSetter(value = "cardTokenized", nulls = Nulls.SKIP)
        public Builder cardTokenized(Optional<Boolean> cardTokenized) {
            this.cardTokenized = cardTokenized;
            return this;
        }

        public Builder cardTokenized(Boolean cardTokenized) {
            this.cardTokenized = Optional.ofNullable(cardTokenized);
            return this;
        }

        @JsonSetter(value = "cardPresent", nulls = Nulls.SKIP)
        public Builder cardPresent(Optional<Boolean> cardPresent) {
            this.cardPresent = cardPresent;
            return this;
        }

        public Builder cardPresent(Boolean cardPresent) {
            this.cardPresent = Optional.ofNullable(cardPresent);
            return this;
        }

        @JsonSetter(value = "paymentChannel", nulls = Nulls.SKIP)
        public Builder paymentChannel(Optional<String> paymentChannel) {
            this.paymentChannel = paymentChannel;
            return this;
        }

        public Builder paymentChannel(String paymentChannel) {
            this.paymentChannel = Optional.ofNullable(paymentChannel);
            return this;
        }

        @JsonSetter(value = "cardType", nulls = Nulls.SKIP)
        public Builder cardType(Optional<CardType> cardType) {
            this.cardType = cardType;
            return this;
        }

        public Builder cardType(CardType cardType) {
            this.cardType = Optional.ofNullable(cardType);
            return this;
        }

        @JsonSetter(value = "cardBalance", nulls = Nulls.SKIP)
        public Builder cardBalance(Optional<Amount> cardBalance) {
            this.cardBalance = cardBalance;
            return this;
        }

        public Builder cardBalance(Amount cardBalance) {
            this.cardBalance = Optional.ofNullable(cardBalance);
            return this;
        }

        @JsonSetter(value = "merchantDetails", nulls = Nulls.SKIP)
        public Builder merchantDetails(Optional<CardMerchantDetails> merchantDetails) {
            this.merchantDetails = merchantDetails;
            return this;
        }

        public Builder merchantDetails(CardMerchantDetails merchantDetails) {
            this.merchantDetails = Optional.ofNullable(merchantDetails);
            return this;
        }

        @JsonSetter(value = "networkProviderRiskScore", nulls = Nulls.SKIP)
        public Builder networkProviderRiskScore(Optional<Double> networkProviderRiskScore) {
            this.networkProviderRiskScore = networkProviderRiskScore;
            return this;
        }

        public Builder networkProviderRiskScore(Double networkProviderRiskScore) {
            this.networkProviderRiskScore = Optional.ofNullable(networkProviderRiskScore);
            return this;
        }

        @JsonSetter(value = "tags", nulls = Nulls.SKIP)
        public Builder tags(Optional<List<Tag>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder tags(List<Tag> tags) {
            this.tags = Optional.ofNullable(tags);
            return this;
        }

        public CardDetails build() {
            return new CardDetails(
                    cardFingerprint,
                    emailId,
                    cardStatus,
                    cardIssuedCountry,
                    transactionReferenceField,
                    _3DsDone,
                    nameOnCard,
                    cardExpiry,
                    posDetails,
                    cardLast4Digits,
                    cardBrand,
                    cardFunding,
                    cardAuthenticated,
                    cardTokenized,
                    cardPresent,
                    paymentChannel,
                    cardType,
                    cardBalance,
                    merchantDetails,
                    networkProviderRiskScore,
                    tags,
                    additionalProperties);
        }
    }
}
