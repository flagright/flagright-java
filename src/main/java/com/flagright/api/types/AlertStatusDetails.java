/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flagright.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.flagright.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = AlertStatusDetails.Builder.class)
public final class AlertStatusDetails {
    private final Optional<String> alertId;

    private final Optional<String> status;

    private final Optional<List<String>> reasons;

    private final Optional<String> reasonDescriptionForOther;

    private final Optional<String> comment;

    private final Optional<String> userId;

    private final Optional<List<String>> transactionIds;

    private final Optional<String> ruleName;

    private final Optional<String> ruleDescription;

    private final Optional<String> ruleId;

    private final Optional<String> ruleInstanceId;

    private final Map<String, Object> additionalProperties;

    private AlertStatusDetails(
            Optional<String> alertId,
            Optional<String> status,
            Optional<List<String>> reasons,
            Optional<String> reasonDescriptionForOther,
            Optional<String> comment,
            Optional<String> userId,
            Optional<List<String>> transactionIds,
            Optional<String> ruleName,
            Optional<String> ruleDescription,
            Optional<String> ruleId,
            Optional<String> ruleInstanceId,
            Map<String, Object> additionalProperties) {
        this.alertId = alertId;
        this.status = status;
        this.reasons = reasons;
        this.reasonDescriptionForOther = reasonDescriptionForOther;
        this.comment = comment;
        this.userId = userId;
        this.transactionIds = transactionIds;
        this.ruleName = ruleName;
        this.ruleDescription = ruleDescription;
        this.ruleId = ruleId;
        this.ruleInstanceId = ruleInstanceId;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("alertId")
    public Optional<String> getAlertId() {
        return alertId;
    }

    @JsonProperty("status")
    public Optional<String> getStatus() {
        return status;
    }

    @JsonProperty("reasons")
    public Optional<List<String>> getReasons() {
        return reasons;
    }

    @JsonProperty("reasonDescriptionForOther")
    public Optional<String> getReasonDescriptionForOther() {
        return reasonDescriptionForOther;
    }

    @JsonProperty("comment")
    public Optional<String> getComment() {
        return comment;
    }

    @JsonProperty("userId")
    public Optional<String> getUserId() {
        return userId;
    }

    @JsonProperty("transactionIds")
    public Optional<List<String>> getTransactionIds() {
        return transactionIds;
    }

    @JsonProperty("ruleName")
    public Optional<String> getRuleName() {
        return ruleName;
    }

    @JsonProperty("ruleDescription")
    public Optional<String> getRuleDescription() {
        return ruleDescription;
    }

    @JsonProperty("ruleId")
    public Optional<String> getRuleId() {
        return ruleId;
    }

    @JsonProperty("ruleInstanceId")
    public Optional<String> getRuleInstanceId() {
        return ruleInstanceId;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof AlertStatusDetails && equalTo((AlertStatusDetails) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(AlertStatusDetails other) {
        return alertId.equals(other.alertId)
                && status.equals(other.status)
                && reasons.equals(other.reasons)
                && reasonDescriptionForOther.equals(other.reasonDescriptionForOther)
                && comment.equals(other.comment)
                && userId.equals(other.userId)
                && transactionIds.equals(other.transactionIds)
                && ruleName.equals(other.ruleName)
                && ruleDescription.equals(other.ruleDescription)
                && ruleId.equals(other.ruleId)
                && ruleInstanceId.equals(other.ruleInstanceId);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.alertId,
                this.status,
                this.reasons,
                this.reasonDescriptionForOther,
                this.comment,
                this.userId,
                this.transactionIds,
                this.ruleName,
                this.ruleDescription,
                this.ruleId,
                this.ruleInstanceId);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> alertId = Optional.empty();

        private Optional<String> status = Optional.empty();

        private Optional<List<String>> reasons = Optional.empty();

        private Optional<String> reasonDescriptionForOther = Optional.empty();

        private Optional<String> comment = Optional.empty();

        private Optional<String> userId = Optional.empty();

        private Optional<List<String>> transactionIds = Optional.empty();

        private Optional<String> ruleName = Optional.empty();

        private Optional<String> ruleDescription = Optional.empty();

        private Optional<String> ruleId = Optional.empty();

        private Optional<String> ruleInstanceId = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(AlertStatusDetails other) {
            alertId(other.getAlertId());
            status(other.getStatus());
            reasons(other.getReasons());
            reasonDescriptionForOther(other.getReasonDescriptionForOther());
            comment(other.getComment());
            userId(other.getUserId());
            transactionIds(other.getTransactionIds());
            ruleName(other.getRuleName());
            ruleDescription(other.getRuleDescription());
            ruleId(other.getRuleId());
            ruleInstanceId(other.getRuleInstanceId());
            return this;
        }

        @JsonSetter(value = "alertId", nulls = Nulls.SKIP)
        public Builder alertId(Optional<String> alertId) {
            this.alertId = alertId;
            return this;
        }

        public Builder alertId(String alertId) {
            this.alertId = Optional.ofNullable(alertId);
            return this;
        }

        @JsonSetter(value = "status", nulls = Nulls.SKIP)
        public Builder status(Optional<String> status) {
            this.status = status;
            return this;
        }

        public Builder status(String status) {
            this.status = Optional.ofNullable(status);
            return this;
        }

        @JsonSetter(value = "reasons", nulls = Nulls.SKIP)
        public Builder reasons(Optional<List<String>> reasons) {
            this.reasons = reasons;
            return this;
        }

        public Builder reasons(List<String> reasons) {
            this.reasons = Optional.ofNullable(reasons);
            return this;
        }

        @JsonSetter(value = "reasonDescriptionForOther", nulls = Nulls.SKIP)
        public Builder reasonDescriptionForOther(Optional<String> reasonDescriptionForOther) {
            this.reasonDescriptionForOther = reasonDescriptionForOther;
            return this;
        }

        public Builder reasonDescriptionForOther(String reasonDescriptionForOther) {
            this.reasonDescriptionForOther = Optional.ofNullable(reasonDescriptionForOther);
            return this;
        }

        @JsonSetter(value = "comment", nulls = Nulls.SKIP)
        public Builder comment(Optional<String> comment) {
            this.comment = comment;
            return this;
        }

        public Builder comment(String comment) {
            this.comment = Optional.ofNullable(comment);
            return this;
        }

        @JsonSetter(value = "userId", nulls = Nulls.SKIP)
        public Builder userId(Optional<String> userId) {
            this.userId = userId;
            return this;
        }

        public Builder userId(String userId) {
            this.userId = Optional.ofNullable(userId);
            return this;
        }

        @JsonSetter(value = "transactionIds", nulls = Nulls.SKIP)
        public Builder transactionIds(Optional<List<String>> transactionIds) {
            this.transactionIds = transactionIds;
            return this;
        }

        public Builder transactionIds(List<String> transactionIds) {
            this.transactionIds = Optional.ofNullable(transactionIds);
            return this;
        }

        @JsonSetter(value = "ruleName", nulls = Nulls.SKIP)
        public Builder ruleName(Optional<String> ruleName) {
            this.ruleName = ruleName;
            return this;
        }

        public Builder ruleName(String ruleName) {
            this.ruleName = Optional.ofNullable(ruleName);
            return this;
        }

        @JsonSetter(value = "ruleDescription", nulls = Nulls.SKIP)
        public Builder ruleDescription(Optional<String> ruleDescription) {
            this.ruleDescription = ruleDescription;
            return this;
        }

        public Builder ruleDescription(String ruleDescription) {
            this.ruleDescription = Optional.ofNullable(ruleDescription);
            return this;
        }

        @JsonSetter(value = "ruleId", nulls = Nulls.SKIP)
        public Builder ruleId(Optional<String> ruleId) {
            this.ruleId = ruleId;
            return this;
        }

        public Builder ruleId(String ruleId) {
            this.ruleId = Optional.ofNullable(ruleId);
            return this;
        }

        @JsonSetter(value = "ruleInstanceId", nulls = Nulls.SKIP)
        public Builder ruleInstanceId(Optional<String> ruleInstanceId) {
            this.ruleInstanceId = ruleInstanceId;
            return this;
        }

        public Builder ruleInstanceId(String ruleInstanceId) {
            this.ruleInstanceId = Optional.ofNullable(ruleInstanceId);
            return this;
        }

        public AlertStatusDetails build() {
            return new AlertStatusDetails(
                    alertId,
                    status,
                    reasons,
                    reasonDescriptionForOther,
                    comment,
                    userId,
                    transactionIds,
                    ruleName,
                    ruleDescription,
                    ruleId,
                    ruleInstanceId,
                    additionalProperties);
        }
    }
}
