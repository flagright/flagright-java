/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flagright.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.flagright.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = PlaceOfBirth.Builder.class)
public final class PlaceOfBirth {
    private final Optional<String> city;

    private final Optional<String> state;

    private final CountryCode country;

    private final Map<String, Object> additionalProperties;

    private PlaceOfBirth(
            Optional<String> city,
            Optional<String> state,
            CountryCode country,
            Map<String, Object> additionalProperties) {
        this.city = city;
        this.state = state;
        this.country = country;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("city")
    public Optional<String> getCity() {
        return city;
    }

    @JsonProperty("state")
    public Optional<String> getState() {
        return state;
    }

    @JsonProperty("country")
    public CountryCode getCountry() {
        return country;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof PlaceOfBirth && equalTo((PlaceOfBirth) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(PlaceOfBirth other) {
        return city.equals(other.city) && state.equals(other.state) && country.equals(other.country);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.city, this.state, this.country);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static CountryStage builder() {
        return new Builder();
    }

    public interface CountryStage {
        _FinalStage country(@NotNull CountryCode country);

        Builder from(PlaceOfBirth other);
    }

    public interface _FinalStage {
        PlaceOfBirth build();

        _FinalStage city(Optional<String> city);

        _FinalStage city(String city);

        _FinalStage state(Optional<String> state);

        _FinalStage state(String state);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements CountryStage, _FinalStage {
        private CountryCode country;

        private Optional<String> state = Optional.empty();

        private Optional<String> city = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(PlaceOfBirth other) {
            city(other.getCity());
            state(other.getState());
            country(other.getCountry());
            return this;
        }

        @java.lang.Override
        @JsonSetter("country")
        public _FinalStage country(@NotNull CountryCode country) {
            this.country = Objects.requireNonNull(country, "country must not be null");
            return this;
        }

        @java.lang.Override
        public _FinalStage state(String state) {
            this.state = Optional.ofNullable(state);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "state", nulls = Nulls.SKIP)
        public _FinalStage state(Optional<String> state) {
            this.state = state;
            return this;
        }

        @java.lang.Override
        public _FinalStage city(String city) {
            this.city = Optional.ofNullable(city);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "city", nulls = Nulls.SKIP)
        public _FinalStage city(Optional<String> city) {
            this.city = city;
            return this;
        }

        @java.lang.Override
        public PlaceOfBirth build() {
            return new PlaceOfBirth(city, state, country, additionalProperties);
        }
    }
}
