/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flagright.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.flagright.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ListMetadata.Builder.class)
public final class ListMetadata {
    private final Optional<String> name;

    private final Optional<String> description;

    private final Optional<Boolean> status;

    private final Optional<String> checksum;

    private final Optional<ListMetadataTtl> ttl;

    private final Map<String, Object> additionalProperties;

    private ListMetadata(
            Optional<String> name,
            Optional<String> description,
            Optional<Boolean> status,
            Optional<String> checksum,
            Optional<ListMetadataTtl> ttl,
            Map<String, Object> additionalProperties) {
        this.name = name;
        this.description = description;
        this.status = status;
        this.checksum = checksum;
        this.ttl = ttl;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return List name
     */
    @JsonProperty("name")
    public Optional<String> getName() {
        return name;
    }

    /**
     * @return List description
     */
    @JsonProperty("description")
    public Optional<String> getDescription() {
        return description;
    }

    @JsonProperty("status")
    public Optional<Boolean> getStatus() {
        return status;
    }

    @JsonProperty("checksum")
    public Optional<String> getChecksum() {
        return checksum;
    }

    @JsonProperty("ttl")
    public Optional<ListMetadataTtl> getTtl() {
        return ttl;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ListMetadata && equalTo((ListMetadata) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ListMetadata other) {
        return name.equals(other.name)
                && description.equals(other.description)
                && status.equals(other.status)
                && checksum.equals(other.checksum)
                && ttl.equals(other.ttl);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.name, this.description, this.status, this.checksum, this.ttl);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> name = Optional.empty();

        private Optional<String> description = Optional.empty();

        private Optional<Boolean> status = Optional.empty();

        private Optional<String> checksum = Optional.empty();

        private Optional<ListMetadataTtl> ttl = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ListMetadata other) {
            name(other.getName());
            description(other.getDescription());
            status(other.getStatus());
            checksum(other.getChecksum());
            ttl(other.getTtl());
            return this;
        }

        @JsonSetter(value = "name", nulls = Nulls.SKIP)
        public Builder name(Optional<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(String name) {
            this.name = Optional.ofNullable(name);
            return this;
        }

        @JsonSetter(value = "description", nulls = Nulls.SKIP)
        public Builder description(Optional<String> description) {
            this.description = description;
            return this;
        }

        public Builder description(String description) {
            this.description = Optional.ofNullable(description);
            return this;
        }

        @JsonSetter(value = "status", nulls = Nulls.SKIP)
        public Builder status(Optional<Boolean> status) {
            this.status = status;
            return this;
        }

        public Builder status(Boolean status) {
            this.status = Optional.ofNullable(status);
            return this;
        }

        @JsonSetter(value = "checksum", nulls = Nulls.SKIP)
        public Builder checksum(Optional<String> checksum) {
            this.checksum = checksum;
            return this;
        }

        public Builder checksum(String checksum) {
            this.checksum = Optional.ofNullable(checksum);
            return this;
        }

        @JsonSetter(value = "ttl", nulls = Nulls.SKIP)
        public Builder ttl(Optional<ListMetadataTtl> ttl) {
            this.ttl = ttl;
            return this;
        }

        public Builder ttl(ListMetadataTtl ttl) {
            this.ttl = Optional.ofNullable(ttl);
            return this;
        }

        public ListMetadata build() {
            return new ListMetadata(name, description, status, checksum, ttl, additionalProperties);
        }
    }
}
