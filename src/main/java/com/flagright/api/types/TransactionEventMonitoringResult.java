/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flagright.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.flagright.api.core.ObjectMappers;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = TransactionEventMonitoringResult.Builder.class)
public final class TransactionEventMonitoringResult {
    private final String eventId;

    private final Transaction transaction;

    private final Optional<TransactionRiskScoringResult> riskScoreDetails;

    private final List<ExecutedRulesResult> executedRules;

    private final List<HitRulesDetails> hitRules;

    private final Map<String, Object> additionalProperties;

    private TransactionEventMonitoringResult(
            String eventId,
            Transaction transaction,
            Optional<TransactionRiskScoringResult> riskScoreDetails,
            List<ExecutedRulesResult> executedRules,
            List<HitRulesDetails> hitRules,
            Map<String, Object> additionalProperties) {
        this.eventId = eventId;
        this.transaction = transaction;
        this.riskScoreDetails = riskScoreDetails;
        this.executedRules = executedRules;
        this.hitRules = hitRules;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("eventId")
    public String getEventId() {
        return eventId;
    }

    @JsonProperty("transaction")
    public Transaction getTransaction() {
        return transaction;
    }

    @JsonProperty("riskScoreDetails")
    public Optional<TransactionRiskScoringResult> getRiskScoreDetails() {
        return riskScoreDetails;
    }

    /**
     * @return Unique transaction identifier
     */
    @JsonProperty("executedRules")
    public List<ExecutedRulesResult> getExecutedRules() {
        return executedRules;
    }

    /**
     * @return Unique transaction identifier
     */
    @JsonProperty("hitRules")
    public List<HitRulesDetails> getHitRules() {
        return hitRules;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof TransactionEventMonitoringResult && equalTo((TransactionEventMonitoringResult) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(TransactionEventMonitoringResult other) {
        return eventId.equals(other.eventId)
                && transaction.equals(other.transaction)
                && riskScoreDetails.equals(other.riskScoreDetails)
                && executedRules.equals(other.executedRules)
                && hitRules.equals(other.hitRules);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.eventId, this.transaction, this.riskScoreDetails, this.executedRules, this.hitRules);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static EventIdStage builder() {
        return new Builder();
    }

    public interface EventIdStage {
        TransactionStage eventId(@NotNull String eventId);

        Builder from(TransactionEventMonitoringResult other);
    }

    public interface TransactionStage {
        _FinalStage transaction(@NotNull Transaction transaction);
    }

    public interface _FinalStage {
        TransactionEventMonitoringResult build();

        _FinalStage riskScoreDetails(Optional<TransactionRiskScoringResult> riskScoreDetails);

        _FinalStage riskScoreDetails(TransactionRiskScoringResult riskScoreDetails);

        _FinalStage executedRules(List<ExecutedRulesResult> executedRules);

        _FinalStage addExecutedRules(ExecutedRulesResult executedRules);

        _FinalStage addAllExecutedRules(List<ExecutedRulesResult> executedRules);

        _FinalStage hitRules(List<HitRulesDetails> hitRules);

        _FinalStage addHitRules(HitRulesDetails hitRules);

        _FinalStage addAllHitRules(List<HitRulesDetails> hitRules);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements EventIdStage, TransactionStage, _FinalStage {
        private String eventId;

        private Transaction transaction;

        private List<HitRulesDetails> hitRules = new ArrayList<>();

        private List<ExecutedRulesResult> executedRules = new ArrayList<>();

        private Optional<TransactionRiskScoringResult> riskScoreDetails = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(TransactionEventMonitoringResult other) {
            eventId(other.getEventId());
            transaction(other.getTransaction());
            riskScoreDetails(other.getRiskScoreDetails());
            executedRules(other.getExecutedRules());
            hitRules(other.getHitRules());
            return this;
        }

        @java.lang.Override
        @JsonSetter("eventId")
        public TransactionStage eventId(@NotNull String eventId) {
            this.eventId = Objects.requireNonNull(eventId, "eventId must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("transaction")
        public _FinalStage transaction(@NotNull Transaction transaction) {
            this.transaction = Objects.requireNonNull(transaction, "transaction must not be null");
            return this;
        }

        /**
         * <p>Unique transaction identifier</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage addAllHitRules(List<HitRulesDetails> hitRules) {
            this.hitRules.addAll(hitRules);
            return this;
        }

        /**
         * <p>Unique transaction identifier</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage addHitRules(HitRulesDetails hitRules) {
            this.hitRules.add(hitRules);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "hitRules", nulls = Nulls.SKIP)
        public _FinalStage hitRules(List<HitRulesDetails> hitRules) {
            this.hitRules.clear();
            this.hitRules.addAll(hitRules);
            return this;
        }

        /**
         * <p>Unique transaction identifier</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage addAllExecutedRules(List<ExecutedRulesResult> executedRules) {
            this.executedRules.addAll(executedRules);
            return this;
        }

        /**
         * <p>Unique transaction identifier</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage addExecutedRules(ExecutedRulesResult executedRules) {
            this.executedRules.add(executedRules);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "executedRules", nulls = Nulls.SKIP)
        public _FinalStage executedRules(List<ExecutedRulesResult> executedRules) {
            this.executedRules.clear();
            this.executedRules.addAll(executedRules);
            return this;
        }

        @java.lang.Override
        public _FinalStage riskScoreDetails(TransactionRiskScoringResult riskScoreDetails) {
            this.riskScoreDetails = Optional.ofNullable(riskScoreDetails);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "riskScoreDetails", nulls = Nulls.SKIP)
        public _FinalStage riskScoreDetails(Optional<TransactionRiskScoringResult> riskScoreDetails) {
            this.riskScoreDetails = riskScoreDetails;
            return this;
        }

        @java.lang.Override
        public TransactionEventMonitoringResult build() {
            return new TransactionEventMonitoringResult(
                    eventId, transaction, riskScoreDetails, executedRules, hitRules, additionalProperties);
        }
    }
}
