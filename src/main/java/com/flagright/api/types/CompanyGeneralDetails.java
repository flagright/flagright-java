/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flagright.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.flagright.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CompanyGeneralDetails.Builder.class)
public final class CompanyGeneralDetails {
    private final Optional<String> legalName;

    private final Optional<List<String>> businessIndustry;

    private final Optional<List<String>> mainProductsServicesSold;

    private final Optional<BusinessUserSegment> userSegment;

    private final Optional<UserRegistrationStatus> userRegistrationStatus;

    private final Optional<List<CountryCode>> operatingCountries;

    private final Optional<List<String>> alias;

    private final Optional<List<Tag>> tags;

    private final Map<String, Object> additionalProperties;

    private CompanyGeneralDetails(
            Optional<String> legalName,
            Optional<List<String>> businessIndustry,
            Optional<List<String>> mainProductsServicesSold,
            Optional<BusinessUserSegment> userSegment,
            Optional<UserRegistrationStatus> userRegistrationStatus,
            Optional<List<CountryCode>> operatingCountries,
            Optional<List<String>> alias,
            Optional<List<Tag>> tags,
            Map<String, Object> additionalProperties) {
        this.legalName = legalName;
        this.businessIndustry = businessIndustry;
        this.mainProductsServicesSold = mainProductsServicesSold;
        this.userSegment = userSegment;
        this.userRegistrationStatus = userRegistrationStatus;
        this.operatingCountries = operatingCountries;
        this.alias = alias;
        this.tags = tags;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Legal name of the company
     */
    @JsonProperty("legalName")
    public Optional<String> getLegalName() {
        return legalName;
    }

    /**
     * @return The industry in which the business operates for a business customer
     */
    @JsonProperty("businessIndustry")
    public Optional<List<String>> getBusinessIndustry() {
        return businessIndustry;
    }

    /**
     * @return The key products and services provided by the company
     */
    @JsonProperty("mainProductsServicesSold")
    public Optional<List<String>> getMainProductsServicesSold() {
        return mainProductsServicesSold;
    }

    /**
     * @return Segmentation of the business user
     */
    @JsonProperty("userSegment")
    public Optional<BusinessUserSegment> getUserSegment() {
        return userSegment;
    }

    @JsonProperty("userRegistrationStatus")
    public Optional<UserRegistrationStatus> getUserRegistrationStatus() {
        return userRegistrationStatus;
    }

    /**
     * @return Countries where the business operates
     */
    @JsonProperty("operatingCountries")
    public Optional<List<CountryCode>> getOperatingCountries() {
        return operatingCountries;
    }

    /**
     * @return Alias names of the business entity
     */
    @JsonProperty("alias")
    public Optional<List<String>> getAlias() {
        return alias;
    }

    /**
     * @return Additional information that can be added via tags
     */
    @JsonProperty("tags")
    public Optional<List<Tag>> getTags() {
        return tags;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CompanyGeneralDetails && equalTo((CompanyGeneralDetails) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CompanyGeneralDetails other) {
        return legalName.equals(other.legalName)
                && businessIndustry.equals(other.businessIndustry)
                && mainProductsServicesSold.equals(other.mainProductsServicesSold)
                && userSegment.equals(other.userSegment)
                && userRegistrationStatus.equals(other.userRegistrationStatus)
                && operatingCountries.equals(other.operatingCountries)
                && alias.equals(other.alias)
                && tags.equals(other.tags);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.legalName,
                this.businessIndustry,
                this.mainProductsServicesSold,
                this.userSegment,
                this.userRegistrationStatus,
                this.operatingCountries,
                this.alias,
                this.tags);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> legalName = Optional.empty();

        private Optional<List<String>> businessIndustry = Optional.empty();

        private Optional<List<String>> mainProductsServicesSold = Optional.empty();

        private Optional<BusinessUserSegment> userSegment = Optional.empty();

        private Optional<UserRegistrationStatus> userRegistrationStatus = Optional.empty();

        private Optional<List<CountryCode>> operatingCountries = Optional.empty();

        private Optional<List<String>> alias = Optional.empty();

        private Optional<List<Tag>> tags = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(CompanyGeneralDetails other) {
            legalName(other.getLegalName());
            businessIndustry(other.getBusinessIndustry());
            mainProductsServicesSold(other.getMainProductsServicesSold());
            userSegment(other.getUserSegment());
            userRegistrationStatus(other.getUserRegistrationStatus());
            operatingCountries(other.getOperatingCountries());
            alias(other.getAlias());
            tags(other.getTags());
            return this;
        }

        @JsonSetter(value = "legalName", nulls = Nulls.SKIP)
        public Builder legalName(Optional<String> legalName) {
            this.legalName = legalName;
            return this;
        }

        public Builder legalName(String legalName) {
            this.legalName = Optional.ofNullable(legalName);
            return this;
        }

        @JsonSetter(value = "businessIndustry", nulls = Nulls.SKIP)
        public Builder businessIndustry(Optional<List<String>> businessIndustry) {
            this.businessIndustry = businessIndustry;
            return this;
        }

        public Builder businessIndustry(List<String> businessIndustry) {
            this.businessIndustry = Optional.ofNullable(businessIndustry);
            return this;
        }

        @JsonSetter(value = "mainProductsServicesSold", nulls = Nulls.SKIP)
        public Builder mainProductsServicesSold(Optional<List<String>> mainProductsServicesSold) {
            this.mainProductsServicesSold = mainProductsServicesSold;
            return this;
        }

        public Builder mainProductsServicesSold(List<String> mainProductsServicesSold) {
            this.mainProductsServicesSold = Optional.ofNullable(mainProductsServicesSold);
            return this;
        }

        @JsonSetter(value = "userSegment", nulls = Nulls.SKIP)
        public Builder userSegment(Optional<BusinessUserSegment> userSegment) {
            this.userSegment = userSegment;
            return this;
        }

        public Builder userSegment(BusinessUserSegment userSegment) {
            this.userSegment = Optional.ofNullable(userSegment);
            return this;
        }

        @JsonSetter(value = "userRegistrationStatus", nulls = Nulls.SKIP)
        public Builder userRegistrationStatus(Optional<UserRegistrationStatus> userRegistrationStatus) {
            this.userRegistrationStatus = userRegistrationStatus;
            return this;
        }

        public Builder userRegistrationStatus(UserRegistrationStatus userRegistrationStatus) {
            this.userRegistrationStatus = Optional.ofNullable(userRegistrationStatus);
            return this;
        }

        @JsonSetter(value = "operatingCountries", nulls = Nulls.SKIP)
        public Builder operatingCountries(Optional<List<CountryCode>> operatingCountries) {
            this.operatingCountries = operatingCountries;
            return this;
        }

        public Builder operatingCountries(List<CountryCode> operatingCountries) {
            this.operatingCountries = Optional.ofNullable(operatingCountries);
            return this;
        }

        @JsonSetter(value = "alias", nulls = Nulls.SKIP)
        public Builder alias(Optional<List<String>> alias) {
            this.alias = alias;
            return this;
        }

        public Builder alias(List<String> alias) {
            this.alias = Optional.ofNullable(alias);
            return this;
        }

        @JsonSetter(value = "tags", nulls = Nulls.SKIP)
        public Builder tags(Optional<List<Tag>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder tags(List<Tag> tags) {
            this.tags = Optional.ofNullable(tags);
            return this;
        }

        public CompanyGeneralDetails build() {
            return new CompanyGeneralDetails(
                    legalName,
                    businessIndustry,
                    mainProductsServicesSold,
                    userSegment,
                    userRegistrationStatus,
                    operatingCountries,
                    alias,
                    tags,
                    additionalProperties);
        }
    }
}
