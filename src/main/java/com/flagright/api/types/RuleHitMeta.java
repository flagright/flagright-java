/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flagright.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.flagright.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = RuleHitMeta.Builder.class)
public final class RuleHitMeta {
    private final Optional<List<RuleHitDirection>> hitDirections;

    private final Optional<FalsePositiveDetails> falsePositiveDetails;

    private final Optional<List<SanctionsDetails>> sanctionsDetails;

    private final Optional<Boolean> isOngoingScreeningHit;

    private final Map<String, Object> additionalProperties;

    private RuleHitMeta(
            Optional<List<RuleHitDirection>> hitDirections,
            Optional<FalsePositiveDetails> falsePositiveDetails,
            Optional<List<SanctionsDetails>> sanctionsDetails,
            Optional<Boolean> isOngoingScreeningHit,
            Map<String, Object> additionalProperties) {
        this.hitDirections = hitDirections;
        this.falsePositiveDetails = falsePositiveDetails;
        this.sanctionsDetails = sanctionsDetails;
        this.isOngoingScreeningHit = isOngoingScreeningHit;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("hitDirections")
    public Optional<List<RuleHitDirection>> getHitDirections() {
        return hitDirections;
    }

    @JsonProperty("falsePositiveDetails")
    public Optional<FalsePositiveDetails> getFalsePositiveDetails() {
        return falsePositiveDetails;
    }

    @JsonProperty("sanctionsDetails")
    public Optional<List<SanctionsDetails>> getSanctionsDetails() {
        return sanctionsDetails;
    }

    @JsonProperty("isOngoingScreeningHit")
    public Optional<Boolean> getIsOngoingScreeningHit() {
        return isOngoingScreeningHit;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof RuleHitMeta && equalTo((RuleHitMeta) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(RuleHitMeta other) {
        return hitDirections.equals(other.hitDirections)
                && falsePositiveDetails.equals(other.falsePositiveDetails)
                && sanctionsDetails.equals(other.sanctionsDetails)
                && isOngoingScreeningHit.equals(other.isOngoingScreeningHit);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.hitDirections, this.falsePositiveDetails, this.sanctionsDetails, this.isOngoingScreeningHit);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<List<RuleHitDirection>> hitDirections = Optional.empty();

        private Optional<FalsePositiveDetails> falsePositiveDetails = Optional.empty();

        private Optional<List<SanctionsDetails>> sanctionsDetails = Optional.empty();

        private Optional<Boolean> isOngoingScreeningHit = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(RuleHitMeta other) {
            hitDirections(other.getHitDirections());
            falsePositiveDetails(other.getFalsePositiveDetails());
            sanctionsDetails(other.getSanctionsDetails());
            isOngoingScreeningHit(other.getIsOngoingScreeningHit());
            return this;
        }

        @JsonSetter(value = "hitDirections", nulls = Nulls.SKIP)
        public Builder hitDirections(Optional<List<RuleHitDirection>> hitDirections) {
            this.hitDirections = hitDirections;
            return this;
        }

        public Builder hitDirections(List<RuleHitDirection> hitDirections) {
            this.hitDirections = Optional.ofNullable(hitDirections);
            return this;
        }

        @JsonSetter(value = "falsePositiveDetails", nulls = Nulls.SKIP)
        public Builder falsePositiveDetails(Optional<FalsePositiveDetails> falsePositiveDetails) {
            this.falsePositiveDetails = falsePositiveDetails;
            return this;
        }

        public Builder falsePositiveDetails(FalsePositiveDetails falsePositiveDetails) {
            this.falsePositiveDetails = Optional.ofNullable(falsePositiveDetails);
            return this;
        }

        @JsonSetter(value = "sanctionsDetails", nulls = Nulls.SKIP)
        public Builder sanctionsDetails(Optional<List<SanctionsDetails>> sanctionsDetails) {
            this.sanctionsDetails = sanctionsDetails;
            return this;
        }

        public Builder sanctionsDetails(List<SanctionsDetails> sanctionsDetails) {
            this.sanctionsDetails = Optional.ofNullable(sanctionsDetails);
            return this;
        }

        @JsonSetter(value = "isOngoingScreeningHit", nulls = Nulls.SKIP)
        public Builder isOngoingScreeningHit(Optional<Boolean> isOngoingScreeningHit) {
            this.isOngoingScreeningHit = isOngoingScreeningHit;
            return this;
        }

        public Builder isOngoingScreeningHit(Boolean isOngoingScreeningHit) {
            this.isOngoingScreeningHit = Optional.ofNullable(isOngoingScreeningHit);
            return this;
        }

        public RuleHitMeta build() {
            return new RuleHitMeta(
                    hitDirections, falsePositiveDetails, sanctionsDetails, isOngoingScreeningHit, additionalProperties);
        }
    }
}
