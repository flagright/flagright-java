/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flagright.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.flagright.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ConsumerName.Builder.class)
public final class ConsumerName {
    private final String firstName;

    private final Optional<String> middleName;

    private final Optional<String> lastName;

    private final Map<String, Object> additionalProperties;

    private ConsumerName(
            String firstName,
            Optional<String> middleName,
            Optional<String> lastName,
            Map<String, Object> additionalProperties) {
        this.firstName = firstName;
        this.middleName = middleName;
        this.lastName = lastName;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return First name of the user
     */
    @JsonProperty("firstName")
    public String getFirstName() {
        return firstName;
    }

    /**
     * @return Middle name of the user
     */
    @JsonProperty("middleName")
    public Optional<String> getMiddleName() {
        return middleName;
    }

    /**
     * @return Last name of the user
     */
    @JsonProperty("lastName")
    public Optional<String> getLastName() {
        return lastName;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ConsumerName && equalTo((ConsumerName) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ConsumerName other) {
        return firstName.equals(other.firstName)
                && middleName.equals(other.middleName)
                && lastName.equals(other.lastName);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.firstName, this.middleName, this.lastName);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static FirstNameStage builder() {
        return new Builder();
    }

    public interface FirstNameStage {
        _FinalStage firstName(@NotNull String firstName);

        Builder from(ConsumerName other);
    }

    public interface _FinalStage {
        ConsumerName build();

        _FinalStage middleName(Optional<String> middleName);

        _FinalStage middleName(String middleName);

        _FinalStage lastName(Optional<String> lastName);

        _FinalStage lastName(String lastName);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements FirstNameStage, _FinalStage {
        private String firstName;

        private Optional<String> lastName = Optional.empty();

        private Optional<String> middleName = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(ConsumerName other) {
            firstName(other.getFirstName());
            middleName(other.getMiddleName());
            lastName(other.getLastName());
            return this;
        }

        /**
         * <p>First name of the user</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("firstName")
        public _FinalStage firstName(@NotNull String firstName) {
            this.firstName = Objects.requireNonNull(firstName, "firstName must not be null");
            return this;
        }

        /**
         * <p>Last name of the user</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage lastName(String lastName) {
            this.lastName = Optional.ofNullable(lastName);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "lastName", nulls = Nulls.SKIP)
        public _FinalStage lastName(Optional<String> lastName) {
            this.lastName = lastName;
            return this;
        }

        /**
         * <p>Middle name of the user</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage middleName(String middleName) {
            this.middleName = Optional.ofNullable(middleName);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "middleName", nulls = Nulls.SKIP)
        public _FinalStage middleName(Optional<String> middleName) {
            this.middleName = middleName;
            return this;
        }

        @java.lang.Override
        public ConsumerName build() {
            return new ConsumerName(firstName, middleName, lastName, additionalProperties);
        }
    }
}
