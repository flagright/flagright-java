/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flagright.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.flagright.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = LegalEntity.Builder.class)
public final class LegalEntity {
    private final CompanyGeneralDetails companyGeneralDetails;

    private final Optional<CompanyFinancialDetails> companyFinancialDetails;

    private final Optional<CompanyRegistrationDetails> companyRegistrationDetails;

    private final Optional<List<String>> reasonForAccountOpening;

    private final Optional<List<SourceOfFunds>> sourceOfFunds;

    private final Optional<ContactDetails> contactDetails;

    private final Map<String, Object> additionalProperties;

    private LegalEntity(
            CompanyGeneralDetails companyGeneralDetails,
            Optional<CompanyFinancialDetails> companyFinancialDetails,
            Optional<CompanyRegistrationDetails> companyRegistrationDetails,
            Optional<List<String>> reasonForAccountOpening,
            Optional<List<SourceOfFunds>> sourceOfFunds,
            Optional<ContactDetails> contactDetails,
            Map<String, Object> additionalProperties) {
        this.companyGeneralDetails = companyGeneralDetails;
        this.companyFinancialDetails = companyFinancialDetails;
        this.companyRegistrationDetails = companyRegistrationDetails;
        this.reasonForAccountOpening = reasonForAccountOpening;
        this.sourceOfFunds = sourceOfFunds;
        this.contactDetails = contactDetails;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("companyGeneralDetails")
    public CompanyGeneralDetails getCompanyGeneralDetails() {
        return companyGeneralDetails;
    }

    @JsonProperty("companyFinancialDetails")
    public Optional<CompanyFinancialDetails> getCompanyFinancialDetails() {
        return companyFinancialDetails;
    }

    @JsonProperty("companyRegistrationDetails")
    public Optional<CompanyRegistrationDetails> getCompanyRegistrationDetails() {
        return companyRegistrationDetails;
    }

    @JsonProperty("reasonForAccountOpening")
    public Optional<List<String>> getReasonForAccountOpening() {
        return reasonForAccountOpening;
    }

    @JsonProperty("sourceOfFunds")
    public Optional<List<SourceOfFunds>> getSourceOfFunds() {
        return sourceOfFunds;
    }

    @JsonProperty("contactDetails")
    public Optional<ContactDetails> getContactDetails() {
        return contactDetails;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof LegalEntity && equalTo((LegalEntity) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(LegalEntity other) {
        return companyGeneralDetails.equals(other.companyGeneralDetails)
                && companyFinancialDetails.equals(other.companyFinancialDetails)
                && companyRegistrationDetails.equals(other.companyRegistrationDetails)
                && reasonForAccountOpening.equals(other.reasonForAccountOpening)
                && sourceOfFunds.equals(other.sourceOfFunds)
                && contactDetails.equals(other.contactDetails);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.companyGeneralDetails,
                this.companyFinancialDetails,
                this.companyRegistrationDetails,
                this.reasonForAccountOpening,
                this.sourceOfFunds,
                this.contactDetails);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static CompanyGeneralDetailsStage builder() {
        return new Builder();
    }

    public interface CompanyGeneralDetailsStage {
        _FinalStage companyGeneralDetails(@NotNull CompanyGeneralDetails companyGeneralDetails);

        Builder from(LegalEntity other);
    }

    public interface _FinalStage {
        LegalEntity build();

        _FinalStage companyFinancialDetails(Optional<CompanyFinancialDetails> companyFinancialDetails);

        _FinalStage companyFinancialDetails(CompanyFinancialDetails companyFinancialDetails);

        _FinalStage companyRegistrationDetails(Optional<CompanyRegistrationDetails> companyRegistrationDetails);

        _FinalStage companyRegistrationDetails(CompanyRegistrationDetails companyRegistrationDetails);

        _FinalStage reasonForAccountOpening(Optional<List<String>> reasonForAccountOpening);

        _FinalStage reasonForAccountOpening(List<String> reasonForAccountOpening);

        _FinalStage sourceOfFunds(Optional<List<SourceOfFunds>> sourceOfFunds);

        _FinalStage sourceOfFunds(List<SourceOfFunds> sourceOfFunds);

        _FinalStage contactDetails(Optional<ContactDetails> contactDetails);

        _FinalStage contactDetails(ContactDetails contactDetails);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements CompanyGeneralDetailsStage, _FinalStage {
        private CompanyGeneralDetails companyGeneralDetails;

        private Optional<ContactDetails> contactDetails = Optional.empty();

        private Optional<List<SourceOfFunds>> sourceOfFunds = Optional.empty();

        private Optional<List<String>> reasonForAccountOpening = Optional.empty();

        private Optional<CompanyRegistrationDetails> companyRegistrationDetails = Optional.empty();

        private Optional<CompanyFinancialDetails> companyFinancialDetails = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(LegalEntity other) {
            companyGeneralDetails(other.getCompanyGeneralDetails());
            companyFinancialDetails(other.getCompanyFinancialDetails());
            companyRegistrationDetails(other.getCompanyRegistrationDetails());
            reasonForAccountOpening(other.getReasonForAccountOpening());
            sourceOfFunds(other.getSourceOfFunds());
            contactDetails(other.getContactDetails());
            return this;
        }

        @java.lang.Override
        @JsonSetter("companyGeneralDetails")
        public _FinalStage companyGeneralDetails(@NotNull CompanyGeneralDetails companyGeneralDetails) {
            this.companyGeneralDetails =
                    Objects.requireNonNull(companyGeneralDetails, "companyGeneralDetails must not be null");
            return this;
        }

        @java.lang.Override
        public _FinalStage contactDetails(ContactDetails contactDetails) {
            this.contactDetails = Optional.ofNullable(contactDetails);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "contactDetails", nulls = Nulls.SKIP)
        public _FinalStage contactDetails(Optional<ContactDetails> contactDetails) {
            this.contactDetails = contactDetails;
            return this;
        }

        @java.lang.Override
        public _FinalStage sourceOfFunds(List<SourceOfFunds> sourceOfFunds) {
            this.sourceOfFunds = Optional.ofNullable(sourceOfFunds);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "sourceOfFunds", nulls = Nulls.SKIP)
        public _FinalStage sourceOfFunds(Optional<List<SourceOfFunds>> sourceOfFunds) {
            this.sourceOfFunds = sourceOfFunds;
            return this;
        }

        @java.lang.Override
        public _FinalStage reasonForAccountOpening(List<String> reasonForAccountOpening) {
            this.reasonForAccountOpening = Optional.ofNullable(reasonForAccountOpening);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "reasonForAccountOpening", nulls = Nulls.SKIP)
        public _FinalStage reasonForAccountOpening(Optional<List<String>> reasonForAccountOpening) {
            this.reasonForAccountOpening = reasonForAccountOpening;
            return this;
        }

        @java.lang.Override
        public _FinalStage companyRegistrationDetails(CompanyRegistrationDetails companyRegistrationDetails) {
            this.companyRegistrationDetails = Optional.ofNullable(companyRegistrationDetails);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "companyRegistrationDetails", nulls = Nulls.SKIP)
        public _FinalStage companyRegistrationDetails(Optional<CompanyRegistrationDetails> companyRegistrationDetails) {
            this.companyRegistrationDetails = companyRegistrationDetails;
            return this;
        }

        @java.lang.Override
        public _FinalStage companyFinancialDetails(CompanyFinancialDetails companyFinancialDetails) {
            this.companyFinancialDetails = Optional.ofNullable(companyFinancialDetails);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "companyFinancialDetails", nulls = Nulls.SKIP)
        public _FinalStage companyFinancialDetails(Optional<CompanyFinancialDetails> companyFinancialDetails) {
            this.companyFinancialDetails = companyFinancialDetails;
            return this;
        }

        @java.lang.Override
        public LegalEntity build() {
            return new LegalEntity(
                    companyGeneralDetails,
                    companyFinancialDetails,
                    companyRegistrationDetails,
                    reasonForAccountOpening,
                    sourceOfFunds,
                    contactDetails,
                    additionalProperties);
        }
    }
}
