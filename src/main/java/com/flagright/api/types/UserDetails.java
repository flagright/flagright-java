/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flagright.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.flagright.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = UserDetails.Builder.class)
public final class UserDetails {
    private final Optional<ConsumerName> name;

    private final Optional<String> dateOfBirth;

    private final Optional<String> userCategory;

    private final Optional<CountryCode> countryOfResidence;

    private final Optional<CountryCode> countryOfTaxResidence;

    private final Optional<CountryCode> countryOfNationality;

    private final Optional<Gender> gender;

    private final Optional<MaritalStatus> maritalStatus;

    private final Optional<PlaceOfBirth> placeOfBirth;

    private final Optional<List<String>> alias;

    private final Map<String, Object> additionalProperties;

    private UserDetails(
            Optional<ConsumerName> name,
            Optional<String> dateOfBirth,
            Optional<String> userCategory,
            Optional<CountryCode> countryOfResidence,
            Optional<CountryCode> countryOfTaxResidence,
            Optional<CountryCode> countryOfNationality,
            Optional<Gender> gender,
            Optional<MaritalStatus> maritalStatus,
            Optional<PlaceOfBirth> placeOfBirth,
            Optional<List<String>> alias,
            Map<String, Object> additionalProperties) {
        this.name = name;
        this.dateOfBirth = dateOfBirth;
        this.userCategory = userCategory;
        this.countryOfResidence = countryOfResidence;
        this.countryOfTaxResidence = countryOfTaxResidence;
        this.countryOfNationality = countryOfNationality;
        this.gender = gender;
        this.maritalStatus = maritalStatus;
        this.placeOfBirth = placeOfBirth;
        this.alias = alias;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("name")
    public Optional<ConsumerName> getName() {
        return name;
    }

    /**
     * @return Date of birth of the user (YYYY-MM-DD)
     */
    @JsonProperty("dateOfBirth")
    public Optional<String> getDateOfBirth() {
        return dateOfBirth;
    }

    /**
     * @return Internal category of the user
     */
    @JsonProperty("userCategory")
    public Optional<String> getUserCategory() {
        return userCategory;
    }

    @JsonProperty("countryOfResidence")
    public Optional<CountryCode> getCountryOfResidence() {
        return countryOfResidence;
    }

    @JsonProperty("countryOfTaxResidence")
    public Optional<CountryCode> getCountryOfTaxResidence() {
        return countryOfTaxResidence;
    }

    @JsonProperty("countryOfNationality")
    public Optional<CountryCode> getCountryOfNationality() {
        return countryOfNationality;
    }

    @JsonProperty("gender")
    public Optional<Gender> getGender() {
        return gender;
    }

    @JsonProperty("maritalStatus")
    public Optional<MaritalStatus> getMaritalStatus() {
        return maritalStatus;
    }

    @JsonProperty("placeOfBirth")
    public Optional<PlaceOfBirth> getPlaceOfBirth() {
        return placeOfBirth;
    }

    /**
     * @return Alias names of the user
     */
    @JsonProperty("alias")
    public Optional<List<String>> getAlias() {
        return alias;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof UserDetails && equalTo((UserDetails) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(UserDetails other) {
        return name.equals(other.name)
                && dateOfBirth.equals(other.dateOfBirth)
                && userCategory.equals(other.userCategory)
                && countryOfResidence.equals(other.countryOfResidence)
                && countryOfTaxResidence.equals(other.countryOfTaxResidence)
                && countryOfNationality.equals(other.countryOfNationality)
                && gender.equals(other.gender)
                && maritalStatus.equals(other.maritalStatus)
                && placeOfBirth.equals(other.placeOfBirth)
                && alias.equals(other.alias);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.name,
                this.dateOfBirth,
                this.userCategory,
                this.countryOfResidence,
                this.countryOfTaxResidence,
                this.countryOfNationality,
                this.gender,
                this.maritalStatus,
                this.placeOfBirth,
                this.alias);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<ConsumerName> name = Optional.empty();

        private Optional<String> dateOfBirth = Optional.empty();

        private Optional<String> userCategory = Optional.empty();

        private Optional<CountryCode> countryOfResidence = Optional.empty();

        private Optional<CountryCode> countryOfTaxResidence = Optional.empty();

        private Optional<CountryCode> countryOfNationality = Optional.empty();

        private Optional<Gender> gender = Optional.empty();

        private Optional<MaritalStatus> maritalStatus = Optional.empty();

        private Optional<PlaceOfBirth> placeOfBirth = Optional.empty();

        private Optional<List<String>> alias = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(UserDetails other) {
            name(other.getName());
            dateOfBirth(other.getDateOfBirth());
            userCategory(other.getUserCategory());
            countryOfResidence(other.getCountryOfResidence());
            countryOfTaxResidence(other.getCountryOfTaxResidence());
            countryOfNationality(other.getCountryOfNationality());
            gender(other.getGender());
            maritalStatus(other.getMaritalStatus());
            placeOfBirth(other.getPlaceOfBirth());
            alias(other.getAlias());
            return this;
        }

        @JsonSetter(value = "name", nulls = Nulls.SKIP)
        public Builder name(Optional<ConsumerName> name) {
            this.name = name;
            return this;
        }

        public Builder name(ConsumerName name) {
            this.name = Optional.ofNullable(name);
            return this;
        }

        @JsonSetter(value = "dateOfBirth", nulls = Nulls.SKIP)
        public Builder dateOfBirth(Optional<String> dateOfBirth) {
            this.dateOfBirth = dateOfBirth;
            return this;
        }

        public Builder dateOfBirth(String dateOfBirth) {
            this.dateOfBirth = Optional.ofNullable(dateOfBirth);
            return this;
        }

        @JsonSetter(value = "userCategory", nulls = Nulls.SKIP)
        public Builder userCategory(Optional<String> userCategory) {
            this.userCategory = userCategory;
            return this;
        }

        public Builder userCategory(String userCategory) {
            this.userCategory = Optional.ofNullable(userCategory);
            return this;
        }

        @JsonSetter(value = "countryOfResidence", nulls = Nulls.SKIP)
        public Builder countryOfResidence(Optional<CountryCode> countryOfResidence) {
            this.countryOfResidence = countryOfResidence;
            return this;
        }

        public Builder countryOfResidence(CountryCode countryOfResidence) {
            this.countryOfResidence = Optional.ofNullable(countryOfResidence);
            return this;
        }

        @JsonSetter(value = "countryOfTaxResidence", nulls = Nulls.SKIP)
        public Builder countryOfTaxResidence(Optional<CountryCode> countryOfTaxResidence) {
            this.countryOfTaxResidence = countryOfTaxResidence;
            return this;
        }

        public Builder countryOfTaxResidence(CountryCode countryOfTaxResidence) {
            this.countryOfTaxResidence = Optional.ofNullable(countryOfTaxResidence);
            return this;
        }

        @JsonSetter(value = "countryOfNationality", nulls = Nulls.SKIP)
        public Builder countryOfNationality(Optional<CountryCode> countryOfNationality) {
            this.countryOfNationality = countryOfNationality;
            return this;
        }

        public Builder countryOfNationality(CountryCode countryOfNationality) {
            this.countryOfNationality = Optional.ofNullable(countryOfNationality);
            return this;
        }

        @JsonSetter(value = "gender", nulls = Nulls.SKIP)
        public Builder gender(Optional<Gender> gender) {
            this.gender = gender;
            return this;
        }

        public Builder gender(Gender gender) {
            this.gender = Optional.ofNullable(gender);
            return this;
        }

        @JsonSetter(value = "maritalStatus", nulls = Nulls.SKIP)
        public Builder maritalStatus(Optional<MaritalStatus> maritalStatus) {
            this.maritalStatus = maritalStatus;
            return this;
        }

        public Builder maritalStatus(MaritalStatus maritalStatus) {
            this.maritalStatus = Optional.ofNullable(maritalStatus);
            return this;
        }

        @JsonSetter(value = "placeOfBirth", nulls = Nulls.SKIP)
        public Builder placeOfBirth(Optional<PlaceOfBirth> placeOfBirth) {
            this.placeOfBirth = placeOfBirth;
            return this;
        }

        public Builder placeOfBirth(PlaceOfBirth placeOfBirth) {
            this.placeOfBirth = Optional.ofNullable(placeOfBirth);
            return this;
        }

        @JsonSetter(value = "alias", nulls = Nulls.SKIP)
        public Builder alias(Optional<List<String>> alias) {
            this.alias = alias;
            return this;
        }

        public Builder alias(List<String> alias) {
            this.alias = Optional.ofNullable(alias);
            return this;
        }

        public UserDetails build() {
            return new UserDetails(
                    name,
                    dateOfBirth,
                    userCategory,
                    countryOfResidence,
                    countryOfTaxResidence,
                    countryOfNationality,
                    gender,
                    maritalStatus,
                    placeOfBirth,
                    alias,
                    additionalProperties);
        }
    }
}
