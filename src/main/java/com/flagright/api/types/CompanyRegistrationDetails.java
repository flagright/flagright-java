/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flagright.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.flagright.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CompanyRegistrationDetails.Builder.class)
public final class CompanyRegistrationDetails {
    private final String registrationIdentifier;

    private final CountryCode registrationCountry;

    private final Optional<CountryCode> taxResidenceCountry;

    private final Optional<String> taxIdentifier;

    private final Optional<String> legalEntityType;

    private final Optional<String> dateOfRegistration;

    private final Optional<List<Tag>> tags;

    private final Map<String, Object> additionalProperties;

    private CompanyRegistrationDetails(
            String registrationIdentifier,
            CountryCode registrationCountry,
            Optional<CountryCode> taxResidenceCountry,
            Optional<String> taxIdentifier,
            Optional<String> legalEntityType,
            Optional<String> dateOfRegistration,
            Optional<List<Tag>> tags,
            Map<String, Object> additionalProperties) {
        this.registrationIdentifier = registrationIdentifier;
        this.registrationCountry = registrationCountry;
        this.taxResidenceCountry = taxResidenceCountry;
        this.taxIdentifier = taxIdentifier;
        this.legalEntityType = legalEntityType;
        this.dateOfRegistration = dateOfRegistration;
        this.tags = tags;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Commercial registry registration number for the company in its registration country
     */
    @JsonProperty("registrationIdentifier")
    public String getRegistrationIdentifier() {
        return registrationIdentifier;
    }

    @JsonProperty("registrationCountry")
    public CountryCode getRegistrationCountry() {
        return registrationCountry;
    }

    @JsonProperty("taxResidenceCountry")
    public Optional<CountryCode> getTaxResidenceCountry() {
        return taxResidenceCountry;
    }

    /**
     * @return Tax ID number of the registered entity
     */
    @JsonProperty("taxIdentifier")
    public Optional<String> getTaxIdentifier() {
        return taxIdentifier;
    }

    /**
     * @return Type of legal entity, e.g., Limited Liability
     */
    @JsonProperty("legalEntityType")
    public Optional<String> getLegalEntityType() {
        return legalEntityType;
    }

    @JsonProperty("dateOfRegistration")
    public Optional<String> getDateOfRegistration() {
        return dateOfRegistration;
    }

    /**
     * @return Additional information that can be added via tags
     */
    @JsonProperty("tags")
    public Optional<List<Tag>> getTags() {
        return tags;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CompanyRegistrationDetails && equalTo((CompanyRegistrationDetails) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CompanyRegistrationDetails other) {
        return registrationIdentifier.equals(other.registrationIdentifier)
                && registrationCountry.equals(other.registrationCountry)
                && taxResidenceCountry.equals(other.taxResidenceCountry)
                && taxIdentifier.equals(other.taxIdentifier)
                && legalEntityType.equals(other.legalEntityType)
                && dateOfRegistration.equals(other.dateOfRegistration)
                && tags.equals(other.tags);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.registrationIdentifier,
                this.registrationCountry,
                this.taxResidenceCountry,
                this.taxIdentifier,
                this.legalEntityType,
                this.dateOfRegistration,
                this.tags);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static RegistrationIdentifierStage builder() {
        return new Builder();
    }

    public interface RegistrationIdentifierStage {
        RegistrationCountryStage registrationIdentifier(@NotNull String registrationIdentifier);

        Builder from(CompanyRegistrationDetails other);
    }

    public interface RegistrationCountryStage {
        _FinalStage registrationCountry(@NotNull CountryCode registrationCountry);
    }

    public interface _FinalStage {
        CompanyRegistrationDetails build();

        _FinalStage taxResidenceCountry(Optional<CountryCode> taxResidenceCountry);

        _FinalStage taxResidenceCountry(CountryCode taxResidenceCountry);

        _FinalStage taxIdentifier(Optional<String> taxIdentifier);

        _FinalStage taxIdentifier(String taxIdentifier);

        _FinalStage legalEntityType(Optional<String> legalEntityType);

        _FinalStage legalEntityType(String legalEntityType);

        _FinalStage dateOfRegistration(Optional<String> dateOfRegistration);

        _FinalStage dateOfRegistration(String dateOfRegistration);

        _FinalStage tags(Optional<List<Tag>> tags);

        _FinalStage tags(List<Tag> tags);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements RegistrationIdentifierStage, RegistrationCountryStage, _FinalStage {
        private String registrationIdentifier;

        private CountryCode registrationCountry;

        private Optional<List<Tag>> tags = Optional.empty();

        private Optional<String> dateOfRegistration = Optional.empty();

        private Optional<String> legalEntityType = Optional.empty();

        private Optional<String> taxIdentifier = Optional.empty();

        private Optional<CountryCode> taxResidenceCountry = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(CompanyRegistrationDetails other) {
            registrationIdentifier(other.getRegistrationIdentifier());
            registrationCountry(other.getRegistrationCountry());
            taxResidenceCountry(other.getTaxResidenceCountry());
            taxIdentifier(other.getTaxIdentifier());
            legalEntityType(other.getLegalEntityType());
            dateOfRegistration(other.getDateOfRegistration());
            tags(other.getTags());
            return this;
        }

        /**
         * <p>Commercial registry registration number for the company in its registration country</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("registrationIdentifier")
        public RegistrationCountryStage registrationIdentifier(@NotNull String registrationIdentifier) {
            this.registrationIdentifier =
                    Objects.requireNonNull(registrationIdentifier, "registrationIdentifier must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("registrationCountry")
        public _FinalStage registrationCountry(@NotNull CountryCode registrationCountry) {
            this.registrationCountry =
                    Objects.requireNonNull(registrationCountry, "registrationCountry must not be null");
            return this;
        }

        /**
         * <p>Additional information that can be added via tags</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage tags(List<Tag> tags) {
            this.tags = Optional.ofNullable(tags);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "tags", nulls = Nulls.SKIP)
        public _FinalStage tags(Optional<List<Tag>> tags) {
            this.tags = tags;
            return this;
        }

        @java.lang.Override
        public _FinalStage dateOfRegistration(String dateOfRegistration) {
            this.dateOfRegistration = Optional.ofNullable(dateOfRegistration);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "dateOfRegistration", nulls = Nulls.SKIP)
        public _FinalStage dateOfRegistration(Optional<String> dateOfRegistration) {
            this.dateOfRegistration = dateOfRegistration;
            return this;
        }

        /**
         * <p>Type of legal entity, e.g., Limited Liability</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage legalEntityType(String legalEntityType) {
            this.legalEntityType = Optional.ofNullable(legalEntityType);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "legalEntityType", nulls = Nulls.SKIP)
        public _FinalStage legalEntityType(Optional<String> legalEntityType) {
            this.legalEntityType = legalEntityType;
            return this;
        }

        /**
         * <p>Tax ID number of the registered entity</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage taxIdentifier(String taxIdentifier) {
            this.taxIdentifier = Optional.ofNullable(taxIdentifier);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "taxIdentifier", nulls = Nulls.SKIP)
        public _FinalStage taxIdentifier(Optional<String> taxIdentifier) {
            this.taxIdentifier = taxIdentifier;
            return this;
        }

        @java.lang.Override
        public _FinalStage taxResidenceCountry(CountryCode taxResidenceCountry) {
            this.taxResidenceCountry = Optional.ofNullable(taxResidenceCountry);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "taxResidenceCountry", nulls = Nulls.SKIP)
        public _FinalStage taxResidenceCountry(Optional<CountryCode> taxResidenceCountry) {
            this.taxResidenceCountry = taxResidenceCountry;
            return this;
        }

        @java.lang.Override
        public CompanyRegistrationDetails build() {
            return new CompanyRegistrationDetails(
                    registrationIdentifier,
                    registrationCountry,
                    taxResidenceCountry,
                    taxIdentifier,
                    legalEntityType,
                    dateOfRegistration,
                    tags,
                    additionalProperties);
        }
    }
}
