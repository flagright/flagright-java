/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flagright.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.flagright.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = Date.Builder.class)
public final class Date {
    private final double day;

    private final double month;

    private final double year;

    private final Map<String, Object> additionalProperties;

    private Date(double day, double month, double year, Map<String, Object> additionalProperties) {
        this.day = day;
        this.month = month;
        this.year = year;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Day of date
     */
    @JsonProperty("day")
    public double getDay() {
        return day;
    }

    /**
     * @return Month of date
     */
    @JsonProperty("month")
    public double getMonth() {
        return month;
    }

    /**
     * @return Year of date
     */
    @JsonProperty("year")
    public double getYear() {
        return year;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Date && equalTo((Date) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Date other) {
        return day == other.day && month == other.month && year == other.year;
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.day, this.month, this.year);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static DayStage builder() {
        return new Builder();
    }

    public interface DayStage {
        MonthStage day(double day);

        Builder from(Date other);
    }

    public interface MonthStage {
        YearStage month(double month);
    }

    public interface YearStage {
        _FinalStage year(double year);
    }

    public interface _FinalStage {
        Date build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements DayStage, MonthStage, YearStage, _FinalStage {
        private double day;

        private double month;

        private double year;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(Date other) {
            day(other.getDay());
            month(other.getMonth());
            year(other.getYear());
            return this;
        }

        /**
         * <p>Day of date</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("day")
        public MonthStage day(double day) {
            this.day = day;
            return this;
        }

        /**
         * <p>Month of date</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("month")
        public YearStage month(double month) {
            this.month = month;
            return this;
        }

        /**
         * <p>Year of date</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("year")
        public _FinalStage year(double year) {
            this.year = year;
            return this;
        }

        @java.lang.Override
        public Date build() {
            return new Date(day, month, year, additionalProperties);
        }
    }
}
