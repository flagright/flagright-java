/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flagright.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.flagright.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = TransactionUpdatable.Builder.class)
public final class TransactionUpdatable {
    private final Optional<TransactionAmountDetails> originAmountDetails;

    private final Optional<TransactionAmountDetails> destinationAmountDetails;

    private final Optional<TransactionUpdatableOriginPaymentDetails> originPaymentDetails;

    private final Optional<TransactionUpdatableDestinationPaymentDetails> destinationPaymentDetails;

    private final Optional<OriginFundsInfo> originFundsInfo;

    private final Optional<List<String>> relatedTransactionIds;

    private final Optional<String> productType;

    private final Optional<Boolean> promotionCodeUsed;

    private final Optional<String> reference;

    private final Optional<DeviceData> originDeviceData;

    private final Optional<DeviceData> destinationDeviceData;

    private final Optional<List<Tag>> tags;

    private final Optional<Double> updateCount;

    private final Map<String, Object> additionalProperties;

    private TransactionUpdatable(
            Optional<TransactionAmountDetails> originAmountDetails,
            Optional<TransactionAmountDetails> destinationAmountDetails,
            Optional<TransactionUpdatableOriginPaymentDetails> originPaymentDetails,
            Optional<TransactionUpdatableDestinationPaymentDetails> destinationPaymentDetails,
            Optional<OriginFundsInfo> originFundsInfo,
            Optional<List<String>> relatedTransactionIds,
            Optional<String> productType,
            Optional<Boolean> promotionCodeUsed,
            Optional<String> reference,
            Optional<DeviceData> originDeviceData,
            Optional<DeviceData> destinationDeviceData,
            Optional<List<Tag>> tags,
            Optional<Double> updateCount,
            Map<String, Object> additionalProperties) {
        this.originAmountDetails = originAmountDetails;
        this.destinationAmountDetails = destinationAmountDetails;
        this.originPaymentDetails = originPaymentDetails;
        this.destinationPaymentDetails = destinationPaymentDetails;
        this.originFundsInfo = originFundsInfo;
        this.relatedTransactionIds = relatedTransactionIds;
        this.productType = productType;
        this.promotionCodeUsed = promotionCodeUsed;
        this.reference = reference;
        this.originDeviceData = originDeviceData;
        this.destinationDeviceData = destinationDeviceData;
        this.tags = tags;
        this.updateCount = updateCount;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("originAmountDetails")
    public Optional<TransactionAmountDetails> getOriginAmountDetails() {
        return originAmountDetails;
    }

    @JsonProperty("destinationAmountDetails")
    public Optional<TransactionAmountDetails> getDestinationAmountDetails() {
        return destinationAmountDetails;
    }

    /**
     * @return Payment details of the origin. It can be a bank account number, wallet ID, card fingerprint etc.
     */
    @JsonProperty("originPaymentDetails")
    public Optional<TransactionUpdatableOriginPaymentDetails> getOriginPaymentDetails() {
        return originPaymentDetails;
    }

    @JsonProperty("destinationPaymentDetails")
    public Optional<TransactionUpdatableDestinationPaymentDetails> getDestinationPaymentDetails() {
        return destinationPaymentDetails;
    }

    @JsonProperty("originFundsInfo")
    public Optional<OriginFundsInfo> getOriginFundsInfo() {
        return originFundsInfo;
    }

    /**
     * @return IDs of transactions related to this transaction. Ex: refund, split bills
     */
    @JsonProperty("relatedTransactionIds")
    public Optional<List<String>> getRelatedTransactionIds() {
        return relatedTransactionIds;
    }

    /**
     * @return Type of produce being used by the consumer (ex wallets, payments etc)
     */
    @JsonProperty("productType")
    public Optional<String> getProductType() {
        return productType;
    }

    /**
     * @return Whether a promotion code was used or not the transaction
     */
    @JsonProperty("promotionCodeUsed")
    public Optional<Boolean> getPromotionCodeUsed() {
        return promotionCodeUsed;
    }

    /**
     * @return Reference field for the transaction indicating the purpose of the transaction etc.
     */
    @JsonProperty("reference")
    public Optional<String> getReference() {
        return reference;
    }

    @JsonProperty("originDeviceData")
    public Optional<DeviceData> getOriginDeviceData() {
        return originDeviceData;
    }

    @JsonProperty("destinationDeviceData")
    public Optional<DeviceData> getDestinationDeviceData() {
        return destinationDeviceData;
    }

    /**
     * @return Additional information that can be added via tags
     */
    @JsonProperty("tags")
    public Optional<List<Tag>> getTags() {
        return tags;
    }

    @JsonProperty("updateCount")
    public Optional<Double> getUpdateCount() {
        return updateCount;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof TransactionUpdatable && equalTo((TransactionUpdatable) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(TransactionUpdatable other) {
        return originAmountDetails.equals(other.originAmountDetails)
                && destinationAmountDetails.equals(other.destinationAmountDetails)
                && originPaymentDetails.equals(other.originPaymentDetails)
                && destinationPaymentDetails.equals(other.destinationPaymentDetails)
                && originFundsInfo.equals(other.originFundsInfo)
                && relatedTransactionIds.equals(other.relatedTransactionIds)
                && productType.equals(other.productType)
                && promotionCodeUsed.equals(other.promotionCodeUsed)
                && reference.equals(other.reference)
                && originDeviceData.equals(other.originDeviceData)
                && destinationDeviceData.equals(other.destinationDeviceData)
                && tags.equals(other.tags)
                && updateCount.equals(other.updateCount);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.originAmountDetails,
                this.destinationAmountDetails,
                this.originPaymentDetails,
                this.destinationPaymentDetails,
                this.originFundsInfo,
                this.relatedTransactionIds,
                this.productType,
                this.promotionCodeUsed,
                this.reference,
                this.originDeviceData,
                this.destinationDeviceData,
                this.tags,
                this.updateCount);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<TransactionAmountDetails> originAmountDetails = Optional.empty();

        private Optional<TransactionAmountDetails> destinationAmountDetails = Optional.empty();

        private Optional<TransactionUpdatableOriginPaymentDetails> originPaymentDetails = Optional.empty();

        private Optional<TransactionUpdatableDestinationPaymentDetails> destinationPaymentDetails = Optional.empty();

        private Optional<OriginFundsInfo> originFundsInfo = Optional.empty();

        private Optional<List<String>> relatedTransactionIds = Optional.empty();

        private Optional<String> productType = Optional.empty();

        private Optional<Boolean> promotionCodeUsed = Optional.empty();

        private Optional<String> reference = Optional.empty();

        private Optional<DeviceData> originDeviceData = Optional.empty();

        private Optional<DeviceData> destinationDeviceData = Optional.empty();

        private Optional<List<Tag>> tags = Optional.empty();

        private Optional<Double> updateCount = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(TransactionUpdatable other) {
            originAmountDetails(other.getOriginAmountDetails());
            destinationAmountDetails(other.getDestinationAmountDetails());
            originPaymentDetails(other.getOriginPaymentDetails());
            destinationPaymentDetails(other.getDestinationPaymentDetails());
            originFundsInfo(other.getOriginFundsInfo());
            relatedTransactionIds(other.getRelatedTransactionIds());
            productType(other.getProductType());
            promotionCodeUsed(other.getPromotionCodeUsed());
            reference(other.getReference());
            originDeviceData(other.getOriginDeviceData());
            destinationDeviceData(other.getDestinationDeviceData());
            tags(other.getTags());
            updateCount(other.getUpdateCount());
            return this;
        }

        @JsonSetter(value = "originAmountDetails", nulls = Nulls.SKIP)
        public Builder originAmountDetails(Optional<TransactionAmountDetails> originAmountDetails) {
            this.originAmountDetails = originAmountDetails;
            return this;
        }

        public Builder originAmountDetails(TransactionAmountDetails originAmountDetails) {
            this.originAmountDetails = Optional.ofNullable(originAmountDetails);
            return this;
        }

        @JsonSetter(value = "destinationAmountDetails", nulls = Nulls.SKIP)
        public Builder destinationAmountDetails(Optional<TransactionAmountDetails> destinationAmountDetails) {
            this.destinationAmountDetails = destinationAmountDetails;
            return this;
        }

        public Builder destinationAmountDetails(TransactionAmountDetails destinationAmountDetails) {
            this.destinationAmountDetails = Optional.ofNullable(destinationAmountDetails);
            return this;
        }

        @JsonSetter(value = "originPaymentDetails", nulls = Nulls.SKIP)
        public Builder originPaymentDetails(Optional<TransactionUpdatableOriginPaymentDetails> originPaymentDetails) {
            this.originPaymentDetails = originPaymentDetails;
            return this;
        }

        public Builder originPaymentDetails(TransactionUpdatableOriginPaymentDetails originPaymentDetails) {
            this.originPaymentDetails = Optional.ofNullable(originPaymentDetails);
            return this;
        }

        @JsonSetter(value = "destinationPaymentDetails", nulls = Nulls.SKIP)
        public Builder destinationPaymentDetails(
                Optional<TransactionUpdatableDestinationPaymentDetails> destinationPaymentDetails) {
            this.destinationPaymentDetails = destinationPaymentDetails;
            return this;
        }

        public Builder destinationPaymentDetails(
                TransactionUpdatableDestinationPaymentDetails destinationPaymentDetails) {
            this.destinationPaymentDetails = Optional.ofNullable(destinationPaymentDetails);
            return this;
        }

        @JsonSetter(value = "originFundsInfo", nulls = Nulls.SKIP)
        public Builder originFundsInfo(Optional<OriginFundsInfo> originFundsInfo) {
            this.originFundsInfo = originFundsInfo;
            return this;
        }

        public Builder originFundsInfo(OriginFundsInfo originFundsInfo) {
            this.originFundsInfo = Optional.ofNullable(originFundsInfo);
            return this;
        }

        @JsonSetter(value = "relatedTransactionIds", nulls = Nulls.SKIP)
        public Builder relatedTransactionIds(Optional<List<String>> relatedTransactionIds) {
            this.relatedTransactionIds = relatedTransactionIds;
            return this;
        }

        public Builder relatedTransactionIds(List<String> relatedTransactionIds) {
            this.relatedTransactionIds = Optional.ofNullable(relatedTransactionIds);
            return this;
        }

        @JsonSetter(value = "productType", nulls = Nulls.SKIP)
        public Builder productType(Optional<String> productType) {
            this.productType = productType;
            return this;
        }

        public Builder productType(String productType) {
            this.productType = Optional.ofNullable(productType);
            return this;
        }

        @JsonSetter(value = "promotionCodeUsed", nulls = Nulls.SKIP)
        public Builder promotionCodeUsed(Optional<Boolean> promotionCodeUsed) {
            this.promotionCodeUsed = promotionCodeUsed;
            return this;
        }

        public Builder promotionCodeUsed(Boolean promotionCodeUsed) {
            this.promotionCodeUsed = Optional.ofNullable(promotionCodeUsed);
            return this;
        }

        @JsonSetter(value = "reference", nulls = Nulls.SKIP)
        public Builder reference(Optional<String> reference) {
            this.reference = reference;
            return this;
        }

        public Builder reference(String reference) {
            this.reference = Optional.ofNullable(reference);
            return this;
        }

        @JsonSetter(value = "originDeviceData", nulls = Nulls.SKIP)
        public Builder originDeviceData(Optional<DeviceData> originDeviceData) {
            this.originDeviceData = originDeviceData;
            return this;
        }

        public Builder originDeviceData(DeviceData originDeviceData) {
            this.originDeviceData = Optional.ofNullable(originDeviceData);
            return this;
        }

        @JsonSetter(value = "destinationDeviceData", nulls = Nulls.SKIP)
        public Builder destinationDeviceData(Optional<DeviceData> destinationDeviceData) {
            this.destinationDeviceData = destinationDeviceData;
            return this;
        }

        public Builder destinationDeviceData(DeviceData destinationDeviceData) {
            this.destinationDeviceData = Optional.ofNullable(destinationDeviceData);
            return this;
        }

        @JsonSetter(value = "tags", nulls = Nulls.SKIP)
        public Builder tags(Optional<List<Tag>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder tags(List<Tag> tags) {
            this.tags = Optional.ofNullable(tags);
            return this;
        }

        @JsonSetter(value = "updateCount", nulls = Nulls.SKIP)
        public Builder updateCount(Optional<Double> updateCount) {
            this.updateCount = updateCount;
            return this;
        }

        public Builder updateCount(Double updateCount) {
            this.updateCount = Optional.ofNullable(updateCount);
            return this;
        }

        public TransactionUpdatable build() {
            return new TransactionUpdatable(
                    originAmountDetails,
                    destinationAmountDetails,
                    originPaymentDetails,
                    destinationPaymentDetails,
                    originFundsInfo,
                    relatedTransactionIds,
                    productType,
                    promotionCodeUsed,
                    reference,
                    originDeviceData,
                    destinationDeviceData,
                    tags,
                    updateCount,
                    additionalProperties);
        }
    }
}
