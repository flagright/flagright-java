/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flagright.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.flagright.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = Transaction.Builder.class)
public final class Transaction {
    private final String type;

    private final String transactionId;

    private final double timestamp;

    private final Optional<String> originUserId;

    private final Optional<String> destinationUserId;

    private final Optional<TransactionState> transactionState;

    private final Optional<TransactionAmountDetails> originAmountDetails;

    private final Optional<TransactionAmountDetails> destinationAmountDetails;

    private final Optional<TransactionOriginPaymentDetails> originPaymentDetails;

    private final Optional<TransactionDestinationPaymentDetails> destinationPaymentDetails;

    private final Optional<OriginFundsInfo> originFundsInfo;

    private final Optional<List<String>> relatedTransactionIds;

    private final Optional<String> productType;

    private final Optional<Boolean> promotionCodeUsed;

    private final Optional<String> reference;

    private final Optional<DeviceData> originDeviceData;

    private final Optional<DeviceData> destinationDeviceData;

    private final Optional<List<Tag>> tags;

    private final Optional<Double> updateCount;

    private final Map<String, Object> additionalProperties;

    private Transaction(
            String type,
            String transactionId,
            double timestamp,
            Optional<String> originUserId,
            Optional<String> destinationUserId,
            Optional<TransactionState> transactionState,
            Optional<TransactionAmountDetails> originAmountDetails,
            Optional<TransactionAmountDetails> destinationAmountDetails,
            Optional<TransactionOriginPaymentDetails> originPaymentDetails,
            Optional<TransactionDestinationPaymentDetails> destinationPaymentDetails,
            Optional<OriginFundsInfo> originFundsInfo,
            Optional<List<String>> relatedTransactionIds,
            Optional<String> productType,
            Optional<Boolean> promotionCodeUsed,
            Optional<String> reference,
            Optional<DeviceData> originDeviceData,
            Optional<DeviceData> destinationDeviceData,
            Optional<List<Tag>> tags,
            Optional<Double> updateCount,
            Map<String, Object> additionalProperties) {
        this.type = type;
        this.transactionId = transactionId;
        this.timestamp = timestamp;
        this.originUserId = originUserId;
        this.destinationUserId = destinationUserId;
        this.transactionState = transactionState;
        this.originAmountDetails = originAmountDetails;
        this.destinationAmountDetails = destinationAmountDetails;
        this.originPaymentDetails = originPaymentDetails;
        this.destinationPaymentDetails = destinationPaymentDetails;
        this.originFundsInfo = originFundsInfo;
        this.relatedTransactionIds = relatedTransactionIds;
        this.productType = productType;
        this.promotionCodeUsed = promotionCodeUsed;
        this.reference = reference;
        this.originDeviceData = originDeviceData;
        this.destinationDeviceData = destinationDeviceData;
        this.tags = tags;
        this.updateCount = updateCount;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Type of transaction (ex: DEPOSIT, WITHDRAWAL, TRANSFER, EXTERNAL_PAYMENT, REFUND, OTHER)
     */
    @JsonProperty("type")
    public String getType() {
        return type;
    }

    /**
     * @return Unique transaction identifier
     */
    @JsonProperty("transactionId")
    public String getTransactionId() {
        return transactionId;
    }

    /**
     * @return Timestamp of when transaction took place
     */
    @JsonProperty("timestamp")
    public double getTimestamp() {
        return timestamp;
    }

    /**
     * @return UserId for where the transaction originates from
     */
    @JsonProperty("originUserId")
    public Optional<String> getOriginUserId() {
        return originUserId;
    }

    /**
     * @return UserId for transaction's destination. In other words, where the value is being transferred to.
     */
    @JsonProperty("destinationUserId")
    public Optional<String> getDestinationUserId() {
        return destinationUserId;
    }

    @JsonProperty("transactionState")
    public Optional<TransactionState> getTransactionState() {
        return transactionState;
    }

    @JsonProperty("originAmountDetails")
    public Optional<TransactionAmountDetails> getOriginAmountDetails() {
        return originAmountDetails;
    }

    @JsonProperty("destinationAmountDetails")
    public Optional<TransactionAmountDetails> getDestinationAmountDetails() {
        return destinationAmountDetails;
    }

    /**
     * @return Payment details of the origin. It can be a bank account number, wallet ID, card fingerprint etc.
     */
    @JsonProperty("originPaymentDetails")
    public Optional<TransactionOriginPaymentDetails> getOriginPaymentDetails() {
        return originPaymentDetails;
    }

    @JsonProperty("destinationPaymentDetails")
    public Optional<TransactionDestinationPaymentDetails> getDestinationPaymentDetails() {
        return destinationPaymentDetails;
    }

    @JsonProperty("originFundsInfo")
    public Optional<OriginFundsInfo> getOriginFundsInfo() {
        return originFundsInfo;
    }

    /**
     * @return IDs of transactions related to this transaction. Ex: refund, split bills
     */
    @JsonProperty("relatedTransactionIds")
    public Optional<List<String>> getRelatedTransactionIds() {
        return relatedTransactionIds;
    }

    /**
     * @return Type of produce being used by the consumer (ex wallets, payments etc)
     */
    @JsonProperty("productType")
    public Optional<String> getProductType() {
        return productType;
    }

    /**
     * @return Whether a promotion code was used or not the transaction
     */
    @JsonProperty("promotionCodeUsed")
    public Optional<Boolean> getPromotionCodeUsed() {
        return promotionCodeUsed;
    }

    /**
     * @return Reference field for the transaction indicating the purpose of the transaction etc.
     */
    @JsonProperty("reference")
    public Optional<String> getReference() {
        return reference;
    }

    @JsonProperty("originDeviceData")
    public Optional<DeviceData> getOriginDeviceData() {
        return originDeviceData;
    }

    @JsonProperty("destinationDeviceData")
    public Optional<DeviceData> getDestinationDeviceData() {
        return destinationDeviceData;
    }

    /**
     * @return Additional information that can be added via tags
     */
    @JsonProperty("tags")
    public Optional<List<Tag>> getTags() {
        return tags;
    }

    @JsonProperty("updateCount")
    public Optional<Double> getUpdateCount() {
        return updateCount;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Transaction && equalTo((Transaction) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Transaction other) {
        return type.equals(other.type)
                && transactionId.equals(other.transactionId)
                && timestamp == other.timestamp
                && originUserId.equals(other.originUserId)
                && destinationUserId.equals(other.destinationUserId)
                && transactionState.equals(other.transactionState)
                && originAmountDetails.equals(other.originAmountDetails)
                && destinationAmountDetails.equals(other.destinationAmountDetails)
                && originPaymentDetails.equals(other.originPaymentDetails)
                && destinationPaymentDetails.equals(other.destinationPaymentDetails)
                && originFundsInfo.equals(other.originFundsInfo)
                && relatedTransactionIds.equals(other.relatedTransactionIds)
                && productType.equals(other.productType)
                && promotionCodeUsed.equals(other.promotionCodeUsed)
                && reference.equals(other.reference)
                && originDeviceData.equals(other.originDeviceData)
                && destinationDeviceData.equals(other.destinationDeviceData)
                && tags.equals(other.tags)
                && updateCount.equals(other.updateCount);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.type,
                this.transactionId,
                this.timestamp,
                this.originUserId,
                this.destinationUserId,
                this.transactionState,
                this.originAmountDetails,
                this.destinationAmountDetails,
                this.originPaymentDetails,
                this.destinationPaymentDetails,
                this.originFundsInfo,
                this.relatedTransactionIds,
                this.productType,
                this.promotionCodeUsed,
                this.reference,
                this.originDeviceData,
                this.destinationDeviceData,
                this.tags,
                this.updateCount);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static TypeStage builder() {
        return new Builder();
    }

    public interface TypeStage {
        TransactionIdStage type(@NotNull String type);

        Builder from(Transaction other);
    }

    public interface TransactionIdStage {
        TimestampStage transactionId(@NotNull String transactionId);
    }

    public interface TimestampStage {
        _FinalStage timestamp(double timestamp);
    }

    public interface _FinalStage {
        Transaction build();

        _FinalStage originUserId(Optional<String> originUserId);

        _FinalStage originUserId(String originUserId);

        _FinalStage destinationUserId(Optional<String> destinationUserId);

        _FinalStage destinationUserId(String destinationUserId);

        _FinalStage transactionState(Optional<TransactionState> transactionState);

        _FinalStage transactionState(TransactionState transactionState);

        _FinalStage originAmountDetails(Optional<TransactionAmountDetails> originAmountDetails);

        _FinalStage originAmountDetails(TransactionAmountDetails originAmountDetails);

        _FinalStage destinationAmountDetails(Optional<TransactionAmountDetails> destinationAmountDetails);

        _FinalStage destinationAmountDetails(TransactionAmountDetails destinationAmountDetails);

        _FinalStage originPaymentDetails(Optional<TransactionOriginPaymentDetails> originPaymentDetails);

        _FinalStage originPaymentDetails(TransactionOriginPaymentDetails originPaymentDetails);

        _FinalStage destinationPaymentDetails(Optional<TransactionDestinationPaymentDetails> destinationPaymentDetails);

        _FinalStage destinationPaymentDetails(TransactionDestinationPaymentDetails destinationPaymentDetails);

        _FinalStage originFundsInfo(Optional<OriginFundsInfo> originFundsInfo);

        _FinalStage originFundsInfo(OriginFundsInfo originFundsInfo);

        _FinalStage relatedTransactionIds(Optional<List<String>> relatedTransactionIds);

        _FinalStage relatedTransactionIds(List<String> relatedTransactionIds);

        _FinalStage productType(Optional<String> productType);

        _FinalStage productType(String productType);

        _FinalStage promotionCodeUsed(Optional<Boolean> promotionCodeUsed);

        _FinalStage promotionCodeUsed(Boolean promotionCodeUsed);

        _FinalStage reference(Optional<String> reference);

        _FinalStage reference(String reference);

        _FinalStage originDeviceData(Optional<DeviceData> originDeviceData);

        _FinalStage originDeviceData(DeviceData originDeviceData);

        _FinalStage destinationDeviceData(Optional<DeviceData> destinationDeviceData);

        _FinalStage destinationDeviceData(DeviceData destinationDeviceData);

        _FinalStage tags(Optional<List<Tag>> tags);

        _FinalStage tags(List<Tag> tags);

        _FinalStage updateCount(Optional<Double> updateCount);

        _FinalStage updateCount(Double updateCount);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements TypeStage, TransactionIdStage, TimestampStage, _FinalStage {
        private String type;

        private String transactionId;

        private double timestamp;

        private Optional<Double> updateCount = Optional.empty();

        private Optional<List<Tag>> tags = Optional.empty();

        private Optional<DeviceData> destinationDeviceData = Optional.empty();

        private Optional<DeviceData> originDeviceData = Optional.empty();

        private Optional<String> reference = Optional.empty();

        private Optional<Boolean> promotionCodeUsed = Optional.empty();

        private Optional<String> productType = Optional.empty();

        private Optional<List<String>> relatedTransactionIds = Optional.empty();

        private Optional<OriginFundsInfo> originFundsInfo = Optional.empty();

        private Optional<TransactionDestinationPaymentDetails> destinationPaymentDetails = Optional.empty();

        private Optional<TransactionOriginPaymentDetails> originPaymentDetails = Optional.empty();

        private Optional<TransactionAmountDetails> destinationAmountDetails = Optional.empty();

        private Optional<TransactionAmountDetails> originAmountDetails = Optional.empty();

        private Optional<TransactionState> transactionState = Optional.empty();

        private Optional<String> destinationUserId = Optional.empty();

        private Optional<String> originUserId = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(Transaction other) {
            type(other.getType());
            transactionId(other.getTransactionId());
            timestamp(other.getTimestamp());
            originUserId(other.getOriginUserId());
            destinationUserId(other.getDestinationUserId());
            transactionState(other.getTransactionState());
            originAmountDetails(other.getOriginAmountDetails());
            destinationAmountDetails(other.getDestinationAmountDetails());
            originPaymentDetails(other.getOriginPaymentDetails());
            destinationPaymentDetails(other.getDestinationPaymentDetails());
            originFundsInfo(other.getOriginFundsInfo());
            relatedTransactionIds(other.getRelatedTransactionIds());
            productType(other.getProductType());
            promotionCodeUsed(other.getPromotionCodeUsed());
            reference(other.getReference());
            originDeviceData(other.getOriginDeviceData());
            destinationDeviceData(other.getDestinationDeviceData());
            tags(other.getTags());
            updateCount(other.getUpdateCount());
            return this;
        }

        /**
         * <p>Type of transaction (ex: DEPOSIT, WITHDRAWAL, TRANSFER, EXTERNAL_PAYMENT, REFUND, OTHER)</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("type")
        public TransactionIdStage type(@NotNull String type) {
            this.type = Objects.requireNonNull(type, "type must not be null");
            return this;
        }

        /**
         * <p>Unique transaction identifier</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("transactionId")
        public TimestampStage transactionId(@NotNull String transactionId) {
            this.transactionId = Objects.requireNonNull(transactionId, "transactionId must not be null");
            return this;
        }

        /**
         * <p>Timestamp of when transaction took place</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("timestamp")
        public _FinalStage timestamp(double timestamp) {
            this.timestamp = timestamp;
            return this;
        }

        @java.lang.Override
        public _FinalStage updateCount(Double updateCount) {
            this.updateCount = Optional.ofNullable(updateCount);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "updateCount", nulls = Nulls.SKIP)
        public _FinalStage updateCount(Optional<Double> updateCount) {
            this.updateCount = updateCount;
            return this;
        }

        /**
         * <p>Additional information that can be added via tags</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage tags(List<Tag> tags) {
            this.tags = Optional.ofNullable(tags);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "tags", nulls = Nulls.SKIP)
        public _FinalStage tags(Optional<List<Tag>> tags) {
            this.tags = tags;
            return this;
        }

        @java.lang.Override
        public _FinalStage destinationDeviceData(DeviceData destinationDeviceData) {
            this.destinationDeviceData = Optional.ofNullable(destinationDeviceData);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "destinationDeviceData", nulls = Nulls.SKIP)
        public _FinalStage destinationDeviceData(Optional<DeviceData> destinationDeviceData) {
            this.destinationDeviceData = destinationDeviceData;
            return this;
        }

        @java.lang.Override
        public _FinalStage originDeviceData(DeviceData originDeviceData) {
            this.originDeviceData = Optional.ofNullable(originDeviceData);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "originDeviceData", nulls = Nulls.SKIP)
        public _FinalStage originDeviceData(Optional<DeviceData> originDeviceData) {
            this.originDeviceData = originDeviceData;
            return this;
        }

        /**
         * <p>Reference field for the transaction indicating the purpose of the transaction etc.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage reference(String reference) {
            this.reference = Optional.ofNullable(reference);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "reference", nulls = Nulls.SKIP)
        public _FinalStage reference(Optional<String> reference) {
            this.reference = reference;
            return this;
        }

        /**
         * <p>Whether a promotion code was used or not the transaction</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage promotionCodeUsed(Boolean promotionCodeUsed) {
            this.promotionCodeUsed = Optional.ofNullable(promotionCodeUsed);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "promotionCodeUsed", nulls = Nulls.SKIP)
        public _FinalStage promotionCodeUsed(Optional<Boolean> promotionCodeUsed) {
            this.promotionCodeUsed = promotionCodeUsed;
            return this;
        }

        /**
         * <p>Type of produce being used by the consumer (ex wallets, payments etc)</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage productType(String productType) {
            this.productType = Optional.ofNullable(productType);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "productType", nulls = Nulls.SKIP)
        public _FinalStage productType(Optional<String> productType) {
            this.productType = productType;
            return this;
        }

        /**
         * <p>IDs of transactions related to this transaction. Ex: refund, split bills</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage relatedTransactionIds(List<String> relatedTransactionIds) {
            this.relatedTransactionIds = Optional.ofNullable(relatedTransactionIds);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "relatedTransactionIds", nulls = Nulls.SKIP)
        public _FinalStage relatedTransactionIds(Optional<List<String>> relatedTransactionIds) {
            this.relatedTransactionIds = relatedTransactionIds;
            return this;
        }

        @java.lang.Override
        public _FinalStage originFundsInfo(OriginFundsInfo originFundsInfo) {
            this.originFundsInfo = Optional.ofNullable(originFundsInfo);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "originFundsInfo", nulls = Nulls.SKIP)
        public _FinalStage originFundsInfo(Optional<OriginFundsInfo> originFundsInfo) {
            this.originFundsInfo = originFundsInfo;
            return this;
        }

        @java.lang.Override
        public _FinalStage destinationPaymentDetails(TransactionDestinationPaymentDetails destinationPaymentDetails) {
            this.destinationPaymentDetails = Optional.ofNullable(destinationPaymentDetails);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "destinationPaymentDetails", nulls = Nulls.SKIP)
        public _FinalStage destinationPaymentDetails(
                Optional<TransactionDestinationPaymentDetails> destinationPaymentDetails) {
            this.destinationPaymentDetails = destinationPaymentDetails;
            return this;
        }

        /**
         * <p>Payment details of the origin. It can be a bank account number, wallet ID, card fingerprint etc.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage originPaymentDetails(TransactionOriginPaymentDetails originPaymentDetails) {
            this.originPaymentDetails = Optional.ofNullable(originPaymentDetails);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "originPaymentDetails", nulls = Nulls.SKIP)
        public _FinalStage originPaymentDetails(Optional<TransactionOriginPaymentDetails> originPaymentDetails) {
            this.originPaymentDetails = originPaymentDetails;
            return this;
        }

        @java.lang.Override
        public _FinalStage destinationAmountDetails(TransactionAmountDetails destinationAmountDetails) {
            this.destinationAmountDetails = Optional.ofNullable(destinationAmountDetails);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "destinationAmountDetails", nulls = Nulls.SKIP)
        public _FinalStage destinationAmountDetails(Optional<TransactionAmountDetails> destinationAmountDetails) {
            this.destinationAmountDetails = destinationAmountDetails;
            return this;
        }

        @java.lang.Override
        public _FinalStage originAmountDetails(TransactionAmountDetails originAmountDetails) {
            this.originAmountDetails = Optional.ofNullable(originAmountDetails);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "originAmountDetails", nulls = Nulls.SKIP)
        public _FinalStage originAmountDetails(Optional<TransactionAmountDetails> originAmountDetails) {
            this.originAmountDetails = originAmountDetails;
            return this;
        }

        @java.lang.Override
        public _FinalStage transactionState(TransactionState transactionState) {
            this.transactionState = Optional.ofNullable(transactionState);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "transactionState", nulls = Nulls.SKIP)
        public _FinalStage transactionState(Optional<TransactionState> transactionState) {
            this.transactionState = transactionState;
            return this;
        }

        /**
         * <p>UserId for transaction's destination. In other words, where the value is being transferred to.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage destinationUserId(String destinationUserId) {
            this.destinationUserId = Optional.ofNullable(destinationUserId);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "destinationUserId", nulls = Nulls.SKIP)
        public _FinalStage destinationUserId(Optional<String> destinationUserId) {
            this.destinationUserId = destinationUserId;
            return this;
        }

        /**
         * <p>UserId for where the transaction originates from</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage originUserId(String originUserId) {
            this.originUserId = Optional.ofNullable(originUserId);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "originUserId", nulls = Nulls.SKIP)
        public _FinalStage originUserId(Optional<String> originUserId) {
            this.originUserId = originUserId;
            return this;
        }

        @java.lang.Override
        public Transaction build() {
            return new Transaction(
                    type,
                    transactionId,
                    timestamp,
                    originUserId,
                    destinationUserId,
                    transactionState,
                    originAmountDetails,
                    destinationAmountDetails,
                    originPaymentDetails,
                    destinationPaymentDetails,
                    originFundsInfo,
                    relatedTransactionIds,
                    productType,
                    promotionCodeUsed,
                    reference,
                    originDeviceData,
                    destinationDeviceData,
                    tags,
                    updateCount,
                    additionalProperties);
        }
    }
}
