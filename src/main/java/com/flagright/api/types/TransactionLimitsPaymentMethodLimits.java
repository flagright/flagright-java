/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flagright.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.flagright.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = TransactionLimitsPaymentMethodLimits.Builder.class)
public final class TransactionLimitsPaymentMethodLimits {
    private final Optional<TransactionLimit> ach;

    private final Optional<TransactionLimit> card;

    private final Optional<TransactionLimit> iban;

    private final Optional<TransactionLimit> upi;

    private final Optional<TransactionLimit> genericBankAccount;

    private final Optional<TransactionLimit> mpesa;

    private final Optional<TransactionLimit> swift;

    private final Optional<TransactionLimit> wallet;

    private final Optional<TransactionLimit> check;

    private final Map<String, Object> additionalProperties;

    private TransactionLimitsPaymentMethodLimits(
            Optional<TransactionLimit> ach,
            Optional<TransactionLimit> card,
            Optional<TransactionLimit> iban,
            Optional<TransactionLimit> upi,
            Optional<TransactionLimit> genericBankAccount,
            Optional<TransactionLimit> mpesa,
            Optional<TransactionLimit> swift,
            Optional<TransactionLimit> wallet,
            Optional<TransactionLimit> check,
            Map<String, Object> additionalProperties) {
        this.ach = ach;
        this.card = card;
        this.iban = iban;
        this.upi = upi;
        this.genericBankAccount = genericBankAccount;
        this.mpesa = mpesa;
        this.swift = swift;
        this.wallet = wallet;
        this.check = check;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("ACH")
    public Optional<TransactionLimit> getAch() {
        return ach;
    }

    @JsonProperty("CARD")
    public Optional<TransactionLimit> getCard() {
        return card;
    }

    @JsonProperty("IBAN")
    public Optional<TransactionLimit> getIban() {
        return iban;
    }

    @JsonProperty("UPI")
    public Optional<TransactionLimit> getUpi() {
        return upi;
    }

    @JsonProperty("GENERIC_BANK_ACCOUNT")
    public Optional<TransactionLimit> getGenericBankAccount() {
        return genericBankAccount;
    }

    @JsonProperty("MPESA")
    public Optional<TransactionLimit> getMpesa() {
        return mpesa;
    }

    @JsonProperty("SWIFT")
    public Optional<TransactionLimit> getSwift() {
        return swift;
    }

    @JsonProperty("WALLET")
    public Optional<TransactionLimit> getWallet() {
        return wallet;
    }

    @JsonProperty("CHECK")
    public Optional<TransactionLimit> getCheck() {
        return check;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof TransactionLimitsPaymentMethodLimits
                && equalTo((TransactionLimitsPaymentMethodLimits) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(TransactionLimitsPaymentMethodLimits other) {
        return ach.equals(other.ach)
                && card.equals(other.card)
                && iban.equals(other.iban)
                && upi.equals(other.upi)
                && genericBankAccount.equals(other.genericBankAccount)
                && mpesa.equals(other.mpesa)
                && swift.equals(other.swift)
                && wallet.equals(other.wallet)
                && check.equals(other.check);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.ach,
                this.card,
                this.iban,
                this.upi,
                this.genericBankAccount,
                this.mpesa,
                this.swift,
                this.wallet,
                this.check);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<TransactionLimit> ach = Optional.empty();

        private Optional<TransactionLimit> card = Optional.empty();

        private Optional<TransactionLimit> iban = Optional.empty();

        private Optional<TransactionLimit> upi = Optional.empty();

        private Optional<TransactionLimit> genericBankAccount = Optional.empty();

        private Optional<TransactionLimit> mpesa = Optional.empty();

        private Optional<TransactionLimit> swift = Optional.empty();

        private Optional<TransactionLimit> wallet = Optional.empty();

        private Optional<TransactionLimit> check = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(TransactionLimitsPaymentMethodLimits other) {
            ach(other.getAch());
            card(other.getCard());
            iban(other.getIban());
            upi(other.getUpi());
            genericBankAccount(other.getGenericBankAccount());
            mpesa(other.getMpesa());
            swift(other.getSwift());
            wallet(other.getWallet());
            check(other.getCheck());
            return this;
        }

        @JsonSetter(value = "ACH", nulls = Nulls.SKIP)
        public Builder ach(Optional<TransactionLimit> ach) {
            this.ach = ach;
            return this;
        }

        public Builder ach(TransactionLimit ach) {
            this.ach = Optional.ofNullable(ach);
            return this;
        }

        @JsonSetter(value = "CARD", nulls = Nulls.SKIP)
        public Builder card(Optional<TransactionLimit> card) {
            this.card = card;
            return this;
        }

        public Builder card(TransactionLimit card) {
            this.card = Optional.ofNullable(card);
            return this;
        }

        @JsonSetter(value = "IBAN", nulls = Nulls.SKIP)
        public Builder iban(Optional<TransactionLimit> iban) {
            this.iban = iban;
            return this;
        }

        public Builder iban(TransactionLimit iban) {
            this.iban = Optional.ofNullable(iban);
            return this;
        }

        @JsonSetter(value = "UPI", nulls = Nulls.SKIP)
        public Builder upi(Optional<TransactionLimit> upi) {
            this.upi = upi;
            return this;
        }

        public Builder upi(TransactionLimit upi) {
            this.upi = Optional.ofNullable(upi);
            return this;
        }

        @JsonSetter(value = "GENERIC_BANK_ACCOUNT", nulls = Nulls.SKIP)
        public Builder genericBankAccount(Optional<TransactionLimit> genericBankAccount) {
            this.genericBankAccount = genericBankAccount;
            return this;
        }

        public Builder genericBankAccount(TransactionLimit genericBankAccount) {
            this.genericBankAccount = Optional.ofNullable(genericBankAccount);
            return this;
        }

        @JsonSetter(value = "MPESA", nulls = Nulls.SKIP)
        public Builder mpesa(Optional<TransactionLimit> mpesa) {
            this.mpesa = mpesa;
            return this;
        }

        public Builder mpesa(TransactionLimit mpesa) {
            this.mpesa = Optional.ofNullable(mpesa);
            return this;
        }

        @JsonSetter(value = "SWIFT", nulls = Nulls.SKIP)
        public Builder swift(Optional<TransactionLimit> swift) {
            this.swift = swift;
            return this;
        }

        public Builder swift(TransactionLimit swift) {
            this.swift = Optional.ofNullable(swift);
            return this;
        }

        @JsonSetter(value = "WALLET", nulls = Nulls.SKIP)
        public Builder wallet(Optional<TransactionLimit> wallet) {
            this.wallet = wallet;
            return this;
        }

        public Builder wallet(TransactionLimit wallet) {
            this.wallet = Optional.ofNullable(wallet);
            return this;
        }

        @JsonSetter(value = "CHECK", nulls = Nulls.SKIP)
        public Builder check(Optional<TransactionLimit> check) {
            this.check = check;
            return this;
        }

        public Builder check(TransactionLimit check) {
            this.check = Optional.ofNullable(check);
            return this;
        }

        public TransactionLimitsPaymentMethodLimits build() {
            return new TransactionLimitsPaymentMethodLimits(
                    ach, card, iban, upi, genericBankAccount, mpesa, swift, wallet, check, additionalProperties);
        }
    }
}
