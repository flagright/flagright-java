/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flagright.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.flagright.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CompanyFinancialDetails.Builder.class)
public final class CompanyFinancialDetails {
    private final Optional<Amount> expectedTransactionAmountPerMonth;

    private final Optional<Amount> expectedTurnoverPerMonth;

    private final Optional<List<Tag>> tags;

    private final Map<String, Object> additionalProperties;

    private CompanyFinancialDetails(
            Optional<Amount> expectedTransactionAmountPerMonth,
            Optional<Amount> expectedTurnoverPerMonth,
            Optional<List<Tag>> tags,
            Map<String, Object> additionalProperties) {
        this.expectedTransactionAmountPerMonth = expectedTransactionAmountPerMonth;
        this.expectedTurnoverPerMonth = expectedTurnoverPerMonth;
        this.tags = tags;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("expectedTransactionAmountPerMonth")
    public Optional<Amount> getExpectedTransactionAmountPerMonth() {
        return expectedTransactionAmountPerMonth;
    }

    @JsonProperty("expectedTurnoverPerMonth")
    public Optional<Amount> getExpectedTurnoverPerMonth() {
        return expectedTurnoverPerMonth;
    }

    /**
     * @return Additional information that can be added via tags
     */
    @JsonProperty("tags")
    public Optional<List<Tag>> getTags() {
        return tags;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CompanyFinancialDetails && equalTo((CompanyFinancialDetails) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CompanyFinancialDetails other) {
        return expectedTransactionAmountPerMonth.equals(other.expectedTransactionAmountPerMonth)
                && expectedTurnoverPerMonth.equals(other.expectedTurnoverPerMonth)
                && tags.equals(other.tags);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.expectedTransactionAmountPerMonth, this.expectedTurnoverPerMonth, this.tags);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Amount> expectedTransactionAmountPerMonth = Optional.empty();

        private Optional<Amount> expectedTurnoverPerMonth = Optional.empty();

        private Optional<List<Tag>> tags = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(CompanyFinancialDetails other) {
            expectedTransactionAmountPerMonth(other.getExpectedTransactionAmountPerMonth());
            expectedTurnoverPerMonth(other.getExpectedTurnoverPerMonth());
            tags(other.getTags());
            return this;
        }

        @JsonSetter(value = "expectedTransactionAmountPerMonth", nulls = Nulls.SKIP)
        public Builder expectedTransactionAmountPerMonth(Optional<Amount> expectedTransactionAmountPerMonth) {
            this.expectedTransactionAmountPerMonth = expectedTransactionAmountPerMonth;
            return this;
        }

        public Builder expectedTransactionAmountPerMonth(Amount expectedTransactionAmountPerMonth) {
            this.expectedTransactionAmountPerMonth = Optional.ofNullable(expectedTransactionAmountPerMonth);
            return this;
        }

        @JsonSetter(value = "expectedTurnoverPerMonth", nulls = Nulls.SKIP)
        public Builder expectedTurnoverPerMonth(Optional<Amount> expectedTurnoverPerMonth) {
            this.expectedTurnoverPerMonth = expectedTurnoverPerMonth;
            return this;
        }

        public Builder expectedTurnoverPerMonth(Amount expectedTurnoverPerMonth) {
            this.expectedTurnoverPerMonth = Optional.ofNullable(expectedTurnoverPerMonth);
            return this;
        }

        @JsonSetter(value = "tags", nulls = Nulls.SKIP)
        public Builder tags(Optional<List<Tag>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder tags(List<Tag> tags) {
            this.tags = Optional.ofNullable(tags);
            return this;
        }

        public CompanyFinancialDetails build() {
            return new CompanyFinancialDetails(
                    expectedTransactionAmountPerMonth, expectedTurnoverPerMonth, tags, additionalProperties);
        }
    }
}
