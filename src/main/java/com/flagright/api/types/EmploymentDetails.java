/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flagright.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.flagright.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = EmploymentDetails.Builder.class)
public final class EmploymentDetails {
    private final Optional<String> employmentSector;

    private final Optional<String> employerName;

    private final Optional<List<String>> businessIndustry;

    private final Map<String, Object> additionalProperties;

    private EmploymentDetails(
            Optional<String> employmentSector,
            Optional<String> employerName,
            Optional<List<String>> businessIndustry,
            Map<String, Object> additionalProperties) {
        this.employmentSector = employmentSector;
        this.employerName = employerName;
        this.businessIndustry = businessIndustry;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Sector of employment
     */
    @JsonProperty("employmentSector")
    public Optional<String> getEmploymentSector() {
        return employmentSector;
    }

    /**
     * @return Name of the employer
     */
    @JsonProperty("employerName")
    public Optional<String> getEmployerName() {
        return employerName;
    }

    /**
     * @return The industry in which the business operates for a business customer
     */
    @JsonProperty("businessIndustry")
    public Optional<List<String>> getBusinessIndustry() {
        return businessIndustry;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof EmploymentDetails && equalTo((EmploymentDetails) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(EmploymentDetails other) {
        return employmentSector.equals(other.employmentSector)
                && employerName.equals(other.employerName)
                && businessIndustry.equals(other.businessIndustry);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.employmentSector, this.employerName, this.businessIndustry);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> employmentSector = Optional.empty();

        private Optional<String> employerName = Optional.empty();

        private Optional<List<String>> businessIndustry = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(EmploymentDetails other) {
            employmentSector(other.getEmploymentSector());
            employerName(other.getEmployerName());
            businessIndustry(other.getBusinessIndustry());
            return this;
        }

        @JsonSetter(value = "employmentSector", nulls = Nulls.SKIP)
        public Builder employmentSector(Optional<String> employmentSector) {
            this.employmentSector = employmentSector;
            return this;
        }

        public Builder employmentSector(String employmentSector) {
            this.employmentSector = Optional.ofNullable(employmentSector);
            return this;
        }

        @JsonSetter(value = "employerName", nulls = Nulls.SKIP)
        public Builder employerName(Optional<String> employerName) {
            this.employerName = employerName;
            return this;
        }

        public Builder employerName(String employerName) {
            this.employerName = Optional.ofNullable(employerName);
            return this;
        }

        @JsonSetter(value = "businessIndustry", nulls = Nulls.SKIP)
        public Builder businessIndustry(Optional<List<String>> businessIndustry) {
            this.businessIndustry = businessIndustry;
            return this;
        }

        public Builder businessIndustry(List<String> businessIndustry) {
            this.businessIndustry = Optional.ofNullable(businessIndustry);
            return this;
        }

        public EmploymentDetails build() {
            return new EmploymentDetails(employmentSector, employerName, businessIndustry, additionalProperties);
        }
    }
}
