/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flagright.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.flagright.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = FalsePositiveDetails.Builder.class)
public final class FalsePositiveDetails {
    private final boolean isFalsePositive;

    private final double confidenceScore;

    private final Map<String, Object> additionalProperties;

    private FalsePositiveDetails(
            boolean isFalsePositive, double confidenceScore, Map<String, Object> additionalProperties) {
        this.isFalsePositive = isFalsePositive;
        this.confidenceScore = confidenceScore;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("isFalsePositive")
    public boolean getIsFalsePositive() {
        return isFalsePositive;
    }

    @JsonProperty("confidenceScore")
    public double getConfidenceScore() {
        return confidenceScore;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof FalsePositiveDetails && equalTo((FalsePositiveDetails) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(FalsePositiveDetails other) {
        return isFalsePositive == other.isFalsePositive && confidenceScore == other.confidenceScore;
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.isFalsePositive, this.confidenceScore);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static IsFalsePositiveStage builder() {
        return new Builder();
    }

    public interface IsFalsePositiveStage {
        ConfidenceScoreStage isFalsePositive(boolean isFalsePositive);

        Builder from(FalsePositiveDetails other);
    }

    public interface ConfidenceScoreStage {
        _FinalStage confidenceScore(double confidenceScore);
    }

    public interface _FinalStage {
        FalsePositiveDetails build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements IsFalsePositiveStage, ConfidenceScoreStage, _FinalStage {
        private boolean isFalsePositive;

        private double confidenceScore;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(FalsePositiveDetails other) {
            isFalsePositive(other.getIsFalsePositive());
            confidenceScore(other.getConfidenceScore());
            return this;
        }

        @java.lang.Override
        @JsonSetter("isFalsePositive")
        public ConfidenceScoreStage isFalsePositive(boolean isFalsePositive) {
            this.isFalsePositive = isFalsePositive;
            return this;
        }

        @java.lang.Override
        @JsonSetter("confidenceScore")
        public _FinalStage confidenceScore(double confidenceScore) {
            this.confidenceScore = confidenceScore;
            return this;
        }

        @java.lang.Override
        public FalsePositiveDetails build() {
            return new FalsePositiveDetails(isFalsePositive, confidenceScore, additionalProperties);
        }
    }
}
