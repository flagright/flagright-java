/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flagright.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.flagright.api.core.ObjectMappers;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = Address.Builder.class)
public final class Address {
    private final List<String> addressLines;

    private final Optional<String> postcode;

    private final Optional<String> city;

    private final Optional<String> state;

    private final Optional<String> country;

    private final Optional<String> addressType;

    private final Optional<List<Tag>> tags;

    private final Map<String, Object> additionalProperties;

    private Address(
            List<String> addressLines,
            Optional<String> postcode,
            Optional<String> city,
            Optional<String> state,
            Optional<String> country,
            Optional<String> addressType,
            Optional<List<Tag>> tags,
            Map<String, Object> additionalProperties) {
        this.addressLines = addressLines;
        this.postcode = postcode;
        this.city = city;
        this.state = state;
        this.country = country;
        this.addressType = addressType;
        this.tags = tags;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Address lines of the user's residence address
     */
    @JsonProperty("addressLines")
    public List<String> getAddressLines() {
        return addressLines;
    }

    /**
     * @return Post code of the user's residence address
     */
    @JsonProperty("postcode")
    public Optional<String> getPostcode() {
        return postcode;
    }

    /**
     * @return City of the user's residence address
     */
    @JsonProperty("city")
    public Optional<String> getCity() {
        return city;
    }

    /**
     * @return State of the user's residence address
     */
    @JsonProperty("state")
    public Optional<String> getState() {
        return state;
    }

    /**
     * @return User's country of residence
     */
    @JsonProperty("country")
    public Optional<String> getCountry() {
        return country;
    }

    /**
     * @return Type of the address (ex - Residential, Postal, etc.)
     */
    @JsonProperty("addressType")
    public Optional<String> getAddressType() {
        return addressType;
    }

    /**
     * @return Additional information that can be added via tags
     */
    @JsonProperty("tags")
    public Optional<List<Tag>> getTags() {
        return tags;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Address && equalTo((Address) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Address other) {
        return addressLines.equals(other.addressLines)
                && postcode.equals(other.postcode)
                && city.equals(other.city)
                && state.equals(other.state)
                && country.equals(other.country)
                && addressType.equals(other.addressType)
                && tags.equals(other.tags);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.addressLines, this.postcode, this.city, this.state, this.country, this.addressType, this.tags);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private List<String> addressLines = new ArrayList<>();

        private Optional<String> postcode = Optional.empty();

        private Optional<String> city = Optional.empty();

        private Optional<String> state = Optional.empty();

        private Optional<String> country = Optional.empty();

        private Optional<String> addressType = Optional.empty();

        private Optional<List<Tag>> tags = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(Address other) {
            addressLines(other.getAddressLines());
            postcode(other.getPostcode());
            city(other.getCity());
            state(other.getState());
            country(other.getCountry());
            addressType(other.getAddressType());
            tags(other.getTags());
            return this;
        }

        @JsonSetter(value = "addressLines", nulls = Nulls.SKIP)
        public Builder addressLines(List<String> addressLines) {
            this.addressLines.clear();
            this.addressLines.addAll(addressLines);
            return this;
        }

        public Builder addAddressLines(String addressLines) {
            this.addressLines.add(addressLines);
            return this;
        }

        public Builder addAllAddressLines(List<String> addressLines) {
            this.addressLines.addAll(addressLines);
            return this;
        }

        @JsonSetter(value = "postcode", nulls = Nulls.SKIP)
        public Builder postcode(Optional<String> postcode) {
            this.postcode = postcode;
            return this;
        }

        public Builder postcode(String postcode) {
            this.postcode = Optional.ofNullable(postcode);
            return this;
        }

        @JsonSetter(value = "city", nulls = Nulls.SKIP)
        public Builder city(Optional<String> city) {
            this.city = city;
            return this;
        }

        public Builder city(String city) {
            this.city = Optional.ofNullable(city);
            return this;
        }

        @JsonSetter(value = "state", nulls = Nulls.SKIP)
        public Builder state(Optional<String> state) {
            this.state = state;
            return this;
        }

        public Builder state(String state) {
            this.state = Optional.ofNullable(state);
            return this;
        }

        @JsonSetter(value = "country", nulls = Nulls.SKIP)
        public Builder country(Optional<String> country) {
            this.country = country;
            return this;
        }

        public Builder country(String country) {
            this.country = Optional.ofNullable(country);
            return this;
        }

        @JsonSetter(value = "addressType", nulls = Nulls.SKIP)
        public Builder addressType(Optional<String> addressType) {
            this.addressType = addressType;
            return this;
        }

        public Builder addressType(String addressType) {
            this.addressType = Optional.ofNullable(addressType);
            return this;
        }

        @JsonSetter(value = "tags", nulls = Nulls.SKIP)
        public Builder tags(Optional<List<Tag>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder tags(List<Tag> tags) {
            this.tags = Optional.ofNullable(tags);
            return this;
        }

        public Address build() {
            return new Address(addressLines, postcode, city, state, country, addressType, tags, additionalProperties);
        }
    }
}
