/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flagright.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.flagright.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = DeviceData.Builder.class)
public final class DeviceData {
    private final Optional<Double> batteryLevel;

    private final Optional<Double> deviceLatitude;

    private final Optional<Double> deviceLongitude;

    private final Optional<String> ipAddress;

    private final Optional<CountryCode> ipCountry;

    private final Optional<String> deviceIdentifier;

    private final Optional<Boolean> vpnUsed;

    private final Optional<String> operatingSystem;

    private final Optional<String> deviceMaker;

    private final Optional<String> deviceModel;

    private final Optional<String> deviceYear;

    private final Optional<String> appVersion;

    private final Map<String, Object> additionalProperties;

    private DeviceData(
            Optional<Double> batteryLevel,
            Optional<Double> deviceLatitude,
            Optional<Double> deviceLongitude,
            Optional<String> ipAddress,
            Optional<CountryCode> ipCountry,
            Optional<String> deviceIdentifier,
            Optional<Boolean> vpnUsed,
            Optional<String> operatingSystem,
            Optional<String> deviceMaker,
            Optional<String> deviceModel,
            Optional<String> deviceYear,
            Optional<String> appVersion,
            Map<String, Object> additionalProperties) {
        this.batteryLevel = batteryLevel;
        this.deviceLatitude = deviceLatitude;
        this.deviceLongitude = deviceLongitude;
        this.ipAddress = ipAddress;
        this.ipCountry = ipCountry;
        this.deviceIdentifier = deviceIdentifier;
        this.vpnUsed = vpnUsed;
        this.operatingSystem = operatingSystem;
        this.deviceMaker = deviceMaker;
        this.deviceModel = deviceModel;
        this.deviceYear = deviceYear;
        this.appVersion = appVersion;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Battery level of the device used for a transaction or event at a given timestamp
     */
    @JsonProperty("batteryLevel")
    public Optional<Double> getBatteryLevel() {
        return batteryLevel;
    }

    /**
     * @return Device latitude at a give timestamp for an event or transaction
     */
    @JsonProperty("deviceLatitude")
    public Optional<Double> getDeviceLatitude() {
        return deviceLatitude;
    }

    /**
     * @return Device longitude at a give timestamp for an event or transaction
     */
    @JsonProperty("deviceLongitude")
    public Optional<Double> getDeviceLongitude() {
        return deviceLongitude;
    }

    /**
     * @return IP address of the device at a given timestamp for an event or transaction
     */
    @JsonProperty("ipAddress")
    public Optional<String> getIpAddress() {
        return ipAddress;
    }

    @JsonProperty("ipCountry")
    public Optional<CountryCode> getIpCountry() {
        return ipCountry;
    }

    /**
     * @return Device identifier number
     */
    @JsonProperty("deviceIdentifier")
    public Optional<String> getDeviceIdentifier() {
        return deviceIdentifier;
    }

    /**
     * @return Whether VPN was used at a given timestamp for an event or transaction
     */
    @JsonProperty("vpnUsed")
    public Optional<Boolean> getVpnUsed() {
        return vpnUsed;
    }

    /**
     * @return Operating system of the device at a given timestamp for an event or transaction
     */
    @JsonProperty("operatingSystem")
    public Optional<String> getOperatingSystem() {
        return operatingSystem;
    }

    /**
     * @return The maker of the device at a given timestamp for an event or transaction
     */
    @JsonProperty("deviceMaker")
    public Optional<String> getDeviceMaker() {
        return deviceMaker;
    }

    /**
     * @return The model of the device at a given timestamp for an event or transaction
     */
    @JsonProperty("deviceModel")
    public Optional<String> getDeviceModel() {
        return deviceModel;
    }

    /**
     * @return The year the device was manufactured at a given timestamp for an event or transaction
     */
    @JsonProperty("deviceYear")
    public Optional<String> getDeviceYear() {
        return deviceYear;
    }

    /**
     * @return The version of the app your user is using on their device at a given timestamp for an event or transaction
     */
    @JsonProperty("appVersion")
    public Optional<String> getAppVersion() {
        return appVersion;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof DeviceData && equalTo((DeviceData) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(DeviceData other) {
        return batteryLevel.equals(other.batteryLevel)
                && deviceLatitude.equals(other.deviceLatitude)
                && deviceLongitude.equals(other.deviceLongitude)
                && ipAddress.equals(other.ipAddress)
                && ipCountry.equals(other.ipCountry)
                && deviceIdentifier.equals(other.deviceIdentifier)
                && vpnUsed.equals(other.vpnUsed)
                && operatingSystem.equals(other.operatingSystem)
                && deviceMaker.equals(other.deviceMaker)
                && deviceModel.equals(other.deviceModel)
                && deviceYear.equals(other.deviceYear)
                && appVersion.equals(other.appVersion);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.batteryLevel,
                this.deviceLatitude,
                this.deviceLongitude,
                this.ipAddress,
                this.ipCountry,
                this.deviceIdentifier,
                this.vpnUsed,
                this.operatingSystem,
                this.deviceMaker,
                this.deviceModel,
                this.deviceYear,
                this.appVersion);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Double> batteryLevel = Optional.empty();

        private Optional<Double> deviceLatitude = Optional.empty();

        private Optional<Double> deviceLongitude = Optional.empty();

        private Optional<String> ipAddress = Optional.empty();

        private Optional<CountryCode> ipCountry = Optional.empty();

        private Optional<String> deviceIdentifier = Optional.empty();

        private Optional<Boolean> vpnUsed = Optional.empty();

        private Optional<String> operatingSystem = Optional.empty();

        private Optional<String> deviceMaker = Optional.empty();

        private Optional<String> deviceModel = Optional.empty();

        private Optional<String> deviceYear = Optional.empty();

        private Optional<String> appVersion = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(DeviceData other) {
            batteryLevel(other.getBatteryLevel());
            deviceLatitude(other.getDeviceLatitude());
            deviceLongitude(other.getDeviceLongitude());
            ipAddress(other.getIpAddress());
            ipCountry(other.getIpCountry());
            deviceIdentifier(other.getDeviceIdentifier());
            vpnUsed(other.getVpnUsed());
            operatingSystem(other.getOperatingSystem());
            deviceMaker(other.getDeviceMaker());
            deviceModel(other.getDeviceModel());
            deviceYear(other.getDeviceYear());
            appVersion(other.getAppVersion());
            return this;
        }

        @JsonSetter(value = "batteryLevel", nulls = Nulls.SKIP)
        public Builder batteryLevel(Optional<Double> batteryLevel) {
            this.batteryLevel = batteryLevel;
            return this;
        }

        public Builder batteryLevel(Double batteryLevel) {
            this.batteryLevel = Optional.ofNullable(batteryLevel);
            return this;
        }

        @JsonSetter(value = "deviceLatitude", nulls = Nulls.SKIP)
        public Builder deviceLatitude(Optional<Double> deviceLatitude) {
            this.deviceLatitude = deviceLatitude;
            return this;
        }

        public Builder deviceLatitude(Double deviceLatitude) {
            this.deviceLatitude = Optional.ofNullable(deviceLatitude);
            return this;
        }

        @JsonSetter(value = "deviceLongitude", nulls = Nulls.SKIP)
        public Builder deviceLongitude(Optional<Double> deviceLongitude) {
            this.deviceLongitude = deviceLongitude;
            return this;
        }

        public Builder deviceLongitude(Double deviceLongitude) {
            this.deviceLongitude = Optional.ofNullable(deviceLongitude);
            return this;
        }

        @JsonSetter(value = "ipAddress", nulls = Nulls.SKIP)
        public Builder ipAddress(Optional<String> ipAddress) {
            this.ipAddress = ipAddress;
            return this;
        }

        public Builder ipAddress(String ipAddress) {
            this.ipAddress = Optional.ofNullable(ipAddress);
            return this;
        }

        @JsonSetter(value = "ipCountry", nulls = Nulls.SKIP)
        public Builder ipCountry(Optional<CountryCode> ipCountry) {
            this.ipCountry = ipCountry;
            return this;
        }

        public Builder ipCountry(CountryCode ipCountry) {
            this.ipCountry = Optional.ofNullable(ipCountry);
            return this;
        }

        @JsonSetter(value = "deviceIdentifier", nulls = Nulls.SKIP)
        public Builder deviceIdentifier(Optional<String> deviceIdentifier) {
            this.deviceIdentifier = deviceIdentifier;
            return this;
        }

        public Builder deviceIdentifier(String deviceIdentifier) {
            this.deviceIdentifier = Optional.ofNullable(deviceIdentifier);
            return this;
        }

        @JsonSetter(value = "vpnUsed", nulls = Nulls.SKIP)
        public Builder vpnUsed(Optional<Boolean> vpnUsed) {
            this.vpnUsed = vpnUsed;
            return this;
        }

        public Builder vpnUsed(Boolean vpnUsed) {
            this.vpnUsed = Optional.ofNullable(vpnUsed);
            return this;
        }

        @JsonSetter(value = "operatingSystem", nulls = Nulls.SKIP)
        public Builder operatingSystem(Optional<String> operatingSystem) {
            this.operatingSystem = operatingSystem;
            return this;
        }

        public Builder operatingSystem(String operatingSystem) {
            this.operatingSystem = Optional.ofNullable(operatingSystem);
            return this;
        }

        @JsonSetter(value = "deviceMaker", nulls = Nulls.SKIP)
        public Builder deviceMaker(Optional<String> deviceMaker) {
            this.deviceMaker = deviceMaker;
            return this;
        }

        public Builder deviceMaker(String deviceMaker) {
            this.deviceMaker = Optional.ofNullable(deviceMaker);
            return this;
        }

        @JsonSetter(value = "deviceModel", nulls = Nulls.SKIP)
        public Builder deviceModel(Optional<String> deviceModel) {
            this.deviceModel = deviceModel;
            return this;
        }

        public Builder deviceModel(String deviceModel) {
            this.deviceModel = Optional.ofNullable(deviceModel);
            return this;
        }

        @JsonSetter(value = "deviceYear", nulls = Nulls.SKIP)
        public Builder deviceYear(Optional<String> deviceYear) {
            this.deviceYear = deviceYear;
            return this;
        }

        public Builder deviceYear(String deviceYear) {
            this.deviceYear = Optional.ofNullable(deviceYear);
            return this;
        }

        @JsonSetter(value = "appVersion", nulls = Nulls.SKIP)
        public Builder appVersion(Optional<String> appVersion) {
            this.appVersion = appVersion;
            return this;
        }

        public Builder appVersion(String appVersion) {
            this.appVersion = Optional.ofNullable(appVersion);
            return this;
        }

        public DeviceData build() {
            return new DeviceData(
                    batteryLevel,
                    deviceLatitude,
                    deviceLongitude,
                    ipAddress,
                    ipCountry,
                    deviceIdentifier,
                    vpnUsed,
                    operatingSystem,
                    deviceMaker,
                    deviceModel,
                    deviceYear,
                    appVersion,
                    additionalProperties);
        }
    }
}
