/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flagright.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.flagright.api.core.ObjectMappers;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = BatchConsumerUserEventsRulesResult.Builder.class)
public final class BatchConsumerUserEventsRulesResult {
    private final List<BatchConsumerUserEventWithRulesResult> consumerUserEvents;

    private final double totalCount;

    private final Map<String, Object> additionalProperties;

    private BatchConsumerUserEventsRulesResult(
            List<BatchConsumerUserEventWithRulesResult> consumerUserEvents,
            double totalCount,
            Map<String, Object> additionalProperties) {
        this.consumerUserEvents = consumerUserEvents;
        this.totalCount = totalCount;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("consumerUserEvents")
    public List<BatchConsumerUserEventWithRulesResult> getConsumerUserEvents() {
        return consumerUserEvents;
    }

    @JsonProperty("totalCount")
    public double getTotalCount() {
        return totalCount;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof BatchConsumerUserEventsRulesResult
                && equalTo((BatchConsumerUserEventsRulesResult) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(BatchConsumerUserEventsRulesResult other) {
        return consumerUserEvents.equals(other.consumerUserEvents) && totalCount == other.totalCount;
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.consumerUserEvents, this.totalCount);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static TotalCountStage builder() {
        return new Builder();
    }

    public interface TotalCountStage {
        _FinalStage totalCount(double totalCount);

        Builder from(BatchConsumerUserEventsRulesResult other);
    }

    public interface _FinalStage {
        BatchConsumerUserEventsRulesResult build();

        _FinalStage consumerUserEvents(List<BatchConsumerUserEventWithRulesResult> consumerUserEvents);

        _FinalStage addConsumerUserEvents(BatchConsumerUserEventWithRulesResult consumerUserEvents);

        _FinalStage addAllConsumerUserEvents(List<BatchConsumerUserEventWithRulesResult> consumerUserEvents);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements TotalCountStage, _FinalStage {
        private double totalCount;

        private List<BatchConsumerUserEventWithRulesResult> consumerUserEvents = new ArrayList<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(BatchConsumerUserEventsRulesResult other) {
            consumerUserEvents(other.getConsumerUserEvents());
            totalCount(other.getTotalCount());
            return this;
        }

        @java.lang.Override
        @JsonSetter("totalCount")
        public _FinalStage totalCount(double totalCount) {
            this.totalCount = totalCount;
            return this;
        }

        @java.lang.Override
        public _FinalStage addAllConsumerUserEvents(List<BatchConsumerUserEventWithRulesResult> consumerUserEvents) {
            this.consumerUserEvents.addAll(consumerUserEvents);
            return this;
        }

        @java.lang.Override
        public _FinalStage addConsumerUserEvents(BatchConsumerUserEventWithRulesResult consumerUserEvents) {
            this.consumerUserEvents.add(consumerUserEvents);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "consumerUserEvents", nulls = Nulls.SKIP)
        public _FinalStage consumerUserEvents(List<BatchConsumerUserEventWithRulesResult> consumerUserEvents) {
            this.consumerUserEvents.clear();
            this.consumerUserEvents.addAll(consumerUserEvents);
            return this;
        }

        @java.lang.Override
        public BatchConsumerUserEventsRulesResult build() {
            return new BatchConsumerUserEventsRulesResult(consumerUserEvents, totalCount, additionalProperties);
        }
    }
}
