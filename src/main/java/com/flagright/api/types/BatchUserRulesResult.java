/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flagright.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.flagright.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = BatchUserRulesResult.Builder.class)
public final class BatchUserRulesResult {
    private final Optional<List<ExecutedRulesResult>> executedRules;

    private final Optional<UserRiskScoreDetails> riskScoreDetails;

    private final Map<String, Object> additionalProperties;

    private BatchUserRulesResult(
            Optional<List<ExecutedRulesResult>> executedRules,
            Optional<UserRiskScoreDetails> riskScoreDetails,
            Map<String, Object> additionalProperties) {
        this.executedRules = executedRules;
        this.riskScoreDetails = riskScoreDetails;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("executedRules")
    public Optional<List<ExecutedRulesResult>> getExecutedRules() {
        return executedRules;
    }

    @JsonProperty("riskScoreDetails")
    public Optional<UserRiskScoreDetails> getRiskScoreDetails() {
        return riskScoreDetails;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof BatchUserRulesResult && equalTo((BatchUserRulesResult) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(BatchUserRulesResult other) {
        return executedRules.equals(other.executedRules) && riskScoreDetails.equals(other.riskScoreDetails);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.executedRules, this.riskScoreDetails);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<List<ExecutedRulesResult>> executedRules = Optional.empty();

        private Optional<UserRiskScoreDetails> riskScoreDetails = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(BatchUserRulesResult other) {
            executedRules(other.getExecutedRules());
            riskScoreDetails(other.getRiskScoreDetails());
            return this;
        }

        @JsonSetter(value = "executedRules", nulls = Nulls.SKIP)
        public Builder executedRules(Optional<List<ExecutedRulesResult>> executedRules) {
            this.executedRules = executedRules;
            return this;
        }

        public Builder executedRules(List<ExecutedRulesResult> executedRules) {
            this.executedRules = Optional.ofNullable(executedRules);
            return this;
        }

        @JsonSetter(value = "riskScoreDetails", nulls = Nulls.SKIP)
        public Builder riskScoreDetails(Optional<UserRiskScoreDetails> riskScoreDetails) {
            this.riskScoreDetails = riskScoreDetails;
            return this;
        }

        public Builder riskScoreDetails(UserRiskScoreDetails riskScoreDetails) {
            this.riskScoreDetails = Optional.ofNullable(riskScoreDetails);
            return this;
        }

        public BatchUserRulesResult build() {
            return new BatchUserRulesResult(executedRules, riskScoreDetails, additionalProperties);
        }
    }
}
