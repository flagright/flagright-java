/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flagright.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.flagright.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CheckDetails.Builder.class)
public final class CheckDetails {
    private final Optional<String> checkNumber;

    private final Optional<String> checkIdentifier;

    private final Optional<String> name;

    private final Optional<CheckDeliveryStatus> deliveryStatus;

    private final Optional<Double> etaTimestamp;

    private final Optional<Address> shippingAddress;

    private final Optional<List<Tag>> tags;

    private final Map<String, Object> additionalProperties;

    private CheckDetails(
            Optional<String> checkNumber,
            Optional<String> checkIdentifier,
            Optional<String> name,
            Optional<CheckDeliveryStatus> deliveryStatus,
            Optional<Double> etaTimestamp,
            Optional<Address> shippingAddress,
            Optional<List<Tag>> tags,
            Map<String, Object> additionalProperties) {
        this.checkNumber = checkNumber;
        this.checkIdentifier = checkIdentifier;
        this.name = name;
        this.deliveryStatus = deliveryStatus;
        this.etaTimestamp = etaTimestamp;
        this.shippingAddress = shippingAddress;
        this.tags = tags;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("checkNumber")
    public Optional<String> getCheckNumber() {
        return checkNumber;
    }

    @JsonProperty("checkIdentifier")
    public Optional<String> getCheckIdentifier() {
        return checkIdentifier;
    }

    @JsonProperty("name")
    public Optional<String> getName() {
        return name;
    }

    @JsonProperty("deliveryStatus")
    public Optional<CheckDeliveryStatus> getDeliveryStatus() {
        return deliveryStatus;
    }

    @JsonProperty("etaTimestamp")
    public Optional<Double> getEtaTimestamp() {
        return etaTimestamp;
    }

    @JsonProperty("shippingAddress")
    public Optional<Address> getShippingAddress() {
        return shippingAddress;
    }

    /**
     * @return Additional information that can be added via tags
     */
    @JsonProperty("tags")
    public Optional<List<Tag>> getTags() {
        return tags;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CheckDetails && equalTo((CheckDetails) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CheckDetails other) {
        return checkNumber.equals(other.checkNumber)
                && checkIdentifier.equals(other.checkIdentifier)
                && name.equals(other.name)
                && deliveryStatus.equals(other.deliveryStatus)
                && etaTimestamp.equals(other.etaTimestamp)
                && shippingAddress.equals(other.shippingAddress)
                && tags.equals(other.tags);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.checkNumber,
                this.checkIdentifier,
                this.name,
                this.deliveryStatus,
                this.etaTimestamp,
                this.shippingAddress,
                this.tags);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> checkNumber = Optional.empty();

        private Optional<String> checkIdentifier = Optional.empty();

        private Optional<String> name = Optional.empty();

        private Optional<CheckDeliveryStatus> deliveryStatus = Optional.empty();

        private Optional<Double> etaTimestamp = Optional.empty();

        private Optional<Address> shippingAddress = Optional.empty();

        private Optional<List<Tag>> tags = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(CheckDetails other) {
            checkNumber(other.getCheckNumber());
            checkIdentifier(other.getCheckIdentifier());
            name(other.getName());
            deliveryStatus(other.getDeliveryStatus());
            etaTimestamp(other.getEtaTimestamp());
            shippingAddress(other.getShippingAddress());
            tags(other.getTags());
            return this;
        }

        @JsonSetter(value = "checkNumber", nulls = Nulls.SKIP)
        public Builder checkNumber(Optional<String> checkNumber) {
            this.checkNumber = checkNumber;
            return this;
        }

        public Builder checkNumber(String checkNumber) {
            this.checkNumber = Optional.ofNullable(checkNumber);
            return this;
        }

        @JsonSetter(value = "checkIdentifier", nulls = Nulls.SKIP)
        public Builder checkIdentifier(Optional<String> checkIdentifier) {
            this.checkIdentifier = checkIdentifier;
            return this;
        }

        public Builder checkIdentifier(String checkIdentifier) {
            this.checkIdentifier = Optional.ofNullable(checkIdentifier);
            return this;
        }

        @JsonSetter(value = "name", nulls = Nulls.SKIP)
        public Builder name(Optional<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(String name) {
            this.name = Optional.ofNullable(name);
            return this;
        }

        @JsonSetter(value = "deliveryStatus", nulls = Nulls.SKIP)
        public Builder deliveryStatus(Optional<CheckDeliveryStatus> deliveryStatus) {
            this.deliveryStatus = deliveryStatus;
            return this;
        }

        public Builder deliveryStatus(CheckDeliveryStatus deliveryStatus) {
            this.deliveryStatus = Optional.ofNullable(deliveryStatus);
            return this;
        }

        @JsonSetter(value = "etaTimestamp", nulls = Nulls.SKIP)
        public Builder etaTimestamp(Optional<Double> etaTimestamp) {
            this.etaTimestamp = etaTimestamp;
            return this;
        }

        public Builder etaTimestamp(Double etaTimestamp) {
            this.etaTimestamp = Optional.ofNullable(etaTimestamp);
            return this;
        }

        @JsonSetter(value = "shippingAddress", nulls = Nulls.SKIP)
        public Builder shippingAddress(Optional<Address> shippingAddress) {
            this.shippingAddress = shippingAddress;
            return this;
        }

        public Builder shippingAddress(Address shippingAddress) {
            this.shippingAddress = Optional.ofNullable(shippingAddress);
            return this;
        }

        @JsonSetter(value = "tags", nulls = Nulls.SKIP)
        public Builder tags(Optional<List<Tag>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder tags(List<Tag> tags) {
            this.tags = Optional.ofNullable(tags);
            return this;
        }

        public CheckDetails build() {
            return new CheckDetails(
                    checkNumber,
                    checkIdentifier,
                    name,
                    deliveryStatus,
                    etaTimestamp,
                    shippingAddress,
                    tags,
                    additionalProperties);
        }
    }
}
