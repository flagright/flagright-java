/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flagright.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.flagright.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = TransactionAmountDetails.Builder.class)
public final class TransactionAmountDetails {
    private final double transactionAmount;

    private final CurrencyCode transactionCurrency;

    private final Optional<CountryCode> country;

    private final Map<String, Object> additionalProperties;

    private TransactionAmountDetails(
            double transactionAmount,
            CurrencyCode transactionCurrency,
            Optional<CountryCode> country,
            Map<String, Object> additionalProperties) {
        this.transactionAmount = transactionAmount;
        this.transactionCurrency = transactionCurrency;
        this.country = country;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Amount of the transaction
     */
    @JsonProperty("transactionAmount")
    public double getTransactionAmount() {
        return transactionAmount;
    }

    @JsonProperty("transactionCurrency")
    public CurrencyCode getTransactionCurrency() {
        return transactionCurrency;
    }

    @JsonProperty("country")
    public Optional<CountryCode> getCountry() {
        return country;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof TransactionAmountDetails && equalTo((TransactionAmountDetails) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(TransactionAmountDetails other) {
        return transactionAmount == other.transactionAmount
                && transactionCurrency.equals(other.transactionCurrency)
                && country.equals(other.country);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.transactionAmount, this.transactionCurrency, this.country);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static TransactionAmountStage builder() {
        return new Builder();
    }

    public interface TransactionAmountStage {
        TransactionCurrencyStage transactionAmount(double transactionAmount);

        Builder from(TransactionAmountDetails other);
    }

    public interface TransactionCurrencyStage {
        _FinalStage transactionCurrency(@NotNull CurrencyCode transactionCurrency);
    }

    public interface _FinalStage {
        TransactionAmountDetails build();

        _FinalStage country(Optional<CountryCode> country);

        _FinalStage country(CountryCode country);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements TransactionAmountStage, TransactionCurrencyStage, _FinalStage {
        private double transactionAmount;

        private CurrencyCode transactionCurrency;

        private Optional<CountryCode> country = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(TransactionAmountDetails other) {
            transactionAmount(other.getTransactionAmount());
            transactionCurrency(other.getTransactionCurrency());
            country(other.getCountry());
            return this;
        }

        /**
         * <p>Amount of the transaction</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("transactionAmount")
        public TransactionCurrencyStage transactionAmount(double transactionAmount) {
            this.transactionAmount = transactionAmount;
            return this;
        }

        @java.lang.Override
        @JsonSetter("transactionCurrency")
        public _FinalStage transactionCurrency(@NotNull CurrencyCode transactionCurrency) {
            this.transactionCurrency =
                    Objects.requireNonNull(transactionCurrency, "transactionCurrency must not be null");
            return this;
        }

        @java.lang.Override
        public _FinalStage country(CountryCode country) {
            this.country = Optional.ofNullable(country);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "country", nulls = Nulls.SKIP)
        public _FinalStage country(Optional<CountryCode> country) {
            this.country = country;
            return this;
        }

        @java.lang.Override
        public TransactionAmountDetails build() {
            return new TransactionAmountDetails(transactionAmount, transactionCurrency, country, additionalProperties);
        }
    }
}
