/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flagright.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.flagright.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = OriginFundsInfo.Builder.class)
public final class OriginFundsInfo {
    private final Optional<String> sourceOfFunds;

    private final Optional<String> sourceOfWealth;

    private final Map<String, Object> additionalProperties;

    private OriginFundsInfo(
            Optional<String> sourceOfFunds, Optional<String> sourceOfWealth, Map<String, Object> additionalProperties) {
        this.sourceOfFunds = sourceOfFunds;
        this.sourceOfWealth = sourceOfWealth;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Source of funds for the transaction
     */
    @JsonProperty("sourceOfFunds")
    public Optional<String> getSourceOfFunds() {
        return sourceOfFunds;
    }

    /**
     * @return Source of wealth
     */
    @JsonProperty("sourceOfWealth")
    public Optional<String> getSourceOfWealth() {
        return sourceOfWealth;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof OriginFundsInfo && equalTo((OriginFundsInfo) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(OriginFundsInfo other) {
        return sourceOfFunds.equals(other.sourceOfFunds) && sourceOfWealth.equals(other.sourceOfWealth);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.sourceOfFunds, this.sourceOfWealth);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> sourceOfFunds = Optional.empty();

        private Optional<String> sourceOfWealth = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(OriginFundsInfo other) {
            sourceOfFunds(other.getSourceOfFunds());
            sourceOfWealth(other.getSourceOfWealth());
            return this;
        }

        @JsonSetter(value = "sourceOfFunds", nulls = Nulls.SKIP)
        public Builder sourceOfFunds(Optional<String> sourceOfFunds) {
            this.sourceOfFunds = sourceOfFunds;
            return this;
        }

        public Builder sourceOfFunds(String sourceOfFunds) {
            this.sourceOfFunds = Optional.ofNullable(sourceOfFunds);
            return this;
        }

        @JsonSetter(value = "sourceOfWealth", nulls = Nulls.SKIP)
        public Builder sourceOfWealth(Optional<String> sourceOfWealth) {
            this.sourceOfWealth = sourceOfWealth;
            return this;
        }

        public Builder sourceOfWealth(String sourceOfWealth) {
            this.sourceOfWealth = Optional.ofNullable(sourceOfWealth);
            return this;
        }

        public OriginFundsInfo build() {
            return new OriginFundsInfo(sourceOfFunds, sourceOfWealth, additionalProperties);
        }
    }
}
