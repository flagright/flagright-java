/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flagright.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.flagright.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = BusinessBase.Builder.class)
public final class BusinessBase {
    private final String userId;

    private final double createdTimestamp;

    private final LegalEntity legalEntity;

    private final Map<String, Object> additionalProperties;

    private BusinessBase(
            String userId, double createdTimestamp, LegalEntity legalEntity, Map<String, Object> additionalProperties) {
        this.userId = userId;
        this.createdTimestamp = createdTimestamp;
        this.legalEntity = legalEntity;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Unique user ID for the user
     */
    @JsonProperty("userId")
    public String getUserId() {
        return userId;
    }

    /**
     * @return Timestamp when the user was created
     */
    @JsonProperty("createdTimestamp")
    public double getCreatedTimestamp() {
        return createdTimestamp;
    }

    @JsonProperty("legalEntity")
    public LegalEntity getLegalEntity() {
        return legalEntity;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof BusinessBase && equalTo((BusinessBase) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(BusinessBase other) {
        return userId.equals(other.userId)
                && createdTimestamp == other.createdTimestamp
                && legalEntity.equals(other.legalEntity);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.userId, this.createdTimestamp, this.legalEntity);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static UserIdStage builder() {
        return new Builder();
    }

    public interface UserIdStage {
        CreatedTimestampStage userId(@NotNull String userId);

        Builder from(BusinessBase other);
    }

    public interface CreatedTimestampStage {
        LegalEntityStage createdTimestamp(double createdTimestamp);
    }

    public interface LegalEntityStage {
        _FinalStage legalEntity(@NotNull LegalEntity legalEntity);
    }

    public interface _FinalStage {
        BusinessBase build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements UserIdStage, CreatedTimestampStage, LegalEntityStage, _FinalStage {
        private String userId;

        private double createdTimestamp;

        private LegalEntity legalEntity;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(BusinessBase other) {
            userId(other.getUserId());
            createdTimestamp(other.getCreatedTimestamp());
            legalEntity(other.getLegalEntity());
            return this;
        }

        /**
         * <p>Unique user ID for the user</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("userId")
        public CreatedTimestampStage userId(@NotNull String userId) {
            this.userId = Objects.requireNonNull(userId, "userId must not be null");
            return this;
        }

        /**
         * <p>Timestamp when the user was created</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("createdTimestamp")
        public LegalEntityStage createdTimestamp(double createdTimestamp) {
            this.createdTimestamp = createdTimestamp;
            return this;
        }

        @java.lang.Override
        @JsonSetter("legalEntity")
        public _FinalStage legalEntity(@NotNull LegalEntity legalEntity) {
            this.legalEntity = Objects.requireNonNull(legalEntity, "legalEntity must not be null");
            return this;
        }

        @java.lang.Override
        public BusinessBase build() {
            return new BusinessBase(userId, createdTimestamp, legalEntity, additionalProperties);
        }
    }
}
