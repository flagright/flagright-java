/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flagright.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.flagright.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ListHeader.Builder.class)
public final class ListHeader {
    private final String listId;

    private final ListType listType;

    private final ListSubtype subtype;

    private final Optional<ListMetadata> metadata;

    private final double createdTimestamp;

    private final Optional<Double> size;

    private final Optional<Double> version;

    private final Map<String, Object> additionalProperties;

    private ListHeader(
            String listId,
            ListType listType,
            ListSubtype subtype,
            Optional<ListMetadata> metadata,
            double createdTimestamp,
            Optional<Double> size,
            Optional<Double> version,
            Map<String, Object> additionalProperties) {
        this.listId = listId;
        this.listType = listType;
        this.subtype = subtype;
        this.metadata = metadata;
        this.createdTimestamp = createdTimestamp;
        this.size = size;
        this.version = version;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("listId")
    public String getListId() {
        return listId;
    }

    @JsonProperty("listType")
    public ListType getListType() {
        return listType;
    }

    @JsonProperty("subtype")
    public ListSubtype getSubtype() {
        return subtype;
    }

    @JsonProperty("metadata")
    public Optional<ListMetadata> getMetadata() {
        return metadata;
    }

    @JsonProperty("createdTimestamp")
    public double getCreatedTimestamp() {
        return createdTimestamp;
    }

    @JsonProperty("size")
    public Optional<Double> getSize() {
        return size;
    }

    @JsonProperty("version")
    public Optional<Double> getVersion() {
        return version;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ListHeader && equalTo((ListHeader) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ListHeader other) {
        return listId.equals(other.listId)
                && listType.equals(other.listType)
                && subtype.equals(other.subtype)
                && metadata.equals(other.metadata)
                && createdTimestamp == other.createdTimestamp
                && size.equals(other.size)
                && version.equals(other.version);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.listId,
                this.listType,
                this.subtype,
                this.metadata,
                this.createdTimestamp,
                this.size,
                this.version);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static ListIdStage builder() {
        return new Builder();
    }

    public interface ListIdStage {
        ListTypeStage listId(@NotNull String listId);

        Builder from(ListHeader other);
    }

    public interface ListTypeStage {
        SubtypeStage listType(@NotNull ListType listType);
    }

    public interface SubtypeStage {
        CreatedTimestampStage subtype(@NotNull ListSubtype subtype);
    }

    public interface CreatedTimestampStage {
        _FinalStage createdTimestamp(double createdTimestamp);
    }

    public interface _FinalStage {
        ListHeader build();

        _FinalStage metadata(Optional<ListMetadata> metadata);

        _FinalStage metadata(ListMetadata metadata);

        _FinalStage size(Optional<Double> size);

        _FinalStage size(Double size);

        _FinalStage version(Optional<Double> version);

        _FinalStage version(Double version);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements ListIdStage, ListTypeStage, SubtypeStage, CreatedTimestampStage, _FinalStage {
        private String listId;

        private ListType listType;

        private ListSubtype subtype;

        private double createdTimestamp;

        private Optional<Double> version = Optional.empty();

        private Optional<Double> size = Optional.empty();

        private Optional<ListMetadata> metadata = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(ListHeader other) {
            listId(other.getListId());
            listType(other.getListType());
            subtype(other.getSubtype());
            metadata(other.getMetadata());
            createdTimestamp(other.getCreatedTimestamp());
            size(other.getSize());
            version(other.getVersion());
            return this;
        }

        @java.lang.Override
        @JsonSetter("listId")
        public ListTypeStage listId(@NotNull String listId) {
            this.listId = Objects.requireNonNull(listId, "listId must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("listType")
        public SubtypeStage listType(@NotNull ListType listType) {
            this.listType = Objects.requireNonNull(listType, "listType must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("subtype")
        public CreatedTimestampStage subtype(@NotNull ListSubtype subtype) {
            this.subtype = Objects.requireNonNull(subtype, "subtype must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("createdTimestamp")
        public _FinalStage createdTimestamp(double createdTimestamp) {
            this.createdTimestamp = createdTimestamp;
            return this;
        }

        @java.lang.Override
        public _FinalStage version(Double version) {
            this.version = Optional.ofNullable(version);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "version", nulls = Nulls.SKIP)
        public _FinalStage version(Optional<Double> version) {
            this.version = version;
            return this;
        }

        @java.lang.Override
        public _FinalStage size(Double size) {
            this.size = Optional.ofNullable(size);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "size", nulls = Nulls.SKIP)
        public _FinalStage size(Optional<Double> size) {
            this.size = size;
            return this;
        }

        @java.lang.Override
        public _FinalStage metadata(ListMetadata metadata) {
            this.metadata = Optional.ofNullable(metadata);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "metadata", nulls = Nulls.SKIP)
        public _FinalStage metadata(Optional<ListMetadata> metadata) {
            this.metadata = metadata;
            return this;
        }

        @java.lang.Override
        public ListHeader build() {
            return new ListHeader(
                    listId, listType, subtype, metadata, createdTimestamp, size, version, additionalProperties);
        }
    }
}
