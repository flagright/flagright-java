/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flagright.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.flagright.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = SwiftDetails.Builder.class)
public final class SwiftDetails {
    private final Optional<String> swiftCode;

    private final Optional<String> accountNumber;

    private final Optional<String> routingNumber;

    private final Optional<Amount> accountBalance;

    private final Optional<String> accountType;

    private final Optional<String> bankName;

    private final Optional<String> name;

    private final Optional<Address> bankAddress;

    private final Optional<String> emailId;

    private final Optional<String> specialInstructions;

    private final Optional<Address> address;

    private final Optional<List<Tag>> tags;

    private final Map<String, Object> additionalProperties;

    private SwiftDetails(
            Optional<String> swiftCode,
            Optional<String> accountNumber,
            Optional<String> routingNumber,
            Optional<Amount> accountBalance,
            Optional<String> accountType,
            Optional<String> bankName,
            Optional<String> name,
            Optional<Address> bankAddress,
            Optional<String> emailId,
            Optional<String> specialInstructions,
            Optional<Address> address,
            Optional<List<Tag>> tags,
            Map<String, Object> additionalProperties) {
        this.swiftCode = swiftCode;
        this.accountNumber = accountNumber;
        this.routingNumber = routingNumber;
        this.accountBalance = accountBalance;
        this.accountType = accountType;
        this.bankName = bankName;
        this.name = name;
        this.bankAddress = bankAddress;
        this.emailId = emailId;
        this.specialInstructions = specialInstructions;
        this.address = address;
        this.tags = tags;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return SWIFT code of the financial institution
     */
    @JsonProperty("swiftCode")
    public Optional<String> getSwiftCode() {
        return swiftCode;
    }

    /**
     * @return Account number
     */
    @JsonProperty("accountNumber")
    public Optional<String> getAccountNumber() {
        return accountNumber;
    }

    /**
     * @return Routing number of the bank
     */
    @JsonProperty("routingNumber")
    public Optional<String> getRoutingNumber() {
        return routingNumber;
    }

    @JsonProperty("accountBalance")
    public Optional<Amount> getAccountBalance() {
        return accountBalance;
    }

    /**
     * @return Account type. E.g. Checking, Savings etc.
     */
    @JsonProperty("accountType")
    public Optional<String> getAccountType() {
        return accountType;
    }

    /**
     * @return Name of the bank
     */
    @JsonProperty("bankName")
    public Optional<String> getBankName() {
        return bankName;
    }

    /**
     * @return Name of the account holder
     */
    @JsonProperty("name")
    public Optional<String> getName() {
        return name;
    }

    @JsonProperty("bankAddress")
    public Optional<Address> getBankAddress() {
        return bankAddress;
    }

    @JsonProperty("emailId")
    public Optional<String> getEmailId() {
        return emailId;
    }

    /**
     * @return Special instructions if any
     */
    @JsonProperty("specialInstructions")
    public Optional<String> getSpecialInstructions() {
        return specialInstructions;
    }

    @JsonProperty("address")
    public Optional<Address> getAddress() {
        return address;
    }

    /**
     * @return Additional information that can be added via tags
     */
    @JsonProperty("tags")
    public Optional<List<Tag>> getTags() {
        return tags;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof SwiftDetails && equalTo((SwiftDetails) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(SwiftDetails other) {
        return swiftCode.equals(other.swiftCode)
                && accountNumber.equals(other.accountNumber)
                && routingNumber.equals(other.routingNumber)
                && accountBalance.equals(other.accountBalance)
                && accountType.equals(other.accountType)
                && bankName.equals(other.bankName)
                && name.equals(other.name)
                && bankAddress.equals(other.bankAddress)
                && emailId.equals(other.emailId)
                && specialInstructions.equals(other.specialInstructions)
                && address.equals(other.address)
                && tags.equals(other.tags);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.swiftCode,
                this.accountNumber,
                this.routingNumber,
                this.accountBalance,
                this.accountType,
                this.bankName,
                this.name,
                this.bankAddress,
                this.emailId,
                this.specialInstructions,
                this.address,
                this.tags);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> swiftCode = Optional.empty();

        private Optional<String> accountNumber = Optional.empty();

        private Optional<String> routingNumber = Optional.empty();

        private Optional<Amount> accountBalance = Optional.empty();

        private Optional<String> accountType = Optional.empty();

        private Optional<String> bankName = Optional.empty();

        private Optional<String> name = Optional.empty();

        private Optional<Address> bankAddress = Optional.empty();

        private Optional<String> emailId = Optional.empty();

        private Optional<String> specialInstructions = Optional.empty();

        private Optional<Address> address = Optional.empty();

        private Optional<List<Tag>> tags = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(SwiftDetails other) {
            swiftCode(other.getSwiftCode());
            accountNumber(other.getAccountNumber());
            routingNumber(other.getRoutingNumber());
            accountBalance(other.getAccountBalance());
            accountType(other.getAccountType());
            bankName(other.getBankName());
            name(other.getName());
            bankAddress(other.getBankAddress());
            emailId(other.getEmailId());
            specialInstructions(other.getSpecialInstructions());
            address(other.getAddress());
            tags(other.getTags());
            return this;
        }

        @JsonSetter(value = "swiftCode", nulls = Nulls.SKIP)
        public Builder swiftCode(Optional<String> swiftCode) {
            this.swiftCode = swiftCode;
            return this;
        }

        public Builder swiftCode(String swiftCode) {
            this.swiftCode = Optional.ofNullable(swiftCode);
            return this;
        }

        @JsonSetter(value = "accountNumber", nulls = Nulls.SKIP)
        public Builder accountNumber(Optional<String> accountNumber) {
            this.accountNumber = accountNumber;
            return this;
        }

        public Builder accountNumber(String accountNumber) {
            this.accountNumber = Optional.ofNullable(accountNumber);
            return this;
        }

        @JsonSetter(value = "routingNumber", nulls = Nulls.SKIP)
        public Builder routingNumber(Optional<String> routingNumber) {
            this.routingNumber = routingNumber;
            return this;
        }

        public Builder routingNumber(String routingNumber) {
            this.routingNumber = Optional.ofNullable(routingNumber);
            return this;
        }

        @JsonSetter(value = "accountBalance", nulls = Nulls.SKIP)
        public Builder accountBalance(Optional<Amount> accountBalance) {
            this.accountBalance = accountBalance;
            return this;
        }

        public Builder accountBalance(Amount accountBalance) {
            this.accountBalance = Optional.ofNullable(accountBalance);
            return this;
        }

        @JsonSetter(value = "accountType", nulls = Nulls.SKIP)
        public Builder accountType(Optional<String> accountType) {
            this.accountType = accountType;
            return this;
        }

        public Builder accountType(String accountType) {
            this.accountType = Optional.ofNullable(accountType);
            return this;
        }

        @JsonSetter(value = "bankName", nulls = Nulls.SKIP)
        public Builder bankName(Optional<String> bankName) {
            this.bankName = bankName;
            return this;
        }

        public Builder bankName(String bankName) {
            this.bankName = Optional.ofNullable(bankName);
            return this;
        }

        @JsonSetter(value = "name", nulls = Nulls.SKIP)
        public Builder name(Optional<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(String name) {
            this.name = Optional.ofNullable(name);
            return this;
        }

        @JsonSetter(value = "bankAddress", nulls = Nulls.SKIP)
        public Builder bankAddress(Optional<Address> bankAddress) {
            this.bankAddress = bankAddress;
            return this;
        }

        public Builder bankAddress(Address bankAddress) {
            this.bankAddress = Optional.ofNullable(bankAddress);
            return this;
        }

        @JsonSetter(value = "emailId", nulls = Nulls.SKIP)
        public Builder emailId(Optional<String> emailId) {
            this.emailId = emailId;
            return this;
        }

        public Builder emailId(String emailId) {
            this.emailId = Optional.ofNullable(emailId);
            return this;
        }

        @JsonSetter(value = "specialInstructions", nulls = Nulls.SKIP)
        public Builder specialInstructions(Optional<String> specialInstructions) {
            this.specialInstructions = specialInstructions;
            return this;
        }

        public Builder specialInstructions(String specialInstructions) {
            this.specialInstructions = Optional.ofNullable(specialInstructions);
            return this;
        }

        @JsonSetter(value = "address", nulls = Nulls.SKIP)
        public Builder address(Optional<Address> address) {
            this.address = address;
            return this;
        }

        public Builder address(Address address) {
            this.address = Optional.ofNullable(address);
            return this;
        }

        @JsonSetter(value = "tags", nulls = Nulls.SKIP)
        public Builder tags(Optional<List<Tag>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder tags(List<Tag> tags) {
            this.tags = Optional.ofNullable(tags);
            return this;
        }

        public SwiftDetails build() {
            return new SwiftDetails(
                    swiftCode,
                    accountNumber,
                    routingNumber,
                    accountBalance,
                    accountType,
                    bankName,
                    name,
                    bankAddress,
                    emailId,
                    specialInstructions,
                    address,
                    tags,
                    additionalProperties);
        }
    }
}
