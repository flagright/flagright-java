/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flagright.api.resources.transactions;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.flagright.api.core.ClientOptions;
import com.flagright.api.core.FlagrightApiApiException;
import com.flagright.api.core.FlagrightApiException;
import com.flagright.api.core.MediaTypes;
import com.flagright.api.core.ObjectMappers;
import com.flagright.api.core.RequestOptions;
import com.flagright.api.errors.BadRequestError;
import com.flagright.api.errors.TooManyRequestsError;
import com.flagright.api.errors.UnauthorizedError;
import com.flagright.api.resources.transactions.requests.TransactionsVerifyRequest;
import com.flagright.api.resources.transactions.types.TransactionsVerifyResponse;
import com.flagright.api.types.ApiErrorResponse;
import com.flagright.api.types.TransactionWithRulesResult;
import java.io.IOException;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;
import okhttp3.ResponseBody;

public class TransactionsClient {
    protected final ClientOptions clientOptions;

    public TransactionsClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
    }

    /**
     * <h2>POST Transactions</h2>
     * <code>/transactions</code> endpoint allows you to operate on the <a href="/guides/overview/entities#transaction">Transaction entity.</a>
     * <p>In order to pass the payload of a transaction to Flagright and verify the transaction, you will need to call this endpoint with the transaction payload. Not all fields are mandatory, you will only need to pass in the fields that you have and are relevant for your compliance setup.</p>
     * <h3>Payload</h3>
     * <p>Here are some of the most used payload fields explained (you can find the full payload <a href="/api-reference/api-reference/transactions/verify#request">schema below</a> with 1 line descriptions):</p>
     * <ul>
     * <li><code>type</code>: Type of transaction (Ex: <code>WITHDRAWAL</code>, <code>DEPOSIT</code>, <code>TRANSFER</code> etc).</li>
     * <li><code>transactionId</code> - Unique Identifier for the transaction. Flagright API will generate a <code>transactionId</code> if this field is left empty</li>
     * <li><code>timestamp</code> - UNIX timestamp in <em>milliseconds</em> of when the transaction took place</li>
     * <li><code>transactionState</code> - The state of the transaction, set to <code>CREATED</code> by default. <a href="/guides/overview/entities#transaction-lifecycle-through-transaction-events">More details here</a></li>
     * <li><code>originUserId</code> - Unique identifier (if any) of the user who is sending the money. This user must be created within the Flagright system before using the <a href="/api-reference/api-reference/consumer-users/create">create a consumer user</a> or <a href="/api-reference/api-reference/business-users/create">create a business user</a> endpoint</li>
     * <li><code>destinationUserId</code> - Unique identifier (if any) of the user who is receiving the money. This user must be created within the Flagright system before using the <a href="/api-reference/api-reference/consumer-users/create">create a consumer user</a> or <a href="/api-reference/api-reference/business-users/create">create a business user</a> endpoint</li>
     * <li><code>originAmountDetails</code> - Details of the amount being sent from the origin</li>
     * <li><code>destinationAmountDetails</code> - Details of the amount being received at the destination</li>
     * <li><code>originPaymentDetails</code> - Payment details (if any) used at the origin (ex: <code>CARD</code>, <code>IBAN</code>, <code>WALLET</code> etc). You can click on the dropdown next to the field in the schema below to view all supported payment types.</li>
     * <li><code>destinationPaymentDetails</code> - Payment details (if any) used at the destination (ex: <code>CARD</code>, <code>IBAN</code>, <code>WALLET</code> etc). You can click on the dropdown next to the field in the schema below to view all supported payment types.</li>
     * </ul>
     */
    public TransactionsVerifyResponse verify(TransactionsVerifyRequest request) {
        return verify(request, null);
    }

    /**
     * <h2>POST Transactions</h2>
     * <code>/transactions</code> endpoint allows you to operate on the <a href="/guides/overview/entities#transaction">Transaction entity.</a>
     * <p>In order to pass the payload of a transaction to Flagright and verify the transaction, you will need to call this endpoint with the transaction payload. Not all fields are mandatory, you will only need to pass in the fields that you have and are relevant for your compliance setup.</p>
     * <h3>Payload</h3>
     * <p>Here are some of the most used payload fields explained (you can find the full payload <a href="/api-reference/api-reference/transactions/verify#request">schema below</a> with 1 line descriptions):</p>
     * <ul>
     * <li><code>type</code>: Type of transaction (Ex: <code>WITHDRAWAL</code>, <code>DEPOSIT</code>, <code>TRANSFER</code> etc).</li>
     * <li><code>transactionId</code> - Unique Identifier for the transaction. Flagright API will generate a <code>transactionId</code> if this field is left empty</li>
     * <li><code>timestamp</code> - UNIX timestamp in <em>milliseconds</em> of when the transaction took place</li>
     * <li><code>transactionState</code> - The state of the transaction, set to <code>CREATED</code> by default. <a href="/guides/overview/entities#transaction-lifecycle-through-transaction-events">More details here</a></li>
     * <li><code>originUserId</code> - Unique identifier (if any) of the user who is sending the money. This user must be created within the Flagright system before using the <a href="/api-reference/api-reference/consumer-users/create">create a consumer user</a> or <a href="/api-reference/api-reference/business-users/create">create a business user</a> endpoint</li>
     * <li><code>destinationUserId</code> - Unique identifier (if any) of the user who is receiving the money. This user must be created within the Flagright system before using the <a href="/api-reference/api-reference/consumer-users/create">create a consumer user</a> or <a href="/api-reference/api-reference/business-users/create">create a business user</a> endpoint</li>
     * <li><code>originAmountDetails</code> - Details of the amount being sent from the origin</li>
     * <li><code>destinationAmountDetails</code> - Details of the amount being received at the destination</li>
     * <li><code>originPaymentDetails</code> - Payment details (if any) used at the origin (ex: <code>CARD</code>, <code>IBAN</code>, <code>WALLET</code> etc). You can click on the dropdown next to the field in the schema below to view all supported payment types.</li>
     * <li><code>destinationPaymentDetails</code> - Payment details (if any) used at the destination (ex: <code>CARD</code>, <code>IBAN</code>, <code>WALLET</code> etc). You can click on the dropdown next to the field in the schema below to view all supported payment types.</li>
     * </ul>
     */
    public TransactionsVerifyResponse verify(TransactionsVerifyRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("transactions");
        if (request.getValidateOriginUserId().isPresent()) {
            httpUrl.addQueryParameter(
                    "validateOriginUserId",
                    request.getValidateOriginUserId().get().toString());
        }
        if (request.getValidateDestinationUserId().isPresent()) {
            httpUrl.addQueryParameter(
                    "validateDestinationUserId",
                    request.getValidateDestinationUserId().get().toString());
        }
        if (request.getValidateTransactionId().isPresent()) {
            httpUrl.addQueryParameter(
                    "validateTransactionId",
                    request.getValidateTransactionId().get().toString());
        }
        if (request.getTrsOnly().isPresent()) {
            httpUrl.addQueryParameter("_trsOnly", request.getTrsOnly().get().toString());
        }
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request.getBody()), MediaTypes.APPLICATION_JSON);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("POST", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), TransactionsVerifyResponse.class);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            try {
                switch (response.code()) {
                    case 400:
                        throw new BadRequestError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, ApiErrorResponse.class));
                    case 401:
                        throw new UnauthorizedError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, ApiErrorResponse.class));
                    case 429:
                        throw new TooManyRequestsError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, ApiErrorResponse.class));
                }
            } catch (JsonProcessingException ignored) {
                // unable to map error response, throwing generic error
            }
            throw new FlagrightApiApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class));
        } catch (IOException e) {
            throw new FlagrightApiException("Network error executing HTTP request", e);
        }
    }

    /**
     * <h3>GET Transactions</h3>
     * <code>/transactions</code> endpoint allows you to operate on the <a href="/guides/overview/entities#transaction">Transaction entity</a>.
     * <p>Calling <code>GET /transactions/{transactionId}</code> will return the entire transaction payload and rule execution results for the transaction with the corresponding <code>transactionId</code></p>
     */
    public TransactionWithRulesResult get(String transactionId) {
        return get(transactionId, null);
    }

    /**
     * <h3>GET Transactions</h3>
     * <code>/transactions</code> endpoint allows you to operate on the <a href="/guides/overview/entities#transaction">Transaction entity</a>.
     * <p>Calling <code>GET /transactions/{transactionId}</code> will return the entire transaction payload and rule execution results for the transaction with the corresponding <code>transactionId</code></p>
     */
    public TransactionWithRulesResult get(String transactionId, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("transactions")
                .addPathSegment(transactionId)
                .build();
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), TransactionWithRulesResult.class);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            try {
                switch (response.code()) {
                    case 400:
                        throw new BadRequestError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, ApiErrorResponse.class));
                    case 401:
                        throw new UnauthorizedError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, ApiErrorResponse.class));
                    case 429:
                        throw new TooManyRequestsError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, ApiErrorResponse.class));
                }
            } catch (JsonProcessingException ignored) {
                // unable to map error response, throwing generic error
            }
            throw new FlagrightApiApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class));
        } catch (IOException e) {
            throw new FlagrightApiException("Network error executing HTTP request", e);
        }
    }
}
