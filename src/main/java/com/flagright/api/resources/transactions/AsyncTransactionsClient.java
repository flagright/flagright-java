/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flagright.api.resources.transactions;

import com.flagright.api.core.ClientOptions;
import com.flagright.api.core.RequestOptions;
import com.flagright.api.resources.transactions.requests.TransactionsVerifyRequest;
import com.flagright.api.resources.transactions.types.TransactionsVerifyResponse;
import com.flagright.api.types.TransactionWithRulesResult;
import java.util.concurrent.CompletableFuture;

public class AsyncTransactionsClient {
    protected final ClientOptions clientOptions;

    private final AsyncRawTransactionsClient rawClient;

    public AsyncTransactionsClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        this.rawClient = new AsyncRawTransactionsClient(clientOptions);
    }

    /**
     * Get responses with HTTP metadata like headers
     */
    public AsyncRawTransactionsClient withRawResponse() {
        return this.rawClient;
    }

    /**
     * <h2>POST Transactions</h2>
     * <code>/transactions</code> endpoint allows you to operate on the <a href="/guides/overview/entities#transaction">Transaction entity.</a>
     * <p>In order to pass the payload of a transaction to Flagright and verify the transaction, you will need to call this endpoint with the transaction payload. Not all fields are mandatory, you will only need to pass in the fields that you have and are relevant for your compliance setup.</p>
     * <h3>Payload</h3>
     * <p>Here are some of the most used payload fields explained (you can find the full payload <a href="/api-reference/api-reference/transactions/verify#request">schema below</a> with 1 line descriptions):</p>
     * <ul>
     * <li><code>type</code>: Type of transaction (Ex: <code>WITHDRAWAL</code>, <code>DEPOSIT</code>, <code>TRANSFER</code> etc).</li>
     * <li><code>transactionId</code> - Unique Identifier for the transaction.</li>
     * <li><code>timestamp</code> - UNIX timestamp in <em>milliseconds</em> of when the transaction took place</li>
     * <li><code>transactionState</code> - The state of the transaction, set to <code>CREATED</code> by default. <a href="/guides/overview/entities#transaction-lifecycle-through-transaction-events">More details here</a></li>
     * <li><code>originUserId</code> - Unique identifier (if any) of the user who is sending the money. This user must be created within the Flagright system before using the <a href="/api-reference/api-reference/consumer-users/create">create a consumer user</a> or <a href="/api-reference/api-reference/business-users/create">create a business user</a> endpoint</li>
     * <li><code>destinationUserId</code> - Unique identifier (if any) of the user who is receiving the money. This user must be created within the Flagright system before using the <a href="/api-reference/api-reference/consumer-users/create">create a consumer user</a> or <a href="/api-reference/api-reference/business-users/create">create a business user</a> endpoint</li>
     * <li><code>originAmountDetails</code> - Details of the amount being sent from the origin</li>
     * <li><code>destinationAmountDetails</code> - Details of the amount being received at the destination</li>
     * <li><code>originPaymentDetails</code> - Payment details (if any) used at the origin (ex: <code>CARD</code>, <code>IBAN</code>, <code>WALLET</code> etc). You can click on the dropdown next to the field in the schema below to view all supported payment types.</li>
     * <li><code>destinationPaymentDetails</code> - Payment details (if any) used at the destination (ex: <code>CARD</code>, <code>IBAN</code>, <code>WALLET</code> etc). You can click on the dropdown next to the field in the schema below to view all supported payment types.</li>
     * </ul>
     */
    public CompletableFuture<TransactionsVerifyResponse> verify(TransactionsVerifyRequest request) {
        return this.rawClient.verify(request).thenApply(response -> response.body());
    }

    /**
     * <h2>POST Transactions</h2>
     * <code>/transactions</code> endpoint allows you to operate on the <a href="/guides/overview/entities#transaction">Transaction entity.</a>
     * <p>In order to pass the payload of a transaction to Flagright and verify the transaction, you will need to call this endpoint with the transaction payload. Not all fields are mandatory, you will only need to pass in the fields that you have and are relevant for your compliance setup.</p>
     * <h3>Payload</h3>
     * <p>Here are some of the most used payload fields explained (you can find the full payload <a href="/api-reference/api-reference/transactions/verify#request">schema below</a> with 1 line descriptions):</p>
     * <ul>
     * <li><code>type</code>: Type of transaction (Ex: <code>WITHDRAWAL</code>, <code>DEPOSIT</code>, <code>TRANSFER</code> etc).</li>
     * <li><code>transactionId</code> - Unique Identifier for the transaction.</li>
     * <li><code>timestamp</code> - UNIX timestamp in <em>milliseconds</em> of when the transaction took place</li>
     * <li><code>transactionState</code> - The state of the transaction, set to <code>CREATED</code> by default. <a href="/guides/overview/entities#transaction-lifecycle-through-transaction-events">More details here</a></li>
     * <li><code>originUserId</code> - Unique identifier (if any) of the user who is sending the money. This user must be created within the Flagright system before using the <a href="/api-reference/api-reference/consumer-users/create">create a consumer user</a> or <a href="/api-reference/api-reference/business-users/create">create a business user</a> endpoint</li>
     * <li><code>destinationUserId</code> - Unique identifier (if any) of the user who is receiving the money. This user must be created within the Flagright system before using the <a href="/api-reference/api-reference/consumer-users/create">create a consumer user</a> or <a href="/api-reference/api-reference/business-users/create">create a business user</a> endpoint</li>
     * <li><code>originAmountDetails</code> - Details of the amount being sent from the origin</li>
     * <li><code>destinationAmountDetails</code> - Details of the amount being received at the destination</li>
     * <li><code>originPaymentDetails</code> - Payment details (if any) used at the origin (ex: <code>CARD</code>, <code>IBAN</code>, <code>WALLET</code> etc). You can click on the dropdown next to the field in the schema below to view all supported payment types.</li>
     * <li><code>destinationPaymentDetails</code> - Payment details (if any) used at the destination (ex: <code>CARD</code>, <code>IBAN</code>, <code>WALLET</code> etc). You can click on the dropdown next to the field in the schema below to view all supported payment types.</li>
     * </ul>
     */
    public CompletableFuture<TransactionsVerifyResponse> verify(
            TransactionsVerifyRequest request, RequestOptions requestOptions) {
        return this.rawClient.verify(request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * <h3>GET Transactions</h3>
     * <code>/transactions</code> endpoint allows you to operate on the <a href="/guides/overview/entities#transaction">Transaction entity</a>.
     * <p>Calling <code>GET /transactions/{transactionId}</code> will return the entire transaction payload and rule execution results for the transaction with the corresponding <code>transactionId</code></p>
     */
    public CompletableFuture<TransactionWithRulesResult> get(String transactionId) {
        return this.rawClient.get(transactionId).thenApply(response -> response.body());
    }

    /**
     * <h3>GET Transactions</h3>
     * <code>/transactions</code> endpoint allows you to operate on the <a href="/guides/overview/entities#transaction">Transaction entity</a>.
     * <p>Calling <code>GET /transactions/{transactionId}</code> will return the entire transaction payload and rule execution results for the transaction with the corresponding <code>transactionId</code></p>
     */
    public CompletableFuture<TransactionWithRulesResult> get(String transactionId, RequestOptions requestOptions) {
        return this.rawClient.get(transactionId, requestOptions).thenApply(response -> response.body());
    }
}
