/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flagright.api.resources.transactions.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.flagright.api.core.ObjectMappers;
import com.flagright.api.types.BooleanString;
import com.flagright.api.types.Transaction;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = TransactionsVerifyRequest.Builder.class)
public final class TransactionsVerifyRequest {
    private final Optional<BooleanString> validateOriginUserId;

    private final Optional<BooleanString> validateDestinationUserId;

    private final Transaction body;

    private final Map<String, Object> additionalProperties;

    private TransactionsVerifyRequest(
            Optional<BooleanString> validateOriginUserId,
            Optional<BooleanString> validateDestinationUserId,
            Transaction body,
            Map<String, Object> additionalProperties) {
        this.validateOriginUserId = validateOriginUserId;
        this.validateDestinationUserId = validateDestinationUserId;
        this.body = body;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Boolean string whether Flagright should validate if provided originUserId exist. True by default
     */
    @JsonProperty("validateOriginUserId")
    public Optional<BooleanString> getValidateOriginUserId() {
        return validateOriginUserId;
    }

    /**
     * @return Boolean string whether Flagright should validate if provided destinationUserId exist. True by default
     */
    @JsonProperty("validateDestinationUserId")
    public Optional<BooleanString> getValidateDestinationUserId() {
        return validateDestinationUserId;
    }

    @JsonProperty("body")
    public Transaction getBody() {
        return body;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof TransactionsVerifyRequest && equalTo((TransactionsVerifyRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(TransactionsVerifyRequest other) {
        return validateOriginUserId.equals(other.validateOriginUserId)
                && validateDestinationUserId.equals(other.validateDestinationUserId)
                && body.equals(other.body);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.validateOriginUserId, this.validateDestinationUserId, this.body);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static BodyStage builder() {
        return new Builder();
    }

    public interface BodyStage {
        _FinalStage body(@NotNull Transaction body);

        Builder from(TransactionsVerifyRequest other);
    }

    public interface _FinalStage {
        TransactionsVerifyRequest build();

        _FinalStage validateOriginUserId(Optional<BooleanString> validateOriginUserId);

        _FinalStage validateOriginUserId(BooleanString validateOriginUserId);

        _FinalStage validateDestinationUserId(Optional<BooleanString> validateDestinationUserId);

        _FinalStage validateDestinationUserId(BooleanString validateDestinationUserId);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements BodyStage, _FinalStage {
        private Transaction body;

        private Optional<BooleanString> validateDestinationUserId = Optional.empty();

        private Optional<BooleanString> validateOriginUserId = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(TransactionsVerifyRequest other) {
            validateOriginUserId(other.getValidateOriginUserId());
            validateDestinationUserId(other.getValidateDestinationUserId());
            body(other.getBody());
            return this;
        }

        @java.lang.Override
        @JsonSetter("body")
        public _FinalStage body(@NotNull Transaction body) {
            this.body = Objects.requireNonNull(body, "body must not be null");
            return this;
        }

        /**
         * <p>Boolean string whether Flagright should validate if provided destinationUserId exist. True by default</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage validateDestinationUserId(BooleanString validateDestinationUserId) {
            this.validateDestinationUserId = Optional.ofNullable(validateDestinationUserId);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "validateDestinationUserId", nulls = Nulls.SKIP)
        public _FinalStage validateDestinationUserId(Optional<BooleanString> validateDestinationUserId) {
            this.validateDestinationUserId = validateDestinationUserId;
            return this;
        }

        /**
         * <p>Boolean string whether Flagright should validate if provided originUserId exist. True by default</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage validateOriginUserId(BooleanString validateOriginUserId) {
            this.validateOriginUserId = Optional.ofNullable(validateOriginUserId);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "validateOriginUserId", nulls = Nulls.SKIP)
        public _FinalStage validateOriginUserId(Optional<BooleanString> validateOriginUserId) {
            this.validateOriginUserId = validateOriginUserId;
            return this;
        }

        @java.lang.Override
        public TransactionsVerifyRequest build() {
            return new TransactionsVerifyRequest(
                    validateOriginUserId, validateDestinationUserId, body, additionalProperties);
        }
    }
}
