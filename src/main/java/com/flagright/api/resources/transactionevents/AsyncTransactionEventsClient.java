/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flagright.api.resources.transactionevents;

import com.flagright.api.core.ClientOptions;
import com.flagright.api.core.RequestOptions;
import com.flagright.api.types.TransactionEvent;
import com.flagright.api.types.TransactionEventMonitoringResult;
import com.flagright.api.types.TransactionEventWithRulesResult;
import java.util.concurrent.CompletableFuture;

public class AsyncTransactionEventsClient {
    protected final ClientOptions clientOptions;

    private final AsyncRawTransactionEventsClient rawClient;

    public AsyncTransactionEventsClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        this.rawClient = new AsyncRawTransactionEventsClient(clientOptions);
    }

    /**
     * Get responses with HTTP metadata like headers
     */
    public AsyncRawTransactionEventsClient withRawResponse() {
        return this.rawClient;
    }

    /**
     * <h2>POST Transaction Events</h2>
     * <code>/events/transaction</code> endpoint allows you to operate on the <a href="/guides/overview/entities#transaction-event">Transaction Events entity.</a>
     * <p>Transaction events are created after the initial <code>POST /transactions</code> call (which creates a transaction) and are used to:</p>
     * <ul>
     * <li>Update the STATE of the transaction, using the <code>transactionState</code> field and manage the <a href="/guides/overview/entities#transaction-lifecycle-through-transaction-events">Transaction Lifecycle</a></li>
     * <li>Update the transaction details, using the <code>updatedTransactionAttributes</code> field.</li>
     * </ul>
     * <blockquote>
     * <p>If you have neither of the above two use cases, you do not need to use transaction events.</p>
     * </blockquote>
     * <h3>Payload</h3>
     * <p>Each transaction event needs three mandatory fields:</p>
     * <ul>
     * <li><code>transactionState</code> - STATE of the transaction -&gt; value is set to <code>CREATED</code> after <code>POST /transactions</code> call</li>
     * <li><code>timestamp</code>- the timestamp of when the event was created or occured in your system</li>
     * <li><code>transactionId</code> - The ID of the transaction for which this event is generated.</li>
     * </ul>
     * <p>In order to make individual events retrievable, you also need to pass in a unique <code>eventId</code> to the request body.</p>
     */
    public CompletableFuture<TransactionEventMonitoringResult> create(TransactionEvent request) {
        return this.rawClient.create(request).thenApply(response -> response.body());
    }

    /**
     * <h2>POST Transaction Events</h2>
     * <code>/events/transaction</code> endpoint allows you to operate on the <a href="/guides/overview/entities#transaction-event">Transaction Events entity.</a>
     * <p>Transaction events are created after the initial <code>POST /transactions</code> call (which creates a transaction) and are used to:</p>
     * <ul>
     * <li>Update the STATE of the transaction, using the <code>transactionState</code> field and manage the <a href="/guides/overview/entities#transaction-lifecycle-through-transaction-events">Transaction Lifecycle</a></li>
     * <li>Update the transaction details, using the <code>updatedTransactionAttributes</code> field.</li>
     * </ul>
     * <blockquote>
     * <p>If you have neither of the above two use cases, you do not need to use transaction events.</p>
     * </blockquote>
     * <h3>Payload</h3>
     * <p>Each transaction event needs three mandatory fields:</p>
     * <ul>
     * <li><code>transactionState</code> - STATE of the transaction -&gt; value is set to <code>CREATED</code> after <code>POST /transactions</code> call</li>
     * <li><code>timestamp</code>- the timestamp of when the event was created or occured in your system</li>
     * <li><code>transactionId</code> - The ID of the transaction for which this event is generated.</li>
     * </ul>
     * <p>In order to make individual events retrievable, you also need to pass in a unique <code>eventId</code> to the request body.</p>
     */
    public CompletableFuture<TransactionEventMonitoringResult> create(
            TransactionEvent request, RequestOptions requestOptions) {
        return this.rawClient.create(request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * <h3>GET Transaction Events</h3>
     * <code>/events/transaction</code> endpoint allows you to operate on the <a href="/guides/overview/entities#transaction-event">Transaction Events entity.</a>.
     * <p>You can retrieve any transaction event you created using the <a href="/api-reference/api-reference/transaction-events/create">POST Transaction Events</a> call.</p>
     */
    public CompletableFuture<TransactionEventWithRulesResult> get(String eventId) {
        return this.rawClient.get(eventId).thenApply(response -> response.body());
    }

    /**
     * <h3>GET Transaction Events</h3>
     * <code>/events/transaction</code> endpoint allows you to operate on the <a href="/guides/overview/entities#transaction-event">Transaction Events entity.</a>.
     * <p>You can retrieve any transaction event you created using the <a href="/api-reference/api-reference/transaction-events/create">POST Transaction Events</a> call.</p>
     */
    public CompletableFuture<TransactionEventWithRulesResult> get(String eventId, RequestOptions requestOptions) {
        return this.rawClient.get(eventId, requestOptions).thenApply(response -> response.body());
    }
}
