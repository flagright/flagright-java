/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flagright.api.resources.consumerusers;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.flagright.api.core.ClientOptions;
import com.flagright.api.core.FlagrightApiException;
import com.flagright.api.core.FlagrightException;
import com.flagright.api.core.FlagrightHttpResponse;
import com.flagright.api.core.MediaTypes;
import com.flagright.api.core.ObjectMappers;
import com.flagright.api.core.QueryStringMapper;
import com.flagright.api.core.RequestOptions;
import com.flagright.api.errors.BadRequestError;
import com.flagright.api.errors.TooManyRequestsError;
import com.flagright.api.errors.UnauthorizedError;
import com.flagright.api.resources.consumerusers.requests.ConsumerUsersCreateRequest;
import com.flagright.api.resources.consumerusers.types.ConsumerUsersCreateResponse;
import com.flagright.api.types.ApiErrorResponse;
import com.flagright.api.types.UserWithRulesResult;
import java.io.IOException;
import java.util.concurrent.CompletableFuture;
import okhttp3.Call;
import okhttp3.Callback;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;
import okhttp3.ResponseBody;
import org.jetbrains.annotations.NotNull;

public class AsyncRawConsumerUsersClient {
    protected final ClientOptions clientOptions;

    public AsyncRawConsumerUsersClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
    }

    /**
     * <h2>POST Consumer User</h2>
     * <code>/consumer/user</code> endpoint allows you to operate on the Consumer user entity.
     * <p>In order to pass the payload of a User to Flagright and verify the User, you will need to call this endpoint with the User payload. Not all fields are mandatory, you will only need to pass in the fields that you have and are relevant for your compliance setup.</p>
     * <h3>Payload</h3>
     * <p>Each consumer user needs two mandatory fields:</p>
     * <ul>
     * <li><code>userId</code> - Unique identifier for the user</li>
     * <li><code>createdTimestamp</code> - UNIX timestamp in <em>milliseconds</em> for when the User is created in your system</li>
     * </ul>
     */
    public CompletableFuture<FlagrightHttpResponse<ConsumerUsersCreateResponse>> create(
            ConsumerUsersCreateRequest request) {
        return create(request, null);
    }

    /**
     * <h2>POST Consumer User</h2>
     * <code>/consumer/user</code> endpoint allows you to operate on the Consumer user entity.
     * <p>In order to pass the payload of a User to Flagright and verify the User, you will need to call this endpoint with the User payload. Not all fields are mandatory, you will only need to pass in the fields that you have and are relevant for your compliance setup.</p>
     * <h3>Payload</h3>
     * <p>Each consumer user needs two mandatory fields:</p>
     * <ul>
     * <li><code>userId</code> - Unique identifier for the user</li>
     * <li><code>createdTimestamp</code> - UNIX timestamp in <em>milliseconds</em> for when the User is created in your system</li>
     * </ul>
     */
    public CompletableFuture<FlagrightHttpResponse<ConsumerUsersCreateResponse>> create(
            ConsumerUsersCreateRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("consumer/users");
        if (request.getLockCraRiskLevel().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl,
                    "lockCraRiskLevel",
                    request.getLockCraRiskLevel().get().toString(),
                    false);
        }
        if (request.getLockKycRiskLevel().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl,
                    "lockKycRiskLevel",
                    request.getLockKycRiskLevel().get().toString(),
                    false);
        }
        if (request.getValidateUserId().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "validateUserId", request.getValidateUserId().get().toString(), false);
        }
        if (request.getKrsOnly().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "_krsOnly", request.getKrsOnly().get().toString(), false);
        }
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request.getBody()), MediaTypes.APPLICATION_JSON);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("POST", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<FlagrightHttpResponse<ConsumerUsersCreateResponse>> future = new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        future.complete(new FlagrightHttpResponse<>(
                                ObjectMappers.JSON_MAPPER.readValue(
                                        responseBody.string(), ConsumerUsersCreateResponse.class),
                                response));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    try {
                        switch (response.code()) {
                            case 400:
                                future.completeExceptionally(new BadRequestError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, ApiErrorResponse.class),
                                        response));
                                return;
                            case 401:
                                future.completeExceptionally(new UnauthorizedError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, ApiErrorResponse.class),
                                        response));
                                return;
                            case 429:
                                future.completeExceptionally(new TooManyRequestsError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, ApiErrorResponse.class),
                                        response));
                                return;
                        }
                    } catch (JsonProcessingException ignored) {
                        // unable to map error response, throwing generic error
                    }
                    future.completeExceptionally(new FlagrightApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                            response));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(new FlagrightException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new FlagrightException("Network error executing HTTP request", e));
            }
        });
        return future;
    }

    /**
     * <h3>GET Consumer User</h3>
     * <code>/consumer/user</code> endpoint allows you to operate on the Consumer User entity.
     * <p>Calling <code>GET /consumer/user/{userId}</code> will return the entire user payload and rule execution results for the user with the corresponding <code>userId</code></p>
     */
    public CompletableFuture<FlagrightHttpResponse<UserWithRulesResult>> get(String userId) {
        return get(userId, null);
    }

    /**
     * <h3>GET Consumer User</h3>
     * <code>/consumer/user</code> endpoint allows you to operate on the Consumer User entity.
     * <p>Calling <code>GET /consumer/user/{userId}</code> will return the entire user payload and rule execution results for the user with the corresponding <code>userId</code></p>
     */
    public CompletableFuture<FlagrightHttpResponse<UserWithRulesResult>> get(
            String userId, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("consumer/users")
                .addPathSegment(userId)
                .build();
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<FlagrightHttpResponse<UserWithRulesResult>> future = new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        future.complete(new FlagrightHttpResponse<>(
                                ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), UserWithRulesResult.class),
                                response));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    try {
                        switch (response.code()) {
                            case 400:
                                future.completeExceptionally(new BadRequestError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, ApiErrorResponse.class),
                                        response));
                                return;
                            case 401:
                                future.completeExceptionally(new UnauthorizedError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, ApiErrorResponse.class),
                                        response));
                                return;
                            case 429:
                                future.completeExceptionally(new TooManyRequestsError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, ApiErrorResponse.class),
                                        response));
                                return;
                        }
                    } catch (JsonProcessingException ignored) {
                        // unable to map error response, throwing generic error
                    }
                    future.completeExceptionally(new FlagrightApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                            response));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(new FlagrightException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new FlagrightException("Network error executing HTTP request", e));
            }
        });
        return future;
    }
}
