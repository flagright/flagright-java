/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flagright.api.resources.batch.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.flagright.api.core.ObjectMappers;
import com.flagright.api.types.BooleanString;
import com.flagright.api.types.BusinessUserEvent;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = BusinessUserEventBatchRequest.Builder.class)
public final class BusinessUserEventBatchRequest {
    private final Optional<BooleanString> lockCraRiskLevel;

    private final Optional<BooleanString> lockKycRiskLevel;

    private final Optional<String> batchId;

    private final List<BusinessUserEvent> data;

    private final Map<String, Object> additionalProperties;

    private BusinessUserEventBatchRequest(
            Optional<BooleanString> lockCraRiskLevel,
            Optional<BooleanString> lockKycRiskLevel,
            Optional<String> batchId,
            List<BusinessUserEvent> data,
            Map<String, Object> additionalProperties) {
        this.lockCraRiskLevel = lockCraRiskLevel;
        this.lockKycRiskLevel = lockKycRiskLevel;
        this.batchId = batchId;
        this.data = data;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Boolean string whether Flagright should lock the CRA risk level for the user.
     */
    @JsonProperty("lockCraRiskLevel")
    public Optional<BooleanString> getLockCraRiskLevel() {
        return lockCraRiskLevel;
    }

    /**
     * @return Boolean string whether Flagright should lock the KYC risk level for the user.
     */
    @JsonProperty("lockKycRiskLevel")
    public Optional<BooleanString> getLockKycRiskLevel() {
        return lockKycRiskLevel;
    }

    @JsonProperty("batchId")
    public Optional<String> getBatchId() {
        return batchId;
    }

    @JsonProperty("data")
    public List<BusinessUserEvent> getData() {
        return data;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof BusinessUserEventBatchRequest && equalTo((BusinessUserEventBatchRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(BusinessUserEventBatchRequest other) {
        return lockCraRiskLevel.equals(other.lockCraRiskLevel)
                && lockKycRiskLevel.equals(other.lockKycRiskLevel)
                && batchId.equals(other.batchId)
                && data.equals(other.data);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.lockCraRiskLevel, this.lockKycRiskLevel, this.batchId, this.data);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<BooleanString> lockCraRiskLevel = Optional.empty();

        private Optional<BooleanString> lockKycRiskLevel = Optional.empty();

        private Optional<String> batchId = Optional.empty();

        private List<BusinessUserEvent> data = new ArrayList<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(BusinessUserEventBatchRequest other) {
            lockCraRiskLevel(other.getLockCraRiskLevel());
            lockKycRiskLevel(other.getLockKycRiskLevel());
            batchId(other.getBatchId());
            data(other.getData());
            return this;
        }

        @JsonSetter(value = "lockCraRiskLevel", nulls = Nulls.SKIP)
        public Builder lockCraRiskLevel(Optional<BooleanString> lockCraRiskLevel) {
            this.lockCraRiskLevel = lockCraRiskLevel;
            return this;
        }

        public Builder lockCraRiskLevel(BooleanString lockCraRiskLevel) {
            this.lockCraRiskLevel = Optional.ofNullable(lockCraRiskLevel);
            return this;
        }

        @JsonSetter(value = "lockKycRiskLevel", nulls = Nulls.SKIP)
        public Builder lockKycRiskLevel(Optional<BooleanString> lockKycRiskLevel) {
            this.lockKycRiskLevel = lockKycRiskLevel;
            return this;
        }

        public Builder lockKycRiskLevel(BooleanString lockKycRiskLevel) {
            this.lockKycRiskLevel = Optional.ofNullable(lockKycRiskLevel);
            return this;
        }

        @JsonSetter(value = "batchId", nulls = Nulls.SKIP)
        public Builder batchId(Optional<String> batchId) {
            this.batchId = batchId;
            return this;
        }

        public Builder batchId(String batchId) {
            this.batchId = Optional.ofNullable(batchId);
            return this;
        }

        @JsonSetter(value = "data", nulls = Nulls.SKIP)
        public Builder data(List<BusinessUserEvent> data) {
            this.data.clear();
            this.data.addAll(data);
            return this;
        }

        public Builder addData(BusinessUserEvent data) {
            this.data.add(data);
            return this;
        }

        public Builder addAllData(List<BusinessUserEvent> data) {
            this.data.addAll(data);
            return this;
        }

        public BusinessUserEventBatchRequest build() {
            return new BusinessUserEventBatchRequest(
                    lockCraRiskLevel, lockKycRiskLevel, batchId, data, additionalProperties);
        }
    }
}
