/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flagright.api.resources.batch;

import com.flagright.api.core.ClientOptions;
import com.flagright.api.core.RequestOptions;
import com.flagright.api.resources.batch.requests.BusinessBatchRequest;
import com.flagright.api.resources.batch.requests.BusinessUserEventBatchRequest;
import com.flagright.api.resources.batch.requests.ConsumerUserEventBatchRequest;
import com.flagright.api.resources.batch.requests.TransactionBatchRequest;
import com.flagright.api.resources.batch.requests.TransactionEventBatchRequest;
import com.flagright.api.resources.batch.requests.UserBatchRequest;
import com.flagright.api.types.BatchResponse;
import java.util.concurrent.CompletableFuture;

public class AsyncBatchClient {
    protected final ClientOptions clientOptions;

    private final AsyncRawBatchClient rawClient;

    public AsyncBatchClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        this.rawClient = new AsyncRawBatchClient(clientOptions);
    }

    /**
     * Get responses with HTTP metadata like headers
     */
    public AsyncRawBatchClient withRawResponse() {
        return this.rawClient;
    }

    public CompletableFuture<BatchResponse> verifyTransaction(TransactionBatchRequest request) {
        return this.rawClient.verifyTransaction(request).thenApply(response -> response.body());
    }

    public CompletableFuture<BatchResponse> verifyTransaction(
            TransactionBatchRequest request, RequestOptions requestOptions) {
        return this.rawClient.verifyTransaction(request, requestOptions).thenApply(response -> response.body());
    }

    public CompletableFuture<BatchResponse> createTransactionEvents(TransactionEventBatchRequest request) {
        return this.rawClient.createTransactionEvents(request).thenApply(response -> response.body());
    }

    public CompletableFuture<BatchResponse> createTransactionEvents(
            TransactionEventBatchRequest request, RequestOptions requestOptions) {
        return this.rawClient.createTransactionEvents(request, requestOptions).thenApply(response -> response.body());
    }

    public CompletableFuture<BatchResponse> createConsumerUsers(UserBatchRequest request) {
        return this.rawClient.createConsumerUsers(request).thenApply(response -> response.body());
    }

    public CompletableFuture<BatchResponse> createConsumerUsers(
            UserBatchRequest request, RequestOptions requestOptions) {
        return this.rawClient.createConsumerUsers(request, requestOptions).thenApply(response -> response.body());
    }

    public CompletableFuture<BatchResponse> createBusinessUsers(BusinessBatchRequest request) {
        return this.rawClient.createBusinessUsers(request).thenApply(response -> response.body());
    }

    public CompletableFuture<BatchResponse> createBusinessUsers(
            BusinessBatchRequest request, RequestOptions requestOptions) {
        return this.rawClient.createBusinessUsers(request, requestOptions).thenApply(response -> response.body());
    }

    public CompletableFuture<BatchResponse> createConsumerUserEvents(ConsumerUserEventBatchRequest request) {
        return this.rawClient.createConsumerUserEvents(request).thenApply(response -> response.body());
    }

    public CompletableFuture<BatchResponse> createConsumerUserEvents(
            ConsumerUserEventBatchRequest request, RequestOptions requestOptions) {
        return this.rawClient.createConsumerUserEvents(request, requestOptions).thenApply(response -> response.body());
    }

    public CompletableFuture<BatchResponse> createBusinessUserEvents(BusinessUserEventBatchRequest request) {
        return this.rawClient.createBusinessUserEvents(request).thenApply(response -> response.body());
    }

    public CompletableFuture<BatchResponse> createBusinessUserEvents(
            BusinessUserEventBatchRequest request, RequestOptions requestOptions) {
        return this.rawClient.createBusinessUserEvents(request, requestOptions).thenApply(response -> response.body());
    }
}
