/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flagright.api.resources.consumeruserevents;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.flagright.api.core.ClientOptions;
import com.flagright.api.core.FlagrightApiException;
import com.flagright.api.core.FlagrightException;
import com.flagright.api.core.FlagrightHttpResponse;
import com.flagright.api.core.MediaTypes;
import com.flagright.api.core.ObjectMappers;
import com.flagright.api.core.QueryStringMapper;
import com.flagright.api.core.RequestOptions;
import com.flagright.api.errors.BadRequestError;
import com.flagright.api.errors.ConflictError;
import com.flagright.api.errors.TooManyRequestsError;
import com.flagright.api.errors.UnauthorizedError;
import com.flagright.api.resources.consumeruserevents.requests.ConsumerUserEventsCreateRequest;
import com.flagright.api.types.ApiErrorResponse;
import com.flagright.api.types.ConsumerUserEventWithRulesResult;
import com.flagright.api.types.UserWithRulesResult;
import java.io.IOException;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;
import okhttp3.ResponseBody;

public class RawConsumerUserEventsClient {
    protected final ClientOptions clientOptions;

    public RawConsumerUserEventsClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
    }

    /**
     * <h2>POST Consumer User Events</h2>
     * <code>/events/consumer/user</code> endpoint allows you to operate on the Consumer User Events entity.
     * <p>User events are created after the initial <code>POST /consumer/users</code> call (which creates a user) and are used to:</p>
     * <ul>
     * <li>Update the STATE and KYC Status of the user, using the <code>userStateDetails</code> or <code>kycStatusDetails</code> field</li>
     * <li>Update the user details, using the <code>updatedConsumerUserAttributes</code> field.</li>
     * </ul>
     * <blockquote>
     * <p>If you have neither of the above two use cases, you do not need to use user events.</p>
     * </blockquote>
     * <h3>Payload</h3>
     * <p>Each user event needs three mandatory fields:</p>
     * <ul>
     * <li><code>timestamp</code>- the timestamp of when the event was created or occured in your system</li>
     * <li><code>userId</code> - The ID of the transaction for which this event is generated.</li>
     * </ul>
     * <p>In order to make individual events retrievable, you also need to pass in a unique <code>eventId</code> to the request body.</p>
     */
    public FlagrightHttpResponse<UserWithRulesResult> create(ConsumerUserEventsCreateRequest request) {
        return create(request, null);
    }

    /**
     * <h2>POST Consumer User Events</h2>
     * <code>/events/consumer/user</code> endpoint allows you to operate on the Consumer User Events entity.
     * <p>User events are created after the initial <code>POST /consumer/users</code> call (which creates a user) and are used to:</p>
     * <ul>
     * <li>Update the STATE and KYC Status of the user, using the <code>userStateDetails</code> or <code>kycStatusDetails</code> field</li>
     * <li>Update the user details, using the <code>updatedConsumerUserAttributes</code> field.</li>
     * </ul>
     * <blockquote>
     * <p>If you have neither of the above two use cases, you do not need to use user events.</p>
     * </blockquote>
     * <h3>Payload</h3>
     * <p>Each user event needs three mandatory fields:</p>
     * <ul>
     * <li><code>timestamp</code>- the timestamp of when the event was created or occured in your system</li>
     * <li><code>userId</code> - The ID of the transaction for which this event is generated.</li>
     * </ul>
     * <p>In order to make individual events retrievable, you also need to pass in a unique <code>eventId</code> to the request body.</p>
     */
    public FlagrightHttpResponse<UserWithRulesResult> create(
            ConsumerUserEventsCreateRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("events/consumer/user");
        if (request.getAllowUserTypeConversion().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl,
                    "allowUserTypeConversion",
                    request.getAllowUserTypeConversion().get().toString(),
                    false);
        }
        if (request.getLockKycRiskLevel().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl,
                    "lockKycRiskLevel",
                    request.getLockKycRiskLevel().get().toString(),
                    false);
        }
        if (request.getLockCraRiskLevel().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl,
                    "lockCraRiskLevel",
                    request.getLockCraRiskLevel().get().toString(),
                    false);
        }
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request.getBody()), MediaTypes.APPLICATION_JSON);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("POST", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new FlagrightHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), UserWithRulesResult.class),
                        response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            try {
                switch (response.code()) {
                    case 400:
                        throw new BadRequestError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, ApiErrorResponse.class),
                                response);
                    case 401:
                        throw new UnauthorizedError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, ApiErrorResponse.class),
                                response);
                    case 409:
                        throw new ConflictError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, ApiErrorResponse.class),
                                response);
                    case 429:
                        throw new TooManyRequestsError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, ApiErrorResponse.class),
                                response);
                }
            } catch (JsonProcessingException ignored) {
                // unable to map error response, throwing generic error
            }
            throw new FlagrightApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new FlagrightException("Network error executing HTTP request", e);
        }
    }

    /**
     * <h3>GET a Consumer User Event</h3>
     * You can retrieve any consumer user event you created using the <a href="/api-reference/api-reference/consumer-user-events/create">POST Consumer User Events</a> call.
     */
    public FlagrightHttpResponse<ConsumerUserEventWithRulesResult> get(String eventId) {
        return get(eventId, null);
    }

    /**
     * <h3>GET a Consumer User Event</h3>
     * You can retrieve any consumer user event you created using the <a href="/api-reference/api-reference/consumer-user-events/create">POST Consumer User Events</a> call.
     */
    public FlagrightHttpResponse<ConsumerUserEventWithRulesResult> get(String eventId, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("events/consumer/user")
                .addPathSegment(eventId)
                .build();
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new FlagrightHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(
                                responseBody.string(), ConsumerUserEventWithRulesResult.class),
                        response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            try {
                switch (response.code()) {
                    case 400:
                        throw new BadRequestError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, ApiErrorResponse.class),
                                response);
                    case 401:
                        throw new UnauthorizedError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, ApiErrorResponse.class),
                                response);
                    case 429:
                        throw new TooManyRequestsError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, ApiErrorResponse.class),
                                response);
                }
            } catch (JsonProcessingException ignored) {
                // unable to map error response, throwing generic error
            }
            throw new FlagrightApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new FlagrightException("Network error executing HTTP request", e);
        }
    }
}
