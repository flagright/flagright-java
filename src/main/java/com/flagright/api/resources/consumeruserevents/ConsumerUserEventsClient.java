/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.flagright.api.resources.consumeruserevents;

import com.flagright.api.core.ClientOptions;
import com.flagright.api.core.RequestOptions;
import com.flagright.api.resources.consumeruserevents.requests.ConsumerUserEventsCreateRequest;
import com.flagright.api.types.ConsumerUserEventWithRulesResult;
import com.flagright.api.types.UserWithRulesResult;

public class ConsumerUserEventsClient {
    protected final ClientOptions clientOptions;

    private final RawConsumerUserEventsClient rawClient;

    public ConsumerUserEventsClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        this.rawClient = new RawConsumerUserEventsClient(clientOptions);
    }

    /**
     * Get responses with HTTP metadata like headers
     */
    public RawConsumerUserEventsClient withRawResponse() {
        return this.rawClient;
    }

    /**
     * <h2>POST Consumer User Events</h2>
     * <code>/events/consumer/user</code> endpoint allows you to operate on the Consumer User Events entity.
     * <p>User events are created after the initial <code>POST /consumer/users</code> call (which creates a user) and are used to:</p>
     * <ul>
     * <li>Update the STATE and KYC Status of the user, using the <code>userStateDetails</code> or <code>kycStatusDetails</code> field</li>
     * <li>Update the user details, using the <code>updatedConsumerUserAttributes</code> field.</li>
     * </ul>
     * <blockquote>
     * <p>If you have neither of the above two use cases, you do not need to use user events.</p>
     * </blockquote>
     * <h3>Payload</h3>
     * <p>Each user event needs three mandatory fields:</p>
     * <ul>
     * <li><code>timestamp</code>- the timestamp of when the event was created or occured in your system</li>
     * <li><code>userId</code> - The ID of the transaction for which this event is generated.</li>
     * </ul>
     * <p>In order to make individual events retrievable, you also need to pass in a unique <code>eventId</code> to the request body.</p>
     */
    public UserWithRulesResult create(ConsumerUserEventsCreateRequest request) {
        return this.rawClient.create(request).body();
    }

    /**
     * <h2>POST Consumer User Events</h2>
     * <code>/events/consumer/user</code> endpoint allows you to operate on the Consumer User Events entity.
     * <p>User events are created after the initial <code>POST /consumer/users</code> call (which creates a user) and are used to:</p>
     * <ul>
     * <li>Update the STATE and KYC Status of the user, using the <code>userStateDetails</code> or <code>kycStatusDetails</code> field</li>
     * <li>Update the user details, using the <code>updatedConsumerUserAttributes</code> field.</li>
     * </ul>
     * <blockquote>
     * <p>If you have neither of the above two use cases, you do not need to use user events.</p>
     * </blockquote>
     * <h3>Payload</h3>
     * <p>Each user event needs three mandatory fields:</p>
     * <ul>
     * <li><code>timestamp</code>- the timestamp of when the event was created or occured in your system</li>
     * <li><code>userId</code> - The ID of the transaction for which this event is generated.</li>
     * </ul>
     * <p>In order to make individual events retrievable, you also need to pass in a unique <code>eventId</code> to the request body.</p>
     */
    public UserWithRulesResult create(ConsumerUserEventsCreateRequest request, RequestOptions requestOptions) {
        return this.rawClient.create(request, requestOptions).body();
    }

    /**
     * <h3>GET a Consumer User Event</h3>
     * You can retrieve any consumer user event you created using the <a href="/api-reference/api-reference/consumer-user-events/create">POST Consumer User Events</a> call.
     */
    public ConsumerUserEventWithRulesResult get(String eventId) {
        return this.rawClient.get(eventId).body();
    }

    /**
     * <h3>GET a Consumer User Event</h3>
     * You can retrieve any consumer user event you created using the <a href="/api-reference/api-reference/consumer-user-events/create">POST Consumer User Events</a> call.
     */
    public ConsumerUserEventWithRulesResult get(String eventId, RequestOptions requestOptions) {
        return this.rawClient.get(eventId, requestOptions).body();
    }
}
